{
  "swagger" : "2.0",
  "info" : {
    "title" : "API Reference",
    "version" : "2.0"
  },
  "host" : "onpremise-demo.boldbi.com",
  "basePath" : "/api",
  "schemes" : [ "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "tags" : [ {
    "name" : "Authentication"
  } ],
  "securityDefinitions" : {
    "Bearer" : {
      "type" : "apiKey",
      "name" : "Authorization",
      "in" : "header"
    }
  },
  "security" : [ {
    "Bearer" : [ ]
  } ],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate Client",
		"description": "For information on how to retrieve the client ID and secret for the REST API, please refer to [this](/multi-tenancy/site-administration/api-keys/) documentation.",
        "operationId": "client_authentication",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "parameters" : [ {
          "type" : "string",
          "name" : "grant_type",
          "in" : "formData",
          "required" : true,
          "x-nullable" : false,
          "description" : "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>client_credentials</code>"
        }, {
          "type" : "string",
          "name" : "client_id",
          "in" : "formData",
          "required" : true,
          "x-nullable" : false,
          "description" : "Client ID of the internal app."
        }, {
          "type" : "string",
          "name" : "client_secret",
          "in" : "formData",
          "required" : true,
          "x-nullable" : false,
          "description" : "Client secret of the internal app."
        } ],
        "responses": {
          "200": {
            "description": "Successfully retrived access token.",
            "schema": {
              "$ref": "#/definitions/Response"
            },
            "x-nullable": true
          },
          "400": {
            "description": "Only grant_type=client_credentials requests are accepted by this server."
          },
          "401": {
            "description": "Invalid client_id or client_secret"
          },
          "405": {
            "description": "Request type was not POST"
          }
        }
      }
    },
    "/v2.0/startup": {
      "post": {
        "tags": [
          "Application Startup"
        ],
        "summary": "Application Startup",
        "description": "Configure the application startup for Bold BI/Bold Reports application.",
        "operationId": "application_startup",
        "parameters": [
          {
            "name": "Startup",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Startup"
            },
            "description": "configuration request data.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant added successfully.",
                "schema": {
                  "$ref": "#/definitions/ApiResponse"
                }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add tenant.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startup"
      }
    },
    "/v2.0/tenants": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create New Tenant",
        "description": "Create a new Bold BI / Bold Reports tenant.",
        "operationId": "create_tenant",
        "parameters": [
          {
            "name": "AddTenantV2",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddTenantV2"
            },
            "description": "Add tenant request body.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant added successfully.",
                "schema": {
                  "$ref": "#/definitions/ApiResponse"
                }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add tenant.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/tenant/{tenantId}/isolation-code": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Add Isolation Code",
        "description": "Isolation code support is available for Bold BI tenants alone.",
        "operationId": "add_isolation_code",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          },
          {
            "name": "addisolatiocode",
            "in": "body",
            "description": "Add isolation code request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TenantIsolation"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant isolation code added successfully.",
                "schema": {
                  "$ref": "#/definitions/TenantIsolationResponse"
                }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add tenant.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/tenants/{tenantid}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "View Tenant",
        "description": "View the details of the Bold BI / Bold Reports tenant.",
        "operationId": "view_tenant",
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "operation is successful.",
            
                "schema": {
                  "$ref": "#/definitions/TenantResponse"
                }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update tenant.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startup"
      }
    },
    "/v2.0/tenants/{id}": {
      "put": {
        "tags": [
          "Tenants"
        ],
        "summary": "Update Tenant",
        "description": "Update the site or database information for the Bold BI or Bold Reports tenant.",
        "operationId": "update_tenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          },
          {
            "name": "UpdateTenant",
            "in": "body",
            "description": "Update tenant request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTenant"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant details updated successfully.",
                "schema": {
                  "$ref": "#/definitions/TenantResponse"
                }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update tenant.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startup"
      }
    },
    "/v2.0/tenants/{tenant_id}": {
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "Delete Tenant",
        "description": "Delete the  Bold BI / Bold Reports tenant",
        "operationId": "delete_tenant",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site has been deleted successfully.",
            "schema": {
                  "$ref": "#/definitions/ApiUserDeleteResponse"
                }
          },
          "400": {
            "description": "Tenant id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Tenant details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/tenants ": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "List Tenants",
        "description": "List all the Bold BI and Bold Reports tenants available in the application. <br /><code>/v2.0/tenants</code> returns the first 25 tenants by default.<br /><blockquote style='display: inline;'>Note:</blockquote>By default, this API endpoint returns a list of 25 tenants. You can get more records (up to 100 records at a time) by using the <code>page</code> and <code>page_size</code> URI parameters. For example, refer to the following URLs:<br /><ul><li><code>/v2.0/tenants?page_size=30</code> returns the first 30 tenants.</li><li><code>/v2.0/tenants?page=2&page_size=30</code> returns the second group of 30 tenants.</li></ul><br /><blockquote>URI Parameters</blockquote><ul><li><code>page_size</code> the number of tenants to be returned per page.</li><li><code>page</code> the page number.</li></ul>",
        "operationId": "list_tenant",
		 "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Specify the page number.",
            "required": false,
            "style": "simple",
            "explode": false,
			"schema": {
              "type": "string",
              "format": "int32",
              "nullable": false
			}
          },
          {
            "name": "page_size",
            "in": "path",
            "description": "Specify the number of tenants per page.",
            "required": false,
            "style": "simple",
            "explode": false,
			"schema": {
              "type": "string",
              "format": "int32",
              "nullable": false
			}
          }
        ],
        "responses": {
          "200": {
            "description": "Operation success.",
                "schema": {
                  "$ref": "#/definitions/ArrayTenantResponse"
                }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to get list of tenants.",
            "content": {}
          }
        }
      }
    },
	"/v2.0/tenant/{tenant_id}/grant-access": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Grant User Access to Tenant ",
        "description": "Grant user access to the given tenant. ",
        "operationId": "grant_user_access",
		"parameters": [
		{
            "name": "tenant_id",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
			"schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
			}
          },
          {
			"name": "grant-access",
            "in": "body",		
		    "description": "Grant user access request body.",
            "required": true,
              "schema": {
              "$ref": "#/definitions/GrantUser"
                },
            "x-nullable": true
          }
		  ],
        "responses": {
          "200": {
            "description": "Granted site access to the user successfully.",
                "schema": {
                  "$ref": "#/definitions/GrantUserApiResponse"
                }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to Grant user access for tenant.",
            "content": {}
          }
        }
      }
    },
	"/v2.0/tenant/{tenant_id}/remove-access": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Remove User Access from Tenant ",
        "description": "Remove user access from the given tenant.",
        "operationId": "remove_user_access",
		"parameters": [
		{
            "name": "tenant_id",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
			"schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
			}
          },
          {
			 "name": "grant-access",
              "in": "body",		
		   "description": "Grant user access request body.",
            "required": true,
              "schema": {
              "$ref": "#/definitions/GrantUser"
                },
            "x-nullable": true
          }
		  ],
        "responses": {
          "204": {
            "description": "No Content.",
            "content": {}
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
		  "412": {
            "description": "Tenant id is invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "404": {
            "description": "Tenant is deleted.",
            "content": {}
          },
          "417": {
            "description": "Failed to remove user access from tenant.",
            "content": {}
          }
        }
      }
    },
	"{domain}/api/v2.0/user/add": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add User ",
        "description": "Add new user account in UMS.",
        "operationId": "add_user",
		"parameters": [
        {
			"name" : "add user",
			  "in" : "body",
              "schema": {
                "$ref": "#/definitions/AddUser"
              },
          "required": true
        }
		],
        "responses": {
          "200": {
            "description": "User has been added and activated successfully.",
                "schema": {
                  "$ref": "#/definitions/ArrayUserResponse"
                }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add user.",
            "content": {}
          }
        }
      }
    },
	"/v2.0/user/{userId}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "Update the user details.",
        "operationId": "update_user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
			 "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
			 }
          },
        {
			"name" : "update user",
			"in" : "body",
              "schema": {
                "$ref": "#/definitions/UpdateUser"
              },
          "required": true
        }
	  ],
        "responses": {
          "200": {
            "description": "User has been updated successfully.",
                "schema": {
                  "$ref": "#/definitions/ArrayUpdateUserResponse"
                }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to while update user.",
            "content": {}
          }
        }
      }
    },
	"{domain}/api/v2.0/user/{user_Id}":{
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "View User ",
        "description": "View specific user details.",
        "operationId": "view_user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
              "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
          }
		  }
        ],
        "responses": {
          "200": {
            "description": "Get user information successfully.",
                "schema": {
                  "$ref": "#/definitions/ArrayUserResponse"
                }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to while get user information.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List All Users",
        "description": "List all the active users.<br /><blockquote>URI Parameters</blockquote><ul><li><code>/v2.0/users</code> Returns the first 25 users by default</li><li><code>/v2.0/users?page_size=30</code> Returns the first 30 users</li><li><code>/v2.0/users?page=2&page_size=30</code> Returns the 2nd group of 30 users</li></ul>",
        "operationId": "get_user_list",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Specify the page number.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "int32",
              "nullable": false
            }
          },
          {
            "name": "page_size",
            "in": "path",
            "description": "Specify the number of users per page.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Listed users successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ArrayUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to list the users.",
            "content": {}
          }
        }
      }
    },
  "/v2.0/users/{userId}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update Password",
        "description": "Update user password.",
        "operationId": "update_user_password",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          },
          {
            "name": "updateuserpassword",
            "in": "body",
            "description": "Update user password request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePassword"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Password has been changed successfully.",
                "schema": {
                  "$ref": "#/definitions/ArrayUserResponse"
                }
          }, 
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to while update user password.",
            "content": {}
          }
        }
      }
    },
	"/v2.0/user/{Id}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "Delete the user account.",
        "operationId": "delete_user",
       "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
              "type": "string",
              "format": "uuid",
              "nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No Content.",
            "content": {}
          },
          "406 ": {
            "description": "User id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    }
  },
  "definitions": {
    "Response": {
      "type": "object",
      "properties": {
        "token_type": {
          "type": "string",
          "description": "Type of token assigned by the authorization server."
        },
        "access_token": {
          "type": "string",
          "description": "Authentication token of the client."
        },
        "expires_in": {
          "type": "string",
          "description": "The lifetime in seconds of the access token."
        },
        "clientId": {
          "type": "string",
          "description": "Client ID of the internal app."
        },
        "TenantStatus": {
          "type": "string",
          "description": "Status of the client."
        },
        ".confidentiality_level": {
          "type": "string",
          "description": "Level of token confidentiality."
        },
        ".issued": {
          "type": "string",
          "description": "Authorization token issued date/time."
        },
        ".expires": {
          "type": "string",
          "description": "Authorization token expires on date/time."
        }
      },
      "x-typeName": "Response"
    },
    "ApiResponse": {
      "required": [
        "ApiStatus",
        "Status"
      ],
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "type": "object",
          "description": "Returns data from the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "TenantResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "description": "Response data.",
          "$ref": "#/definitions/TenantResponseData"
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "ArrayTenantResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data.",
          "items": {
          "$ref": "#/definitions/TenantResponseData"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "TenantResponseData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the tenant."
        },
        "tenant_name": {
          "type": "string",
          "description": "Name of the tenant."
        },
        "url": {
          "type": "string",
          "description": "URL of the tenant.."
        },
        "tenant_type": {
          "type": "string",
          "description": "Type of tenant."
        },
        "created_date": {
          "type": "string",
          "description": "Created date of the tenant."
        },
        "modified_date": {
          "type": "string",
          "description": "Modified date of the tenant."
        },
        "tenant_status": {
          "type": "string",
          "description": "Status of the tenant."
        },
		"use_site_identifier":{
			  "type": "boolean",
            "description": "site identifier of the tenant."
         },
		 "is_master":
		 {
			 "type": "boolean",
            "description": "master site of the tenant."
		 }
      }
    },
    "Authentication": {
      "required": [
        "grant_type",
        "client_id",
        "client_secret"
      ],
      "properties": {
        "grant_type": {
          "type": "string",
          "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>client_credentials</code>",
          "nullable": false
        },
        "client_id": {
          "type": "string",
          "description": "Client ID of the internal app.",
          "nullable": false
        },
        "client_secret": {
          "type": "string",
          "description": "Client secret of the internal app..",
          "nullable": false
        }
      }
    },
    "Startup": {
      "type": "object",
      "description": "Startup Configuration object details.",
      "additionalProperties": false,
      "properties": {
        "ServerConfiguration": {
          "$ref": "#/definitions/ServerConfiguration"
        },
        "UmsConfiguration": {
          "$ref": "#/definitions/UmsConfiguration"
        },
        "DataStoreConfiguration": {
          "$ref": "#/definitions/DataStoreConfiguration"
        }
      }
    },
    "AddTenantV2": {
      "type": "object",
      "description": "Add tenant object details.",
      "additionalProperties": false,
	   "required": [
          "Email"
        ],
      "properties": {
        "Email": {
          "type": "string",
          "description": "Email of the user."
        },
        "ServerConfiguration": {
          "$ref": "#/definitions/ServerConfiguration"
        },
        "DataStoreConfiguration": {
          "$ref": "#/definitions/DataStoreConfiguration"
        }
      }
    },
    "UpdateTenant": {
     "type": "object",
        "description": "Update tenant object.",
        "additionalProperties": false,
        "properties": {
          "Site": { 
			 "$ref": "#/definitions/SiteDetails"
          },
          "Database": {
			 "$ref": "#/definitions/DatabaseInformation"
          }
        }
    },
	 "SiteDetails":
	  {
		 "type": "object",
        "description": "Site information to be updated. ",
        "additionalProperties": false,
		"properties": {
          "SiteName": { 
			 "type": "string",
            "description": "Name of the site."
          },
          "SiteUrl": {
            "type": "string",
            "description": "URL of the site."
          },
		  "SiteIdentifier":
		  {
			"type": "string",
            "description": "Identifier of the site."
		  }
        }
      },
	  "DatabaseInformation":
	  {
		 "type": "object",
        "description": "Database information.",
        "additionalProperties": false,
		 "required": [
          "ServerName",
          "DatabaseName",
          "UserName",
          "Password",
		  "SslEnabled"
        ],
		"properties": {
          "ServerName": {
            "type": "string",
            "description": "Name of the database server."
          },
          "DatabaseName": {
            "type": "string",
            "description": "Name of the database."
          },
          "UserName": {
            "type": "string",
            "description": "Username of the database server.  <br /> <blockquote>Check the permission required for the database users [here](/faq/what-are-the-database-permissions-required-to-set-up-bold-bi-embedded/)</blockquote>"
          },
          "Password": {
            "type": "string",
            "description": "Password of the database user."
          },
          "MaintenanceDatabase": {
            "type": "string",
            "description": "Maintenance database of the database server.<br /> <blockquote>Required only for <code>PostgreSQL</code> database server.</blockquote>"
          },
          "Port": {
            "type": "string",
            "description": "Port number of the database server.<br /><blockquote>Required only for <code>PostgreSQL</code> and <code>MySQL</code> database servers.</blockquote>"
          },
           "SslEnabled":
		  {
			  "type": "boolean",
			  "default": "false",
            "description": "Determines whether the encrypted connection to the database server is required. "
		  },
		   "AdditionalParameters": 
		  {
			"type": "string",
            "description": "Additional parameters for connecting to the database server."
		  }
	  }
	  },
    "DataStoreConfiguration": {
      "type": "object",
      "description": "Data store configuration of the site <blockquote>required to create <code>BoldBIOnPremise</code> tenants only.</blockquote>",
      "additionalProperties": false,
      "required": [
        "ServerName",
        "DatabaseName",
        "UserName",
        "Password",
        "ServerType"
      ],
      "properties": {
        "ServerName": {
          "type": "string",
          "description": "Name of the database server."
        },
        "DatabaseName": {
          "type": "string",
          "description": "Name of the database."
        },
        "UserName": {
          "type": "string",
          "description": "Username of the database server.  <br /> <blockquote>Check the permission required for the database users [here](/faq/what-are-the-database-permissions-required-to-set-up-bold-bi-embedded/)</blockquote>"
        },
        "Password": {
          "type": "string",
          "description": "Password of the database user."
        },
        "IsNewDatabase": {
          "type": "boolean",
          "default": "false",
          "description": "Determines whether to create a new database or connect to an existing database specified by the <code>DatabaseName</code> parameter. "
        },
        "MaintenanceDatabase": {
          "type": "string",
          "description": "Maintenance database of the database server.<br /> <blockquote>Required only for <code>PostgreSQL</code> database server.</blockquote>"
        },
        "Port": {
          "type": "string",
          "description": "Port number of the database server.<br /><blockquote>Required only for <code>PostgreSQL</code> and <code>MySQL</code> database servers.</blockquote>"
        },
        "ServerType": {
          "description": "Database type of the server.",
          "$ref": "#/definitions/DatabaseType"
        },
		"SslEnabled":
		  {
			  "type": "boolean",
			  "default": "false",
            "description": "Determines whether the encrypted connection to the database server is required. "
		  },
		   "AdditionalParameters": 
		  {
			"type": "string",
            "description": "Additional parameters for connecting to the database server."
		  }
      }
    },
    "Database": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ServerName",
        "DatabaseName",
        "UserName",
        "Password",
        "ServerType"
      ],
      "properties": {
        "ServerName": {
          "type": "string",
          "description": "Name of the database server."
        },
        "DatabaseName": {
          "type": "string",
          "description": "Name of the database."
        },
        "UserName": {
          "type": "string",
          "description": "Username of the database server.  <br /> <blockquote>Check the permission required for the database users [here](/faq/what-are-the-database-permissions-required-to-set-up-bold-bi-embedded/)</blockquote>"
        },
        "Password": {
          "type": "string",
          "description": "Password of the database user."
        },
        "IsNewDatabase": {
          "type": "boolean",
          "default": "false",
          "description": "Determines whether to create a new database or connect to an existing database specified by the <code>DatabaseName</code> parameter."
        },
        "MaintenanceDatabase": {
          "type": "string",
          "description": "Maintenance database of the database server.<br /> <blockquote>Required only for <code>PostgreSQL</code> database server.</blockquote>"
        },
        "Port": {
          "type": "string",
          "description": "Port number of the database server.<br /><blockquote>Required only for <code>PostgreSQL</code> and <code>MySQL</code> database servers.</blockquote>"
        },
        "ServerType": {
          "description": "Database type of the server.",
          "$ref": "#/definitions/DatabaseType"
        },
		"SslEnabled":
		  {
			  "type": "boolean",
			  "default": "false",
            "description": "Determines whether the encrypted connection to the database server is required. "
		  },
		   "AdditionalParameters": 
		  {
			"type": "string",
            "description": "Additional parameters for connecting to the database server."
		  }
      }
    },
    "UmsConfiguration": {
      "type": "object",
      "description": "Site administration configuration data.",
      "additionalProperties": false,
      "required": [
        "Database",
        "Storage",
        "User",
        "Unlockkey"
      ],
      "properties": {
        "Database": {
          "$ref": "#/definitions/Database"
        },
        "Storage": {
          "$ref": "#/definitions/Storage"
        },
        "User": {
          "$ref": "#/definitions/User"
        },
        "Unlockkey": {
          "type": "string",
          "description": "Unlock key for the Bold BI/Reports application."
        }
      }
    },
    "ServerConfiguration": {
      "type": "object",
      "description": "Site configuration data.",
      "additionalProperties": false,
      "required": [
        "Database",
        "Storage",
        "Site"
      ],
      "properties": {
        "Database": {
          "$ref": "#/definitions/Database"
        },
        "Storage": {
          "$ref": "#/definitions/Storage"
        },
        "Site": {
          "$ref": "#/definitions/Site"
        }
      }
    },
    "Storage": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "StorageType"
      ],
      "properties": {
        "StorageType": {
          "description": "Storage type.",
          "$ref": "#/definitions/StorageType"
        },
        "AzureBlob": {
          "description": "Azure Blob data.",
          "$ref": "#/definitions/AzureBlob"
        }
      }
    },
    "StorageType": {
		  "description": "0 - FileStorage, 1 - AzureBlob",
        "type": "enum",
        "enum": [
          0,
          1
        ],
        "x-enumNames": [
          "FileStorage",
          "AzureBlob"
        ]
      },
      "DatabaseType": {
		   "description": "0 - MSSQL, 1 - MySQL,2-PostgreSQL",
        "type": "enum",
        "enum": [
          0,
          1,
          2
        ],
        "x-enumNames": [
          "MSSQL",
          "MySQL",
          "PostgreSQL"
        ]
      },
      "TenantType": {
		  "description": "3 - BoldBIOnPremise, 4 - BoldReportsOnPremise",
        "type": "enum",
        "enum": [
          3,
          4
        ],
        "x-enumNames": [
          "BoldBIOnPremise",
          "BoldReportsOnPremise"
        ]
      },
    "AzureBlob": {
      "type": "object",
      "description": "Required only if the storage type is <code>AzureBlob</code>",
      "additionalProperties": false,
      "required": [
        "AzureBlobStorageContainerName",
        "AzureBlobStorageUri",
        "AccountName",
        "AccessKey"
      ],
      "properties": {
        "AzureBlobStorageContainerName": {
          "type": "string",
          "description": "Azure Blob storage container Name."
        },
        "AzureBlobStorageUri": {
          "type": "string",
          "description": "Azure Blob storage URI."
        },
        "ConnectionString": {
          "type": "string",
          "description": "Connection string of the blob."
        },
        "ConnectionType": {
          "type": "string",
          "description": "Connection type.<ul><li><code>http</code></li><li><code>https</code></li></ul>"
        },
        "AccountName": {
          "type": "string",
          "description": "Account name of the blob."
        },
        "AccessKey": {
          "type": "string",
          "description": "Access key of the blob"
        }
      }
    },
	"UpdateUser":
	  {
		"type": "object",
        "additionalProperties": false,
        "required": [
          "Email",
          "FirstName",
          "UserName",
		  "LastName",
          "contact"
        ],
        "properties": {
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "UserName": {
            "type": "string",
            "description": "Username of the user."
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the user."
          },
		  "contact":
		  {
			"type": "int",
            "description": "Contact of the user."
		  }
        }
	  },
	  "ArrayUpdateUserResponse":
	  {
		  "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status from the API."
          },
          "Data": {
            "type": "array",
            "description": "Response data from the API.",
            "items": {
            "$ref": "#/definitions/UpdateUserResponse"
            }
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
	  },
	  "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "Returns the user ID from the API."
          },
          "user_name": {
            "type": "string",
            "description": "Returns the username from the API."
          },
          "email": {
            "type": "string",
            "description": "Returns the email address of the user from the API."
          },
          "first_name": {
            "type": "string",
            "description": "Returns the first name of the user from the API."
          },
          "last_name": {
            "type": "string",
            "description": "Returns the last name of the user from the API."
          },
          "display_name": {
            "type": "string",
            "description": "Returns the display name of the user from the API."
          },
          "contact": {
            "type": "string",
            "description": "Returns the contact number of the user from the API."
          },
          "email_verified": {
            "type": "string",
            "description": "Returns whether the email is verified or not from the API."
          },
          "user_status": {
            "type": "string",
            "description": "Returns the status of the user from the API."
          },
          "directory_type": {
            "description": "Returns directory type response data from the API.",
            "$ref": "#/definitions/DirectoryType"
          }
        }
      },
	"AddUser":
	  {
		 "type": "object",
        "additionalProperties": false,
        "required": [
          "Email",
          "FirstName",
          "UserName",
          "Password"
        ],
        "properties": {
          "Email": {
            "type": "string",
            "description": "Email address of the user. This value may be required based on the user accounts configuration. "
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "UserName": {
            "type": "string",
            "description": "Username of the user."
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the user."
          },
          "Password": {
            "type": "string",
            "description": "The user's password. Depending on the activation mode, this field may not be required. For, Email activation mode password is not necessary. Automatic activation is password required. <br /><blockquote>Note: Password must meet the following requirements. It must contain,</blockquote><ul><li><code>At least 6 characters</code></li><li><code>1 uppercase character</code></li><li><code>1 lowercase character</code></li><li><code>1 numeric character</code></li><li><code>1 special character</code></li></ul> "
          }
        }
	  },
    "Site": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TenantName",
        "TenantIdentifier",
        "TenantType"
      ],
      "properties": {
        "TenantName": {
          "type": "string",
          "description": "Name of the site."
        },
        "TenantIdentifier": {
          "type": "string",
          "description": "Identifier of the site."
        },
        "UseSiteIdentifier": {
          "type": "boolean",
          "description": "Decides whether we need to use or ignore the site identifier. If the site identifier is ignored, unique domain should be used for each site."
        },
        "TenantType": {
          "description": "Tenant type of the site.",
          "$ref": "#/definitions/TenantType"
        },
        "UseCustomBranding": {
          "type": "boolean",
          "description": "Decides to use branding details from ID."
        },
        "CustomAttribute": {
          "type": "array",
          "description": "Custom site attributes.",
          "items": {
          "$ref": "#/definitions/CustomAttribute"
        }
        },
        "TenantIsolation": {
          "description": "Tenant isolation code.",
          "$ref": "#/definitions/TenantIsolation"
        }
      }
    },
	"GrantUser":
	  {
		 "type": "object",
        "additionalProperties": false,
        "properties": {
          "UserName": {
            "type": "string",
            "description": "Username of the user."
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "user_id": {
            "type": "string",
            "description": "Id of the user."
          }
	  }
	  },
	  "GrantUserApiResponse":
	  {
		  "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status from the API."
          },
          "Data": {
            "type": "array",
            "description": "Response data from the API.",
            "items": {
			"$ref": "#/definitions/GrantResponseData",
            }
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
	  },
	   "GrantResponseData":
	  {
		 "type": "object",
        "properties": {
          "tenant": {
           "description": "Response data from the tenant..",
			"$ref": "#/definitions/TenantResponseData",
          },
          "user": {
            "description": "Response data from the user..",
			"$ref": "#/definitions/UserResponse",
            }
        }
	  },
	"ApiUserDeleteResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status from the API."
          },
          "Data": {
            "type": "array",
            "description": "Response data from the API.",
            "items": {
            "$ref": "#/definitions/UserDeleteResponse"
            }
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
	  "UserDeleteResponse":
	  {
		   "type": "object",
        "properties": {
          "DatabaseDeleted": {
            "type": "string",
            "description": "DatabaseDeleted."
          },
          "IsSiteDeleted": {
            "type": "boolean",
            "description": "SiteDeleted."
          }
        }
	  },
    "TenantIsolation": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "IsEnabled": {
          "type": "boolean",
          "description": "Enable or disable the Isolation Code."
        },
        "IsolationCode": {
          "type": "string",
          "description": "Isolation code."
        }
      }
    },
    "TenantIsolationResponse": {
      "type": "object",
      "description": "Tenant Isolation code response details.",
      "additionalProperties": false,
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "default": "false",
          "description": "Enable or disable the Isolation Code."
        },
        "isolation_code": {
          "type": "string",
          "description": "Isolation code."
        }
      }
    },
    "User": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Email",
        "FirstName",
        "UserName",
        "LastName",
        "Password"
      ],
      "properties": {
        "Email": {
          "type": "string",
          "description": "Email address of the user."
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "UserName": {
          "type": "string",
          "description": "Username."
        },
        "LastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "Password": {
          "type": "string",
          "description": "Password of the user. <br /><blockquote>Note: Password must meet the following requirements. It must contain,</blockquote><ul><li><code>At least 6 characters</code></li><li><code>1 uppercase character</code></li><li><code>1 lowercase character</code></li><li><code>1 numeric character</code></li><li><code>1 special character</code></li></ul>"
        }
      }
    },
    "UpdatePassword": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Password"
      ],
      "properties": {
        "Password": {
          "type": "string",
          "description": "Password to be updated for the user. <br /><blockquote>Note: Password must meet the following requirements. It must contain,</blockquote><ul><li><code>At least 6 characters</code></li><li><code>1 uppercase character</code></li><li><code>1 lowercase character</code></li><li><code>1 numeric character</code></li><li><code>1 special character</code></li></ul>"
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "Returns the user ID from the API."
        },
        "user_name": {
          "type": "string",
          "description": "Returns the username from the API."
        },
        "email": {
          "type": "string",
          "description": "Returns the email address of the user from the API."
        },
        "first_name": {
          "type": "string",
          "description": "Returns the first name of the user from the API."
        },
        "last_name": {
          "type": "string",
          "description": "Returns the last name of the user from the API."
        },
        "display_name": {
          "type": "string",
          "description": "Returns the display name of the user from the API."
        },
        "contact": {
          "type": "string",
          "description": "Returns the contact number of the user from the API."
        },
        "email_verified": {
          "type": "string",
          "description": "Returns whether the email is verified or not from the API."
        },
        "user_status": {
          "type": "string",
          "description": "Returns the status of the user from the API."
        },
        "directory_type": {
          "description": "Returns directory type response data from the API.",
          "$ref": "#/definitions/DirectoryType"
        }
      }
    },
    "DirectoryType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the directory type."
        },
        "name": {
          "type": "string",
          "description": "Name of the directory type."
        }
      }
    },
    "ArrayUserResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data from the API.",
          "items": {
          "$ref": "#/definitions/UserResponse"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "CustomAttribute": {
      "type": "object",
      "required": [
        "Name",
        "Value",
        "Description",
        "CanEncrypt"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name of the site attribute."
        },
        "Value": {
          "type": "string",
          "description": "Value for the site attribute."
        },
        "Description": {
          "type": "string",
          "description": "Description of the attribute."
        },
        "CanEncrypt": {
          "type": "boolean",
          "description": "Decides to encrypt the site attribute data."
        }
      }
    }
  },
  "parameters": {},
  "responses": {}
}