{
  "swagger": "2.0",
  "info": {
    "title": "API Reference",
    "version": "2.0"
  },
  "host": "onpremise-demo.boldbi.com",
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Authentication"
    }
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate Client",
        "description": "For information on how to retrieve the client ID and secret for the REST API, please refer to [this](/multi-tenancy/site-administration/api-keys/) documentation.",
        "operationId": "client_authentication",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "grant_type",
            "in": "formData",
            "required": true,
            "x-nullable": false,
            "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>client_credentials</code>"
          },
          {
            "type": "string",
            "name": "client_id",
            "in": "formData",
            "required": true,
            "x-nullable": false,
            "description": "Client ID of the internal app."
          },
          {
            "type": "string",
            "name": "client_secret",
            "in": "formData",
            "required": true,
            "x-nullable": false,
            "description": "Client secret of the internal app."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrived access token.",
            "schema": {
              "$ref": "#/definitions/Response"
            },
            "x-nullable": true
          },
          "400": {
            "description": "Only grant_type=client_credentials requests are accepted by this server."
          },
          "401": {
            "description": "Invalid client_id or client_secret"
          },
          "405": {
            "description": "Request type was not POST"
          }
        }
      }
    },
    "/v2.0/startup": {
      "post": {
        "tags": [
          "Application Startup"
        ],
        "summary": "Application Startup",
        "description": "Configure the application startup for Bold BI/Bold Reports application.",
        "operationId": "application_startup",
        "parameters": [
          {
            "name": "Startup",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Startup"
            },
            "description": "configuration request data.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant added successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add tenant.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startup"
      }
    },
    "/v2.0/tenants": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create New Tenant",
        "description": "Create a new Bold BI / Bold Reports tenant.",
        "operationId": "create_tenant",
        "parameters": [
          {
            "name": "AddTenantV2",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddTenantV2"
            },
            "description": "Add tenant request body.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant added successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add tenant.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/tenant/{tenantId}/isolation-code": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Add Isolation Code",
        "description": "Isolation code support is available for Bold BI tenants alone.",
        "operationId": "add_isolation_code",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          },
          {
            "name": "addisolatiocode",
            "in": "body",
            "description": "Add isolation code request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TenantIsolation"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant isolation code added successfully.",
            "schema": {
              "$ref": "#/definitions/TenantIsolationResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add tenant.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/tenants/{tenantid}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "View Tenant",
        "description": "View the details of the Bold BI / Bold Reports tenant.",
        "operationId": "view_tenant",
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "operation is successful.",
            "schema": {
              "$ref": "#/definitions/TenantResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update tenant.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startup"
      }
    },
    "/v2.0/tenants/{id}": {
      "put": {
        "tags": [
          "Tenants"
        ],
        "summary": "Update Tenant",
        "description": "Update the site or database information for the Bold BI or Bold Reports tenant.",
        "operationId": "update_tenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          },
          {
            "name": "UpdateTenant",
            "in": "body",
            "description": "Update tenant request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTenant"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant details updated successfully.",
            "schema": {
              "$ref": "#/definitions/TenantResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update tenant.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startup"
      }
    },
    "/v2.0/tenants/{tenant_id}": {
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "Delete Tenant",
        "description": "Delete the  Bold BI / Bold Reports tenant",
        "operationId": "delete_tenant",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site has been deleted successfully.",
            "schema": {
              "$ref": "#/definitions/ApiUserDeleteResponse"
            }
          },
          "400": {
            "description": "Tenant id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Tenant details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/tenants ": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "List Tenants",
        "description": "List all the Bold BI and Bold Reports tenants available in the application. <br /><code>/v2.0/tenants</code> returns the first 25 tenants by default.<br /><blockquote style='display: inline;'>Note:</blockquote>By default, this API endpoint returns a list of 25 tenants. You can get more records (up to 100 records at a time) by using the <code>page</code> and <code>page_size</code> URI parameters. For example, refer to the following URLs:<br /><ul><li><code>/v2.0/tenants?page_size=30</code> returns the first 30 tenants.</li><li><code>/v2.0/tenants?page=2&page_size=30</code> returns the second group of 30 tenants.</li></ul><br /><blockquote>URI Parameters</blockquote><ul><li><code>page_size</code> the number of tenants to be returned per page.</li><li><code>page</code> the page number.</li></ul>",
        "operationId": "list_tenant",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Specify the page number.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "int32",
              "nullable": false
            }
          },
          {
            "name": "page_size",
            "in": "path",
            "description": "Specify the number of tenants per page.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation success.",
            "schema": {
              "$ref": "#/definitions/ArrayTenantResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to get list of tenants.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/tenant/{tenant_id}/grant-access": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Grant User Access to Tenant ",
        "description": "Grant user access to the given tenant. ",
        "operationId": "grant_user_access",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          },
          {
            "name": "grant-access",
            "in": "body",
            "description": "Grant user access request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GrantUser"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Granted site access to the user successfully.",
            "schema": {
              "$ref": "#/definitions/GrantUserApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to Grant user access for tenant.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/tenant/{tenant_id}/remove-access": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Remove User Access from Tenant ",
        "description": "Remove user access from the given tenant.",
        "operationId": "remove_user_access",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          },
          {
            "name": "grant-access",
            "in": "body",
            "description": "Grant user access request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GrantUser"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content.",
            "content": {}
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "412": {
            "description": "Tenant id is invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "404": {
            "description": "Tenant is deleted.",
            "content": {}
          },
          "417": {
            "description": "Failed to remove user access from tenant.",
            "content": {}
          }
        }
      }
    },
    "{domain}/api/v2.0/user/add": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add User ",
        "description": "Add new user account in UMS.",
        "operationId": "add_user",
        "parameters": [
          {
            "name": "add user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddUser"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User has been added and activated successfully.",
            "schema": {
              "$ref": "#/definitions/ArrayUserResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add user.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/user/{userId}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "Update the user details.",
        "operationId": "update_user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          },
          {
            "name": "update user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUser"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User has been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ArrayUpdateUserResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to while update user.",
            "content": {}
          }
        }
      }
    },
    "{domain}/api/v2.0/users/{user_Id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "View User ",
        "description": "View specific user details.",
        "operationId": "view_user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get user information successfully.",
            "schema": {
              "$ref": "#/definitions/ArrayUserResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to while get user information.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/users/{user}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a User by UserName or Email",
        "description": "Retrieves the particular user details.",
        "operationId": "Users_GetUserDetail",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Username or email address of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User info has been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiGetUserResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to get user detail.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List All Users",
        "description": "List all the active users.<br /><blockquote>URI Parameters</blockquote><ul><li><code>/v2.0/users</code> Returns the first 25 users by default</li><li><code>/v2.0/users?page_size=30</code> Returns the first 30 users</li><li><code>/v2.0/users?page=2&page_size=30</code> Returns the 2nd group of 30 users</li></ul>",
        "operationId": "get_user_list",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Specify the page number.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "int32",
              "nullable": false
            }
          },
          {
            "name": "page_size",
            "in": "path",
            "description": "Specify the number of users per page.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Listed users successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ArrayUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to list the users.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/users/{userId}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update Password",
        "description": "Update user password.",
        "operationId": "update_user_password",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          },
          {
            "name": "updateuserpassword",
            "in": "body",
            "description": "Update user password request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePassword"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Password has been changed successfully.",
            "schema": {
              "$ref": "#/definitions/ArrayUserResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to while update user password.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/user/{Id}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "Delete the user account.",
        "operationId": "delete_user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "type": "string",
            "format": "uuid",
            "nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No Content.",
            "content": {}
          },
          "406 ": {
            "description": "User id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "v2.0/administration/security/networking/ip-whitelist":{
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get IP whitelisting Settings",
        "description": "Retrieve the IP whitelisting setting details.",
        "operationId": "adminstration_IP_Whitelisting_settings",
        "responses": {
          "200": {
            "description": "IP whitelisting settings details have been retrieved successfully.",
               "schema": {
                  "$ref": "#/definitions/ApiIPWhitelistingSettings"
                }
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "405":{
              "description": "Request type was not get",
              "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Update IP whitelisting settings",
        "description": "Users who have admin rights permissions for IP whitelisting settings can update the IP whitelisting settings.",
        "operationId": "Administartion_UpdateIPWhitelistingSettings",
        "parameters": [
          {
            "name": "IPWhitelistingSettings",
            "in": "body",
            "required": true,
            "description": "The updated IP whitelisting settings that have been passed will be updated with the details.",            
            "schema": {
              "$ref": "#/definitions/IPWhitelistingResponse"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "IP whitelisting settings details has been updated successfully.",
              "schema": {
                "$ref": "#/definitions/ApiResponse"
              }
            },
            "401": {
                "description": "Access denied",
                "content": {}
            },
            "405":{
                "description":"Request type was not post",
                "content": {}
            },
            "404":{
                "description":"Content of the request is empty or missing",
                "content": {}
            },
            "417":{
                "description":"Failed to update IP whitelisting setting",
                "content": {}
            }
        }
      }

    },
    "/v2.0/administration/branding/logos": {
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Update Branding logos ",
        "description": "Add new images to branding logos",
        "operationId": "update_branding_logos",
        "parameters": [
          {
            "name": "update branding logos",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateBrandings"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Branding images have been successfully updated.",
            "schema": {
              "$ref": "#/definitions/UpdateBrandingsResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update branding images.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/administration/embed/secrets/regenerate": {
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Regenerate Embed Secret.",
        "description": "Returns the generated embed secret key.",
        "operationId": "regenerate_embed_secret",
        "responses": {
          "200": {
            "description": "Secret code has been regenerated successfully.",
            "schema": {
              "$ref": "#/definitions/RegenerateEmbedSecret"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to reset secret key.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/administration/embed/configuration": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Embed Settings.",
        "description": "Returns the embed configuration settings.",
        "operationId": "get_embed_settings",
        "responses": {
          "200": {
            "description": "Embed configuration setting has been fetched successfully.",
            "schema": {
              "$ref": "#/definitions/EmbedConfigurationResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve embed settings.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Update Embed Settings.",
        "description": "update the embed setting details.",
        "operationId": "update_embed_settings",
        "parameters": [
          {
            "name" : "Update branding images request body.",
            "in" : "body",
            "schema": {
              "$ref": "#/definitions/UpdateEmbedSettings"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Settings have been uploaded successfully.",
            "schema": {
              "$ref": "#/definitions/EmbedConfigurationResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Embed configuration is not in a valid format.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/user-activity-logs": {
      "get": {
        "tags": [
          "Activity Logs"
        ],
        "summary": "Get Activity Logs",
        "description": "Retrieve a list of activities performed in the item module. This endpoint allows site administrators to filter logs based on various parameters such as event category, event type, user email, tenant ID, app source, and date range.",
        "operationId": "ActivityLogs_GetAllActivityLogs",
        "parameters": [
          {
            "type": "string",
            "name": "eventCategory",
            "in": "query",
            "required": false,
            "description": "Specify the category of the event. Allowed values are <code>User, Permission, Settings</code>.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "type": "string",
            "name": "eventType",
            "in": "query",
            "required": false,
            "description": "Specify the type of the event. Allowed values are <code>Added, Updated, Deleted</code>.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "type": "string",
            "name": "initiatedUserEmail",
            "in": "query",
            "required": false,
            "description": "Specify the email address of the user who initiated the event.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "type": "string",
            "name": "targetUserEmail",
            "in": "query",
            "required": false,
            "description": "Specify the email address of the user who was targeted by the event.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "type": "string",
            "name": "eventStartDate",
            "in": "query",
            "required": false,
            "description": "Specify the UTC start date to filter logs within a specific date range. The format should be ISO 8601: `yyyy-MM-ddTHH:mm:ssZ`.",
            "format": "date-time",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "type": "string",
            "name": "eventEndDate",
            "in": "query",
            "required": false,
            "description": "Specify the UTC end date to filter logs within a specific date range. The format should be ISO 8601: `yyyy-MM-ddTHH:mm:ssZ`.",
            "format": "date-time",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of activity logs was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiGetAuditlogsPaginatedResponse"
            },
            "204": {
              "description": "Log is empty",
              "content": {}
            },
            "400": {
              "description": "Invalid log module",
              "content": {}
            },
            "401": {
              "description": "Access denied",
              "content": {}
            },
            "405": {
              "description": "Request type was not GET.",
              "content": {}
            }
          }
        }
      }
    },
    "/v2.0/settings/authentication/oauth": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get OAuth Settings",
        "description": "Get the current OAuth authentication settings.",
        "operationId": "get_oauth_settings",
        "responses": {
          "200": {
            "description": "OAuth settings have been successfully retrieved.",
            "schema": {
              "$ref": "#/definitions/GetOAuthResponse"
            }
          },
          "412": {
            "description": "OAuth settings not configured.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve OAuth settings.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Add OAuth Settings",
        "description": "Add the OAuth authentication settings.",
        "operationId": "add_oauth_settings",
        "parameters": [
          {
            "name" : "add oauth settings",
            "in" : "body",
            "schema": {
              "$ref": "#/definitions/AddOAuthRequestBody"
            },
            "required": true
          }  
        ],
        "responses": {
          "200": {
            "description": "OAuth settings have been added successfully.",
            "schema": {
              "$ref": "#/definitions/OAuthResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "412": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add OAuth settings.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Update OAuth Settings",
        "description": "Update the OAuth authentication settings.",
        "operationId": "update_oauth_settings",
        "parameters": [
          {
            "name" : "update oauth settings",
            "in" : "body",
            "schema": {
              "$ref": "#/definitions/UpdateOAuthRequestBody"
            },
            "required": true
          }  
        ],
        "responses": {
          "200": {
            "description": "OAuth settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/OAuthResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "412": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update OAuth settings.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/settings/authentication/openid": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get OpenId Settings",
        "description": "Get the current OpenId authentication settings.",
        "operationId": "get_openid_settings",
        "responses": {
          "200": {
            "description": "OpenId settings have been successfully retrieved.",
            "schema": {
              "$ref": "#/definitions/GetOpenIdResponse"
            }
          },
          "412": {
            "description": "OpenId settings not configured.",
            "content": {}
          },
          "417": {
            "description": "Falied to retrieve OpenId settings.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Add OpenId Settings",
        "description": "Add the OpenId authentication settings.",
        "operationId": "add_openid_settings",
        "parameters": [
          {
            "name" : "add openid settings",
            "in" : "body",
            "schema": {
              "$ref": "#/definitions/AddOpenIdRequestBody"
            },
            "required": true
          }  
        ],
        "responses": {
          "200": {
            "description": "OpenId settings have been added successfully.",
            "schema": {
              "$ref": "#/definitions/OpenIdResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "412": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add OpenId settings.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Update OpenId Settings",
        "description": "Update the OpenId authentication settings.",
        "operationId": "update_openid_settings",
        "parameters": [
          {
            "name" : "update openid settings",
            "in" : "body",
            "schema": {
              "$ref": "#/definitions/UpdateOpenIdRequestBody"
            },
            "required": true
          }  
        ],
        "responses": {
          "200": {
            "description": "OpenId settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/OpenIdResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "412": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update OpenId settings.",
            "content": {}
          }
        }
      }
    }
  },
  "definitions": {
    "Response": {
      "type": "object",
      "properties": {
        "token_type": {
          "type": "string",
          "description": "Type of token assigned by the authorization server."
        },
        "access_token": {
          "type": "string",
          "description": "Authentication token of the client."
        },
        "expires_in": {
          "type": "string",
          "description": "The lifetime in seconds of the access token."
        },
        "clientId": {
          "type": "string",
          "description": "Client ID of the internal app."
        },
        "TenantStatus": {
          "type": "string",
          "description": "Status of the client."
        },
        ".confidentiality_level": {
          "type": "string",
          "description": "Level of token confidentiality."
        },
        ".issued": {
          "type": "string",
          "description": "Authorization token issued date/time."
        },
        ".expires": {
          "type": "string",
          "description": "Authorization token expires on date/time."
        }
      },
      "x-typeName": "Response"
    },
    "ApiResponse": {
      "required": [
        "ApiStatus",
        "Status"
      ],
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "type": "object",
          "description": "Returns data from the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "TenantResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "description": "Response data.",
          "$ref": "#/definitions/TenantResponseData"
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "ArrayTenantResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data.",
          "items": {
            "$ref": "#/definitions/TenantResponseData"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "TenantResponseData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the tenant."
        },
        "tenant_name": {
          "type": "string",
          "description": "Name of the tenant."
        },
        "url": {
          "type": "string",
          "description": "URL of the tenant.."
        },
        "tenant_type": {
          "type": "string",
          "description": "Type of tenant."
        },
        "created_date": {
          "type": "string",
          "description": "Created date of the tenant."
        },
        "modified_date": {
          "type": "string",
          "description": "Modified date of the tenant."
        },
        "tenant_status": {
          "type": "string",
          "description": "Status of the tenant."
        },
        "use_site_identifier": {
          "type": "boolean",
          "description": "site identifier of the tenant."
        },
        "is_master": {
          "type": "boolean",
          "description": "master site of the tenant."
        }
      }
    },
    "Authentication": {
      "required": [
        "grant_type",
        "client_id",
        "client_secret"
      ],
      "properties": {
        "grant_type": {
          "type": "string",
          "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>client_credentials</code>",
          "nullable": false
        },
        "client_id": {
          "type": "string",
          "description": "Client ID of the internal app.",
          "nullable": false
        },
        "client_secret": {
          "type": "string",
          "description": "Client secret of the internal app..",
          "nullable": false
        }
      }
    },
    "Startup": {
      "type": "object",
      "description": "Startup Configuration object details.",
      "additionalProperties": false,
      "properties": {
        "ServerConfiguration": {
          "$ref": "#/definitions/ServerConfiguration"
        },
        "UmsConfiguration": {
          "$ref": "#/definitions/UmsConfiguration"
        },
        "DataStoreConfiguration": {
          "$ref": "#/definitions/DataStoreConfiguration"
        }
      }
    },
    "AddTenantV2": {
      "type": "object",
      "description": "Add tenant object details.",
      "additionalProperties": false,
      "required": [
        "Email"
      ],
      "properties": {
        "Email": {
          "type": "string",
          "description": "Email of the user."
        },
        "ServerConfiguration": {
          "$ref": "#/definitions/ServerConfiguration"
        },
        "DataStoreConfiguration": {
          "$ref": "#/definitions/DataStoreConfiguration"
        }
      }
    },
    "UpdateTenant": {
      "type": "object",
      "description": "Update tenant object.",
      "additionalProperties": false,
      "properties": {
        "Site": {
          "$ref": "#/definitions/SiteDetails"
        },
        "Database": {
          "$ref": "#/definitions/DatabaseInformation"
        }
      }
    },
    "SiteDetails": {
      "type": "object",
      "description": "Site information to be updated. ",
      "additionalProperties": false,
      "properties": {
        "SiteName": {
          "type": "string",
          "description": "Name of the site."
        },
        "SiteUrl": {
          "type": "string",
          "description": "URL of the site."
        },
        "SiteIdentifier": {
          "type": "string",
          "description": "Identifier of the site."
        }
      }
    },
    "DatabaseInformation": {
      "type": "object",
      "description": "Database information.",
      "additionalProperties": false,
      "required": [
        "ServerName",
        "DatabaseName",
        "UserName",
        "Password",
        "SslEnabled"
      ],
      "properties": {
        "ServerName": {
          "type": "string",
          "description": "Name of the database server."
        },
        "DatabaseName": {
          "type": "string",
          "description": "Name of the database."
        },
        "UserName": {
          "type": "string",
          "description": "Username of the database server.  <br /> <blockquote>Check the permission required for the database users [here](/faq/what-are-the-database-permissions-required-to-set-up-bold-bi-embedded/)</blockquote>"
        },
        "Password": {
          "type": "string",
          "description": "Password of the database user."
        },
        "MaintenanceDatabase": {
          "type": "string",
          "description": "Maintenance database of the database server.<br /> <blockquote>Required only for <code>PostgreSQL</code> database server.</blockquote>"
        },
        "Port": {
          "type": "string",
          "description": "Port number of the database server.<br /><blockquote>Required only for <code>PostgreSQL</code> and <code>MySQL</code> database servers.</blockquote>"
        },
        "SslEnabled": {
          "type": "boolean",
          "default": "false",
          "description": "Determines whether the encrypted connection to the database server is required. "
        },
        "AdditionalParameters": {
          "type": "string",
          "description": "Additional parameters for connecting to the database server."
        }
      }
    },
    "DataStoreConfiguration": {
      "type": "object",
      "description": "Data store configuration of the site <blockquote>required to create <code>BoldBIOnPremise</code> tenants only.</blockquote>",
      "additionalProperties": false,
      "required": [
        "ServerName",
        "DatabaseName",
        "UserName",
        "Password",
        "ServerType"
      ],
      "properties": {
        "ServerName": {
          "type": "string",
          "description": "Name of the database server."
        },
        "DatabaseName": {
          "type": "string",
          "description": "Name of the database."
        },
        "UserName": {
          "type": "string",
          "description": "Username of the database server.  <br /> <blockquote>Check the permission required for the database users [here](/faq/what-are-the-database-permissions-required-to-set-up-bold-bi-embedded/)</blockquote>"
        },
        "Password": {
          "type": "string",
          "description": "Password of the database user."
        },
        "IsNewDatabase": {
          "type": "boolean",
          "default": "false",
          "description": "Determines whether to create a new database or connect to an existing database specified by the <code>DatabaseName</code> parameter. "
        },
        "MaintenanceDatabase": {
          "type": "string",
          "description": "Maintenance database of the database server.<br /> <blockquote>Required only for <code>PostgreSQL</code> database server.</blockquote>"
        },
        "Port": {
          "type": "string",
          "description": "Port number of the database server.<br /><blockquote>Required only for <code>PostgreSQL</code> and <code>MySQL</code> database servers.</blockquote>"
        },
        "ServerType": {
          "description": "Database type of the server.",
          "$ref": "#/definitions/DatabaseType"
        },
        "SslEnabled": {
          "type": "boolean",
          "default": "false",
          "description": "Determines whether the encrypted connection to the database server is required. "
        },
        "AdditionalParameters": {
          "type": "string",
          "description": "Additional parameters for connecting to the database server."
        }
      }
    },
    "Database": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ServerName",
        "DatabaseName",
        "UserName",
        "Password",
        "ServerType"
      ],
      "properties": {
        "ServerName": {
          "type": "string",
          "description": "Name of the database server."
        },
        "DatabaseName": {
          "type": "string",
          "description": "Name of the database."
        },
        "UserName": {
          "type": "string",
          "description": "Username of the database server.  <br /> <blockquote>Check the permission required for the database users [here](/faq/what-are-the-database-permissions-required-to-set-up-bold-bi-embedded/)</blockquote>"
        },
        "Password": {
          "type": "string",
          "description": "Password of the database user."
        },
        "IsNewDatabase": {
          "type": "boolean",
          "default": "false",
          "description": "Determines whether to create a new database or connect to an existing database specified by the <code>DatabaseName</code> parameter."
        },
        "MaintenanceDatabase": {
          "type": "string",
          "description": "Maintenance database of the database server.<br /> <blockquote>Required only for <code>PostgreSQL</code> database server.</blockquote>"
        },
        "Port": {
          "type": "string",
          "description": "Port number of the database server.<br /><blockquote>Required only for <code>PostgreSQL</code> and <code>MySQL</code> database servers.</blockquote>"
        },
        "ServerType": {
          "description": "Database type of the server.",
          "$ref": "#/definitions/DatabaseType"
        },
        "SslEnabled": {
          "type": "boolean",
          "default": "false",
          "description": "Determines whether the encrypted connection to the database server is required. "
        },
        "AdditionalParameters": {
          "type": "string",
          "description": "Additional parameters for connecting to the database server."
        }
      }
    },
    "UmsConfiguration": {
      "type": "object",
      "description": "Site administration configuration data.",
      "additionalProperties": false,
      "required": [
        "Database",
        "Storage",
        "User",
        "Unlockkey"
      ],
      "properties": {
        "Database": {
          "$ref": "#/definitions/Database"
        },
        "Storage": {
          "$ref": "#/definitions/Storage"
        },
        "User": {
          "$ref": "#/definitions/User"
        },
        "Unlockkey": {
          "type": "string",
          "description": "Unlock key for the Bold BI/Reports application."
        }
      }
    },
    "ServerConfiguration": {
      "type": "object",
      "description": "Site configuration data.",
      "additionalProperties": false,
      "required": [
        "Database",
        "Storage",
        "Site"
      ],
      "properties": {
        "Database": {
          "$ref": "#/definitions/Database"
        },
        "Storage": {
          "$ref": "#/definitions/Storage"
        },
        "Site": {
          "$ref": "#/definitions/Site"
        }
      }
    },
    "Storage": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "StorageType"
      ],
      "properties": {
        "StorageType": {
          "description": "Storage type.",
          "$ref": "#/definitions/StorageType"
        },
        "AzureBlob": {
          "description": "Azure Blob data.",
          "$ref": "#/definitions/AzureBlob"
        }
      }
    },
    "StorageType": {
      "description": "0 - FileStorage, 1 - AzureBlob",
      "type": "enum",
      "enum": [
        0,
        1
      ],
      "x-enumNames": [
        "FileStorage",
        "AzureBlob"
      ]
    },
    "DatabaseType": {
      "description": "0 - MSSQL, 1 - MySQL, 4 - PostgreSQL",
      "type": "enum",
      "enum": [
        0,
        1,
        4
      ],
      "x-enumNames": [
        "MSSQL",
        "MySQL",
        "PostgreSQL"
      ]
    },
    "TenantType": {
      "description": "3 - BoldBIOnPremise, 4 - BoldReportsOnPremise",
      "type": "enum",
      "enum": [
        3,
        4
      ],
      "x-enumNames": [
        "BoldBIOnPremise",
        "BoldReportsOnPremise"
      ]
    },
    "AzureBlob": {
      "type": "object",
      "description": "Required only if the storage type is <code>AzureBlob</code>",
      "additionalProperties": false,
      "required": [
        "AzureBlobStorageContainerName",
        "AzureBlobStorageUri",
        "AccountName",
        "AccessKey"
      ],
      "properties": {
        "AzureBlobStorageContainerName": {
          "type": "string",
          "description": "Azure Blob storage container Name."
        },
        "AzureBlobStorageUri": {
          "type": "string",
          "description": "Azure Blob storage URI."
        },
        "ConnectionString": {
          "type": "string",
          "description": "Connection string of the blob."
        },
        "ConnectionType": {
          "type": "string",
          "description": "Connection type.<ul><li><code>http</code></li><li><code>https</code></li></ul>"
        },
        "AccountName": {
          "type": "string",
          "description": "Account name of the blob."
        },
        "AccessKey": {
          "type": "string",
          "description": "Access key of the blob"
        }
      }
    },
    "UpdateUser": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Email",
        "FirstName",
        "UserName",
        "LastName",
        "contact"
      ],
      "properties": {
        "Email": {
          "type": "string",
          "description": "Email address of the user."
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "UserName": {
          "type": "string",
          "description": "Username of the user."
        },
        "LastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "contact": {
          "type": "int",
          "description": "Contact of the user."
        }
      }
    },
    "ArrayUpdateUserResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data from the API.",
          "items": {
            "$ref": "#/definitions/UpdateUserResponse"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "UpdateUserResponse": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "Returns the user ID from the API."
        },
        "user_name": {
          "type": "string",
          "description": "Returns the username from the API."
        },
        "email": {
          "type": "string",
          "description": "Returns the email address of the user from the API."
        },
        "first_name": {
          "type": "string",
          "description": "Returns the first name of the user from the API."
        },
        "last_name": {
          "type": "string",
          "description": "Returns the last name of the user from the API."
        },
        "display_name": {
          "type": "string",
          "description": "Returns the display name of the user from the API."
        },
        "contact": {
          "type": "string",
          "description": "Returns the contact number of the user from the API."
        },
        "email_verified": {
          "type": "string",
          "description": "Returns whether the email is verified or not from the API."
        },
        "user_status": {
          "type": "string",
          "description": "Returns the status of the user from the API."
        },
        "directory_type": {
          "description": "Returns directory type response data from the API.",
          "$ref": "#/definitions/DirectoryType"
        }
      }
    },
    "AddUser": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Email",
        "FirstName",
        "UserName",
        "Password"
      ],
      "properties": {
        "Email": {
          "type": "string",
          "description": "Email address of the user. This value may be required based on the user accounts configuration. "
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "UserName": {
          "type": "string",
          "description": "Username of the user."
        },
        "LastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "Password": {
          "type": "string",
          "description": "The user's password. Depending on the activation mode, this field may not be required. For, Email activation mode password is not necessary. Automatic activation is password required. <br /><blockquote>Note: Password must meet the following requirements. It must contain,</blockquote><ul><li><code>At least 6 characters</code></li><li><code>1 uppercase character</code></li><li><code>1 lowercase character</code></li><li><code>1 numeric character</code></li><li><code>1 special character</code></li></ul> "
        },
        "AccountActivationMode": {
          "type": "enum",
          "default": null,
          "enum": [
            0,
            1
          ],
          "x-enumNames": [
            "AutomaticActivation",
            "EmailActivation"
          ],
          "description": "Specify the mode of account activation.\n\n* 0 - AutomaticActivation\n* 1 - EmailActivation"
        }
      }
    },
    "ValidateUserApiRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Email"
      ],
      "properties": {
        "Email": {
          "type": "string",
          "description": "Email address of the user."
        }
      }
    },
    "Site": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TenantName",
        "TenantIdentifier",
        "TenantType"
      ],
      "properties": {
        "TenantName": {
          "type": "string",
          "description": "Name of the site."
        },
        "TenantIdentifier": {
          "type": "string",
          "description": "Identifier of the site."
        },
        "UseSiteIdentifier": {
          "type": "boolean",
          "description": "Decides whether we need to use or ignore the site identifier. If the site identifier is ignored, unique domain should be used for each site."
        },
        "TenantType": {
          "description": "Tenant type of the site.",
          "$ref": "#/definitions/TenantType"
        },
        "UseCustomBranding": {
          "type": "boolean",
          "description": "Decides to use branding details from ID."
        },
        "CustomAttribute": {
          "type": "array",
          "description": "Custom site attributes.",
          "items": {
            "$ref": "#/definitions/CustomAttribute"
          }
        },
        "TenantIsolation": {
          "description": "Tenant isolation code.",
          "$ref": "#/definitions/TenantIsolation"
        }
      }
    },
    "GrantUser": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "UserName": {
          "type": "string",
          "description": "Username of the user."
        },
        "Email": {
          "type": "string",
          "description": "Email address of the user."
        },
        "user_id": {
          "type": "string",
          "description": "Id of the user."
        }
      }
    },
    "GrantUserApiResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data from the API.",
          "items": {
            "$ref": "#/definitions/GrantResponseData"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "GrantResponseData": {
      "type": "object",
      "properties": {
        "tenant": {
          "description": "Response data from the tenant..",
          "$ref": "#/definitions/TenantResponseData"
        },
        "user": {
          "description": "Response data from the user..",
          "$ref": "#/definitions/UserResponse"
        }
      }
    },
    "ApiUserDeleteResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data from the API.",
          "items": {
            "$ref": "#/definitions/UserDeleteResponse"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "UserDeleteResponse": {
      "type": "object",
      "properties": {
        "DatabaseDeleted": {
          "type": "string",
          "description": "DatabaseDeleted."
        },
        "IsSiteDeleted": {
          "type": "boolean",
          "description": "SiteDeleted."
        }
      }
    },
    "TenantIsolation": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "IsEnabled": {
          "type": "boolean",
          "description": "Enable or disable the Isolation Code."
        },
        "IsolationCode": {
          "type": "string",
          "description": "Isolation code."
        }
      }
    },
    "TenantIsolationResponse": {
      "type": "object",
      "description": "Tenant Isolation code response details.",
      "additionalProperties": false,
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "default": "false",
          "description": "Enable or disable the Isolation Code."
        },
        "isolation_code": {
          "type": "string",
          "description": "Isolation code."
        }
      }
    },
    "User": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Email",
        "FirstName",
        "UserName",
        "LastName",
        "Password"
      ],
      "properties": {
        "Email": {
          "type": "string",
          "description": "Email address of the user."
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "UserName": {
          "type": "string",
          "description": "Username."
        },
        "LastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "Password": {
          "type": "string",
          "description": "Password of the user. <br /><blockquote>Note: Password must meet the following requirements. It must contain,</blockquote><ul><li><code>At least 6 characters</code></li><li><code>1 uppercase character</code></li><li><code>1 lowercase character</code></li><li><code>1 numeric character</code></li><li><code>1 special character</code></li></ul>"
        }
      }
    },
    "UpdatePassword": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Password"
      ],
      "properties": {
        "Password": {
          "type": "string",
          "description": "Password to be updated for the user. <br /><blockquote>Note: Password must meet the following requirements. It must contain,</blockquote><ul><li><code>At least 6 characters</code></li><li><code>1 uppercase character</code></li><li><code>1 lowercase character</code></li><li><code>1 numeric character</code></li><li><code>1 special character</code></li></ul>"
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "Returns the user ID from the API."
        },
        "user_name": {
          "type": "string",
          "description": "Returns the username from the API."
        },
        "email": {
          "type": "string",
          "description": "Returns the email address of the user from the API."
        },
        "first_name": {
          "type": "string",
          "description": "Returns the first name of the user from the API."
        },
        "last_name": {
          "type": "string",
          "description": "Returns the last name of the user from the API."
        },
        "display_name": {
          "type": "string",
          "description": "Returns the display name of the user from the API."
        },
        "contact": {
          "type": "string",
          "description": "Returns the contact number of the user from the API."
        },
        "email_verified": {
          "type": "string",
          "description": "Returns whether the email is verified or not from the API."
        },
        "user_status": {
          "type": "string",
          "description": "Returns the status of the user from the API."
        },
        "directory_type": {
          "description": "Returns directory type response data from the API.",
          "$ref": "#/definitions/DirectoryType"
        }
      }
    },
    "GetUserResponse": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "Returns the user ID from the API."
        },
        "user_name": {
          "type": "string",
          "description": "Returns the username from the API."
        },
        "email": {
          "type": "string",
          "description": "Returns the email address of the user from the API."
        },
        "first_name": {
          "type": "string",
          "description": "Returns the first name of the user from the API."
        },
        "last_name": {
          "type": "string",
          "description": "Returns the last name of the user from the API."
        },
        "display_name": {
          "type": "string",
          "description": "Returns the display name of the user from the API."
        },
        "phone": {
          "type": "string",
          "description": "Returns the contact number of the user from the API."
        },
        "company": {
          "type": "string",
          "description": "Returns the company name of the user from the API."
        },
        "email_verified": {
          "type": "string",
          "description": "Returns whether the email is verified or not from the API."
        },
        "avatar_url": {
          "type": "string",
          "description": "Returns the profile url of the user from the API."
        },
        "created_at": {
          "type": "string",
          "description": "Returns the created date of the user from the API."
        },
        "modified_at": {
          "type": "string",
          "description": "Returns the modified date of the user from the API."
        },
        "user_status": {
          "type": "string",
          "description": "Returns the status of the user from the API."
        }
      }
    },
    "ValidateUserResponse": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "Returns the user ID from the API."
        }
      }
    },
    "DirectoryType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the directory type."
        },
        "name": {
          "type": "string",
          "description": "Name of the directory type."
        }
      }
    },
    "ArrayUserResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data from the API.",
          "items": {
            "$ref": "#/definitions/UserResponse"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "ApiGetUserResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data from the API..",
          "items": {
            "$ref": "#/definitions/GetUserResponse"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
       "IPWhitelistingResponse": {
      "required": [
          "IsEnabled",
          "IPWhitelistingRules"
      ],
      "type": "object",
      "properties": {
          "IsEnabled": {
              "type": "boolean",
              "description":  "Specify true to enable the IP whitelisting settings."
          },
          "IPWhitelistingRules":{
              "type": "array",
              "description": "Specified IP whitelisting rules allows access to the application.",
              "items": {
                  "$ref": "#/definitions/IPWhitelistingRulesResponse"
              }
          }
      }
  },
    "ApiIPWhitelistingSettings":{
        "type": "object",
        "properties":{
            "ApiStatus": {
                "type": "boolean",
                "description": "Returns the status of the API."
            },
            "Data": {
                "type": "array",
                "description": "Returns data from the API.",
                "items": {
                    "$ref": "#/definitions/IPWhitelistingResponse"
                }
            },
            "StatusMessage": {
                "type": "string",
                "description": "Returns the status message from the API."
            }
        }
    },
    "IPWhitelistingRulesResponse":{
      "required": [
          "RuleName",
          "IPAddress",
          "IPAddressType"
      ],
      "type":"object",
      "properties":{
          "RuleName":{
              "type": "string",
              "description": "Specify rule name."
          },
          "IPAddress":{
              "type": "string",
              "description": "Specify IP address value."
          },
          "IPAddressType":{
              "type": "string",
              "description": "Specify IP address type."
          }
      }
  },
    "ApiValidateUserResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data from the API..",
          "items": {
            "$ref": "#/definitions/ValidateUserResponse"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "CustomAttribute": {
      "type": "object",
      "required": [
        "Name",
        "Value",
        "Description",
        "CanEncrypt"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name of the site attribute."
        },
        "Value": {
          "type": "string",
          "description": "Value for the site attribute."
        },
        "Description": {
          "type": "string",
          "description": "Description of the attribute."
        },
        "CanEncrypt": {
          "type": "boolean",
          "description": "Decides to encrypt the site attribute data."
        }
      }
    },
    "UpdateBrandings": {
      "type": "object",
      "description": "Update branding object.",
      "additionalProperties": false,
      "properties": {
        "Header": {
          "$ref": "#/definitions/BrandingDetails"
        },
        "Login": {
          "$ref": "#/definitions/BrandingDetails"
        },
        "Favicon": {
          "$ref": "#/definitions/BrandingDetails"
        },
        "Email": {
          "$ref": "#/definitions/BrandingDetails"
        },
        "PoweredBy": {
          "$ref": "#/definitions/BrandingDetails"
        }
      }
    },
    "BrandingDetails": {
      "description": "branding logos information to update. ",
      "additionalProperties": false,
      "properties": {
        "LogoBytes": {
          "type": "string",
          "description": "Logo bytes of the image."
        },
        "LogoType": {
          "type": "string",
          "description": "Logo type of branding logos."
        }
      }
    },
    "UpdateBrandingsResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "EmbedConfigurationResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data from the API.",
          "items": {
          "$ref": "#/definitions/EmbedSettingsResponse"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "RegenerateEmbedSecret": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data from the API.",
          "items": {
          "$ref": "#/definitions/RegenerateEmbedSecretResponse"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "UpdateEmbedSettings": {
      "type": "object",
      "description": "Update Embed settings.",
      "additionalProperties": false,
      "properties": {
        "IsEmbedEnabled": {
          "type": "boolean",
          "description": "Enable or disable the embed settings."
        },
        "EmbedConfigurations": {
          "description": "Embed configuration details.",
          "$ref": "#/definitions/EmbedConfiguration"
        }
      }
    },
    "RegenerateEmbedSecretResponse": {
      "type": "object",
      "properties": {
        "reset_secret_code": {
          "type": "string",
          "description": "Returns the generated secrrt key from the API."
        },
        "is_enabled": {
          "type": "boolean",
          "description": "Enable or disable the embed settings."
        }
      }
    },
    "EmbedSettingsResponse": {
      "type": "object",
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Enable or disable the embed settings."
        },
        "config_data": {
          "description": "Returns the embed settings data from the API.",
          "$ref": "#/definitions/ConfigData"
        },
        "secret_key": {
          "type": "string",
          "description": "Returns the embed secret key from the API."
        }
      }
    },
    "EmbedConfiguration": {
      "type": "object",
      "description": "Embed setting details to update.",
      "properties": {
        "IsConfigurationBaseEmbed": {
          "type": "boolean",
          "description": "Returns the configuration based embed value from the API."
        },
        "EmbeddingProfile": {
          "type": "array",
          "description": "Returns embed profile data from the API.",
          "items": {
            "$ref": "#/definitions/EmbedProfile"
          }
        },
        "UsersProfile": {
          "type": "array",
          "description": "Returns user profile data from the API.",
          "items": {
            "$ref": "#/definitions/UserProfile"
          }
        },
        "GroupsProfile": {
          "type": "array",
          "description": "Returns group profile data from the API.",
          "items": {
            "$ref": "#/definitions/GroupProfile"
          }
        },
        "SitesProfile": {
          "type": "array",
          "description": "Returns sites profile data from the API.",
          "items": {
            "$ref": "#/definitions/SiteProfile"
          }
        }
      }
    },
    "ConfigData": {
      "type": "object",
      "properties": {
        "is_configuration_base_embed": {
          "type": "boolean",
          "description": "Returns the configuration based embed from API."
        },
        "use_global_embed_secrete": {
          "type": "boolean",
          "description": "Returns the use global embed secrete from API."
        },
        "embedding_profile": {
          "type": "array",
          "description": "Returns embed profile data from the API.",
          "items": {
            "$ref": "#/definitions/EmbedProfile"
          }
        },
        "users_profile": {
          "type": "array",
          "description": "Returns user profile data from the API.",
          "items": {
            "$ref": "#/definitions/UserProfile"
          }
        },
        "groups_profile": {
          "type": "array",
          "description": "Returns group profile data from the API.",
          "items": {
            "$ref": "#/definitions/GroupProfile"
          }
        },
        "sites_profile": {
          "type": "array",
          "description": "Returns sites profile data from the API.",
          "items": {
            "$ref": "#/definitions/SiteProfile"
          }
        },
        "embed_secret": {
          "type": "string",
          "description": "Returns the embed secret code."
        }
      }
    },
    "EmbedProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Returns embed profile name from the API."
        },
        "isolation": {
          "description": "Returns embed profile isolation key from the API.",
          "$ref": "#/definitions/EmbedSettingsKey"
        },
        "attributes": {
          "description": "Returns embed profile attributes from the API.",
          "$ref": "#/definitions/EmbedSettingsKey"
        }
      }
    },
    "UserProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Returns user profile name from the API."
        },
        "profile": {
          "type": "string",
          "description": "Returns user profile from the API."
        }
      }
    },
    "GroupProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Returns group profile name from the API."
        },
        "profile": {
          "type": "string",
          "description": "Returns group profile from the API."
        }
      }
    },
    "SiteProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Returns sites profile name from the API."
        },
        "profile": {
          "type": "string",
          "description": "Returns site profile from the API."
        },
        "isIsolationCodeEnabled": {
          "type": "boolean",
          "description": "Enable or disable the isolation code."
        }
      }
    },
    "EmbedSettingsKey": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Returns key from the API."
        }
      }
    },
    "ApiGetAuditlogsPaginatedResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data from the API..",
          "items": {
            "$ref": "#/definitions/ApiGetAuditLog"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "ApiGetAuditLog": {
      "type": "object",
      "properties": {
        "target_user_name": {
          "type": "string",
          "description": "The username of the individual targeted by the event in the activity log."
        },
        "target_display_name": {
          "type": "string",
          "description": "The display name of the individual targeted by the event in the activity log."
        },
        "initiated_user_name": {
          "type": "string",
          "description": "The username of the individual who initiated the event recorded in the activity log."
        },
        "initiated_display_name": {
          "type": "string",
          "description": "The display name of the individual who initiated the event recorded in the activity log."
        },
        "event-date-format": {
          "type": "string",
          "description": "The formatted string representing the date and time when the event was recorded in the activity log."
        },
        "initiated_user_email": {
          "type": "string",
          "description": "The email address of the user who initiated the event recorded in the activity log."
        },
        "target_user_email": {
          "type": "string",
          "description": "The email address of the individual targeted by the event in the activity log."
        },
        "event_date": {
          "type": "string",
          "description": "The date and time when the event was recorded in the activity log."
        },
        "event_category": {
          "type": "integer",
          "description": "The numerical identifier representing the category of the event recorded in the activity log."
        },
        "event_type": {
          "type": "integer",
          "description": "The numerical identifier representing the specific type of event recorded in the activity log."
        },
        "app_source": {
          "type": "string",
          "description": "The source application from which the event was generated in the activity log."
        },
        "app_type": {
          "type": "string",
          "description": "The type of application (e.g., API, Web) from which the event was generated in the activity log."
        },
        "Site": {
          "type": "string",
          "description": "The tenant name from which the event was generated in the activity log."
        },
        "event_category_string": {
          "type": "string",
          "description": "The string representation of the event category in the activity log."
        },
        "event_type_string": {
          "type": "string",
          "description": "The string representation of the event type in the activity log."
        },
        "user_log_details": {
          "type": "object",
          "description": "Details about the user activity that was logged, including the IP address and user agent.",
          "items": {
            "$ref": "#/definitions/user_log_details"
          }
        },
        "Summary": {
          "type": "string",
          "description": "A brief summary or description of the activity recorded in the log."
        }
      }
    },
    "user_log_details": {
      "type": "object",
      "properties": {
        "ip_address": {
          "type": "string",
          "description": "The IP address from which the activity was logged."
        },
        "change_log": {
          "type": "object",
          "description": "Details of the event associated with the logged activity, including any changes made.",
          "items": {
            "$ref": "#/definitions/change_log"
          }
        },
        "user_agent": {
          "type": "string",
          "description": "The user agent string that identifies the device and browser used during the logged activity."
        }
      }
    },
    "change_log": {
      "type": "object",
      "properties": {
        "ChangeLogCollection": {
          "type": "array",
          "description": "A collection of change logs that detail the specific changes made during the logged event.",
          "items": {
            "$ref": "#/definitions/ChangeLogCollection"
          }
        }
      }
    },
    "ChangeLogCollection": {
      "type": "object",
      "properties": {
        "ChangedItem": {
          "type": "string",
          "description": "The name of the item that was changed during the logged event."
        },
        "ChangeLog": {
          "type": "array",
          "description": "A list of specific changes that were made to the `ChangedItem` during the logged event.",
          "items": {
            "$ref": "#/definitions/ChangeLog"
          }
        }
      }
    },
    "ChangeLog": {
      "type": "object",
      "properties": {
        "ChangedItem": {
          "type": "string",
          "description": "The specific item that was altered during the logged event."
        },
        "From": {
          "type": "string",
          "description": "The original value of the item before the change was made."
        },
        "To": {
          "type": "string",
          "description": "The new value of the item after the change was made."
        }
      }
    },
    "GetOAuthResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data from the API.",
          "items": {
            "$ref": "#/definitions/OAuthSettings"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      }
    },
    "OAuthSettings": {
      "type": "object",
      "properties": {
        "ProviderName": {
          "type": "string",
          "description": "Indicates the authentication provider name."
        },
        "Logo": {
          "type": "string",
          "description": "Image name with file format."
        },
        "AuthorizationEndPoint": {
          "type": "string",
          "description": "Authorization endpoint URL."
        },
        "TokenEndPoint": {
          "type": "string",
          "description": "Token endpoint URL."
        },
        "TokenEndPointMethod": {
          "type": "string",
          "description": "Method of the endpoint."
        },
        "UserInfoEndPoint": {
          "type": "string",
          "description": "User info endpoint URL."
        },
        "UserInfoEndPointMethod": {
          "type": "string",
          "description": "Method of the user info endpoint."
        },
        "ClientId": {
          "type": "string",
          "description": "OAuth authentication client id."
        },
        "ClientSecret": {
          "type": "string",
          "description": "OAuth authentication client secret."
        },
        "Scopes": {
          "type": "string",
          "description": "Scopes of the settings."
        },
        "UserInfoEmail": {
          "type": "string",
          "description": "User email address."
        },
        "UserInfoFirstname": {
          "type": "string",
          "description": "User first name."
        },
        "UserInfoLastname": {
          "type": "string",
          "description": "User last name."
        },
        "LogoutEndPoint": {
          "type": "string",
          "description": "Logout endpoint URL."
        },
        "GroupImportSettings": {
          "type": "array",
          "description": "Group import settings.",
          "items": {
            "$ref": "#/definitions/GroupImportSettings"
          }
        },
        "CanCreateAccount": {
          "type": "boolean",
          "description": "Data of user can create account or not."
        }
      }
    },
    "GroupImportSettings": {
      "type": "object",
      "properties": {
        "KnownProviderType": {
          "description": "Provider type of the authentication.",
          "$ref": "#/definitions/KnownProviderType"
        },
        "Cognito": {
          "type": "array",
          "description": "CognitoAWS settings.",
          "items": {
            "$ref": "#/definitions/CognitoSettings"
          }
        },
        "Auth0": {
          "type": "array",
          "description": "Auth0 settings.",
          "items": {
            "$ref": "#/definitions/Auth0Settings"
          }
        },
        "Okta": {
          "type": "array",
          "description": "Okta settings.",
          "items": {
            "$ref": "#/definitions/OktaSettings"
          }
        },
        "OneLogin": {
          "type": "array",
          "description": "One login settings.",
          "items": {
            "$ref": "#/definitions/OneLoginSettings"
          }
        }
      }
    },
    "KnownProviderType": {
      "description": "0 - None, 1 - CognitoAWS, 2 - Auth0, 3 - Okta, 4 - OneLogin",
      "type": "enum",
      "enum": [
        0,
        1,
        2,
        3,
        4
      ],
      "x-enumNames": [
        "None",
        "CognitoAWS",
        "Auth0",
        "Okta",
        "OneLogin"
      ]
    },
    "CognitoSettings": {
      "type": "object",
      "properties": {
        "UserPoolId": {
          "type": "string",
          "description": "User id of cognito."
        },
        "AwsAccesskeyId": {
          "type": "string",
          "description": "Aws access key id."
        },
        "AwsAccesskeySecret": {
          "type": "string",
          "description": "Aws access key secret."
        },
        "Region": {
          "type": "string",
          "description": "Aws region value."
        }
      }
    },
    "Auth0Settings": {
      "type": "object",
      "properties": {
        "Audience": {
          "type": "string",
          "description": "Audience value for auth0 settings."
        },
        "ExtensionURL": {
          "type": "string",
          "description": "Extension URL for auth0 settings."
        }
      }
    },
    "OktaSettings": {
      "type": "object",
      "properties": {
        "ApiToken": {
          "type": "string",
          "description": "Api token of okta settings."
        }
      }
    },
    "OneLoginSettings": {
      "type": "object",
      "properties": {
        "ApiClientId": {
          "type": "string",
          "description": "Api client id for one login settings."
        },
        "ApiClientSecret": {
          "type": "string",
          "description": "Api client secret for one login settings."
        },
        "Region": {
          "type": "string",
          "description": "Region value for one login settings."
        }
      }
    },
    "AddOAuthRequestBody": {
      "required": [
        "LogoBytes",
        "OAuthAuthSettings"
      ],
      "type": "object",
      "properties": {
        "EnableAuthentication": {
          "type": "string",
          "description": "Set true or false to enable or disable settings."
        },
        "LogoBytes": {
          "type": "string",
          "description": "Provide image in bytes format."
        },
        "OAuthAuthSettings": {
          "type": "array",
          "description": "Auth settings details.",
          "items": {
            "$ref": "#/definitions/AddOAuthSettings"
          }
        }
      }
    },
    "UpdateOAuthRequestBody": {
      "type": "object",
      "properties": {
        "EnableAuthentication": {
          "type": "string",
          "description": "Set true or false to enable or disable settings."
        },
        "LogoBytes": {
          "type": "string",
          "description": "Provide image in bytes format."
        },
        "OAuthAuthSettings": {
          "type": "array",
          "description": "Auth settings details.",
          "items": {
            "$ref": "#/definitions/UpdateOAuthSettings"
          }
        }
      }
    },
    "AddOAuthSettings": {
      "required": [
        "ProviderName",
        "AuthorizationEndPoint",
        "TokenEndPoint",
        "TokenEndPointMethod",
        "UserInfoEndPoint",
        "UserInfoEndPointMethod",
        "ClientId",
        "ClientSecret",
        "Scopes",
        "UserInfoEmail"
      ],
      "type": "object",
      "properties": {
        "ProviderName": {
          "type": "string",
          "description": "Indicates the authentication provider name."
        },
        "AuthorizationEndPoint": {
          "type": "string",
          "description": "Authorization endpoint URL."
        },
        "TokenEndPoint": {
          "type": "string",
          "description": "Token endpoint URL."
        },
        "TokenEndPointMethod": {
          "type": "string",
          "description": "Method of the endpoint POST or GET."
        },
        "UserInfoEndPoint": {
          "type": "string",
          "description": "User info endpoint URL."
        },
        "UserInfoEndPointMethod": {
          "type": "string",
          "description": "Method of the user info endpoint POST or GET."
        },
        "ClientId": {
          "type": "string",
          "description": "OAuth authentication client id."
        },
        "ClientSecret": {
          "type": "string",
          "description": "OAuth authentication client secret."
        },
        "Scopes": {
          "type": "string",
          "description": "Scopes of the settings."
        },
        "UserInfoEmail": {
          "type": "string",
          "description": "email."
        },
        "UserInfoFirstname": {
          "type": "string",
          "description": "User first name."
        },
        "UserInfoLastname": {
          "type": "string",
          "description": "User last name."
        },
        "LogoutEndPoint": {
          "type": "string",
          "description": "Logout endpoint URL."
        },
        "GroupImportSettings": {
          "type": "array",
          "description": "Group import settings.",
          "items": {
            "$ref": "#/definitions/GroupImportSettings"
          }
        },
        "EnableCanCreateAccount": {
          "type": "string",
          "description": "provide true or false to enable or disable can create account"
        }
      }
    },
    "UpdateOAuthSettings": {
      "type": "object",
      "properties": {
        "ProviderName": {
          "type": "string",
          "description": "Indicates the authentication provider name."
        },
        "AuthorizationEndPoint": {
          "type": "string",
          "description": "Authorization endpoint URL."
        },
        "TokenEndPoint": {
          "type": "string",
          "description": "Token endpoint URL."
        },
        "TokenEndPointMethod": {
          "type": "string",
          "description": "Method of the endpoint POST or GET."
        },
        "UserInfoEndPoint": {
          "type": "string",
          "description": "User info endpoint URL."
        },
        "UserInfoEndPointMethod": {
          "type": "string",
          "description": "Method of the user info endpoint POST or GET."
        },
        "ClientId": {
          "type": "string",
          "description": "OAuth authentication client id."
        },
        "ClientSecret": {
          "type": "string",
          "description": "OAuth authentication client secret."
        },
        "Scopes": {
          "type": "string",
          "description": "Scopes of the settings."
        },
        "UserInfoEmail": {
          "type": "string",
          "description": "email."
        },
        "UserInfoFirstname": {
          "type": "string",
          "description": "User first name."
        },
        "UserInfoLastname": {
          "type": "string",
          "description": "User last name."
        },
        "LogoutEndPoint": {
          "type": "string",
          "description": "Logout endpoint URL."
        },
        "GroupImportSettings": {
          "type": "array",
          "description": "Group import settings.",
          "items": {
            "$ref": "#/definitions/GroupImportSettings"
          }
        },
        "EnableCanCreateAccount": {
          "type": "string",
          "description": "provide true or false to enable or disable can create account"
        }
      }
    },
    "OAuthResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "GetOpenIdResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Data": {
          "type": "array",
          "description": "Response data from the API.",
          "items": {
            "$ref": "#/definitions/OpenIdSettings"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      }
    },
    "OpenIdSettings": {
      "type": "object",
      "properties": {
        "ProviderName": {
          "type": "string",
          "description": "Indicates the authentication provider name."
        },
        "Logo": {
          "type": "string",
          "description": "Image name with file format."
        },
        "Authority": {
          "type": "string",
          "description": "Authority endpoint URL."
        },
        "ClientId": {
          "type": "string",
          "description": "Openid authentication client id."
        },
        "ClientSecret": {
          "type": "string",
          "description": "Openid authentication client secret."
        },
        "Identifier": {
          "type": "string",
          "description": "Identifier of authentication."
        },
        "ResponseType": {
          "type": "string",
          "description": "Provide the response type value."
        },
        "LogoutURL": {
          "type": "string",
          "description": "Logout endpoint URL."
        },
        "GroupImportSettings": {
          "type": "array",
          "description": "Group import settings.",
          "items": {
            "$ref": "#/definitions/GroupImportSettings"
          }
        },
        "CanCreateAccount": {
          "type": "boolean",
          "description": "Data of user can create account or not."
        }
      }
    },
    "AddOpenIdRequestBody": {
      "required": [
        "LogoBytes",
        "OIDCAuthSettings"
      ],
      "type": "object",
      "properties": {
        "EnableAuthentication": {
          "type": "string",
          "description": "Set true or false to enable or disable settings."
        },
        "LogoBytes": {
          "type": "string",
          "description": "Provide image in bytes format."
        },
        "OIDCAuthSettings": {
          "type": "array",
          "description": "Auth settings details.",
          "items": {
            "$ref": "#/definitions/AddOpenIdSettings"
          }
        }
      }
    },
    "UpdateOpenIdRequestBody": {
      "type": "object",
      "properties": {
        "EnableAuthentication": {
          "type": "string",
          "description": "Set true or false to enable or disable settings."
        },
        "LogoBytes": {
          "type": "string",
          "description": "Provide image in bytes format."
        },
        "OIDCAuthSettings": {
          "type": "array",
          "description": "Auth settings details.",
          "items": {
            "$ref": "#/definitions/UpdateOpenIdSettings"
          }
        }
      }
    },
    "AddOpenIdSettings": {
      "required": [
        "ProviderName",
        "Authority",
        "ClientId",
        "ClientSecret",
        "Identifier"
      ],
      "type": "object",
      "properties": {
        "ProviderName": {
          "type": "string",
          "description": "Indicates the authentication provider name."
        },
        "Authority": {
          "type": "string",
          "description": "Authority endpoint URL."
        },
        "ClientId": {
          "type": "string",
          "description": "Openid authentication client id."
        },
        "ClientSecret": {
          "type": "string",
          "description": "Openid authentication client secret."
        },
        "Identifier": {
          "type": "string",
          "description": "email."
        },
        "ResponseType": {
          "type": "string",
          "description": "Provide the response type value 'id_token' or 'code'."
        },
        "LogoutURL": {
          "type": "string",
          "description": "Logout endpoint URL."
        },
        "GroupImportSettings": {
          "type": "array",
          "description": "Group import settings.",
          "items": {
            "$ref": "#/definitions/GroupImportSettings"
          }
        },
        "EnableCanCreateAccount": {
          "type": "string",
          "description": "provide true or false to enable or disable can create account"
        }
      }
    },
    "UpdateOpenIdSettings": {
      "type": "object",
      "properties": {
        "ProviderName": {
          "type": "string",
          "description": "Indicates the authentication provider name."
        },
        "Authority": {
          "type": "string",
          "description": "Authority endpoint URL."
        },
        "ClientId": {
          "type": "string",
          "description": "Openid authentication client id."
        },
        "ClientSecret": {
          "type": "string",
          "description": "Openid authentication client secret."
        },
        "Identifier": {
          "type": "string",
          "description": "email."
        },
        "ResponseType": {
          "type": "string",
          "description": "Provide the response type value 'id_token' or 'code'."
        },
        "LogoutURL": {
          "type": "string",
          "description": "Logout endpoint URL."
        },
        "GroupImportSettings": {
          "type": "array",
          "description": "Group import settings.",
          "items": {
            "$ref": "#/definitions/GroupImportSettings"
          }
        },
        "EnableCanCreateAccount": {
          "type": "string",
          "description": "provide true or false to enable or disable can create account"
        }
      }
    },
    "OpenIdResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status from the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    }
  },
  "parameters": {},
  "responses": {}
}