{
  "openapi": "3.0.1",
  "info": {
    "title": "API Reference",
	"description": {
      "$ref": "./../../../../server-api-reference/common/site-administration/api-reference/introduction2.0.md"
    },
    "version": "2.0"
  },
  "servers": [
    {
      "url": "https://{yourdomain}/api"
    }
  ],
  "security": [
    {
      "Bearer <Token>": []
    }
  ],
  "tags": [
     {
      "name": "Authentication",
	  "description": {
        "$ref": "./../../../../server-api-reference/common/site-administration/api-reference/helperswagger.json#/authentication/getauthenticationdescription"
      }
    },
    {
      "name": "Application Startup",
	  "description": {
        "$ref": "./../../../../server-api-reference/common/site-administration/api-reference/helperswagger.json#/startup/getstartupdescription"
      }
    },
    {
      "name": "Tenants",
	  "description": "Creating, listing, viewing, and deleting tenants for Bold BI/Bold Reports using an API can be a powerful and efficient way to manage and organize your data. The request body should be in JSON format, and you can provide the tenant information in JSON format. Include the necessary headers for the API request, such as the Content-Type and Accept headers. To create, view, update, delete, and list the Bold BI/Bold Reports tenants, use the following corresponding endpoints."
    },
    {
      "name": "Users",
	  "description": {
        "$ref": "./../../../../server-api-reference/common/site-administration/api-reference/helperswagger.json#/users/getusersdescription"
      }
    }
  ],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate Client",
		"description" : "To call the token API, you will need to make a POST request to the API endpoint, typically in the format of `https://your-domain/api/token`. \n You will need to include the following parameters in the body of the request:\n\n - grant_type: client_credentials \n\n - client_id: your client ID \n\n - client_secret: your client secret\n\n You will also need to include the appropriate headers for the API, such as\n\n Content-Type: `application/x-www-form-urlencoded`.",
        "operationId": "client_authentication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Authentication"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrived access token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            },
            "x-nullable": true
          },
          "400": {
            "description": "Only grant_type=client_credentials requests are accepted by this server."
          },
          "401": {
            "description": "Invalid client_id or client_secret"
          },
          "405": {
            "description": "Request type was not POST"
          }
        }
      }
    },
    "/v2.0/startup": {
      "post": {
        "tags": [
          "Application Startup"
        ],
        "summary": "Application Startup",
        "description": "Configure the Bold BI or Bold Reports application using the REST API.",
        "operationId": "application_startup",
        "requestBody": {
          "description": "configuration request data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Startup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tenant added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add tenant.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startup"
      }
    },
    "/v2.0/tenants": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create New Tenant",
        "description": "Create a new Bold BI / Bold Reports tenant.",
        "operationId": "create_tenant",
        "requestBody": {
          "description": "Add tenant request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTenantV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tenant added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add tenant.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/tenant/{tenantId}/isolation-code": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Add Isolation Code",
        "description": "Isolation code support is available for Bold BI tenants alone.",
        "operationId": "add_isolation_code",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Add isolation-code request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantIsolation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tenant isolation code added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantIsolationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add tenant.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/tenants/{tenantid}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "View Tenant",
        "description": "View the details of the Bold BI / Bold Reports tenant.",
        "operationId": "view_tenant",
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "operation is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
         "404": {
            "description": "Tenant details not found.",
            "content": {}
          },
          "417": {
            "description": "Failed to get tenant Information.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startup"
      }
    },
    "/v2.0/tenants/{id}": {
      "put": {
        "tags": [
          "Tenants"
        ],
        "summary": "Update Tenant",
        "description": "Update the site or database information for the Bold BI or Bold Reports tenant.",
        "operationId": "update_tenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Update tenant request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tenant details updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update tenant.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startup"
      }
    },
    "/v2.0/tenants/{tenant_id}": {
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "Delete Tenant",
        "description": "Delete the  Bold BI / Bold Reports tenant",
        "operationId": "delete_tenant",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site has been deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Tenant id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Tenant details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/tenants ": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "List Tenants",
        "description": "List all the Bold BI and Bold Reports tenants available in the application. <br /><code>/v2.0/tenants</code> returns the first 25 tenants by default.<br /><blockquote style='display: inline;'>Note:</blockquote>By default, this API endpoint returns a list of 25 tenants. You can get more records (up to 100 records at a time) by using the <code>page</code> and <code>page_size</code> URI parameters. For example, refer to the following URLs:<br /><ul><li><code>/v2.0/tenants?page_size=30</code> returns the first 30 tenants.</li><li><code>/v2.0/tenants?page=2&page_size=30</code> returns the second group of 30 tenants.</li></ul><br /><blockquote>URI Parameters</blockquote><ul><li><code>page_size</code> the number of tenants to be returned per page.</li><li><code>page</code> the page number.</li></ul>",
        "operationId": "list_tenant",
		"parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Specify the page number.",
            "required": false,
            "style": "simple",
            "explode": false,
			"schema": {
              "type": "string",
              "format": "int32",
              "nullable": false
			}
          },
          {
            "name": "page_size",
            "in": "path",
            "description": "Specify the number of tenants per page.",
            "required": false,
            "style": "simple",
            "explode": false,
			"schema": {
              "type": "string",
              "format": "int32",
              "nullable": false
			}
          }
        ],
        "responses": {
          "200": {
            "description": "Operation success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayTenantResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to get list of tenants.",
            "content": {}
          }
        }
      }
    },
	"/v2.0/tenant/{tenant_id}/grant-access": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Grant User Access to Tenant ",
        "description": "Grant user access to the given tenant. ",
        "operationId": "grant_user_access",
		"parameters": [
		{
            "name": "tenant_id",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
			"schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
			}
          }
		  ],
           "requestBody": {
		   "description": "Grant user access request body.",
            "required": true,
			"content": {
              "application/json": {
              "schema": {
              "$ref": "#/components/schemas/GrantUser"
                }
			  }
			},
            "x-nullable": true
          },
        "responses": {
          "200": {
            "description": "Granted site access to the user successfully.",
			 "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantUserApiResponse"
                }
			  }
			 }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to Grant user access for tenant.",
            "content": {}
          }
        }
      }
    },
	"/v2.0/tenant/{tenant_id}/remove-access": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Remove User Access from Tenant ",
        "description": "Remove user access from the given tenant.",
        "operationId": "remove_user_access",
		"parameters": [
		{
            "name": "tenant_id",
            "in": "path",
            "description": "ID of the tenant.",
            "required": true,
            "style": "simple",
            "explode": false,
			"schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
			}
          }
		  ],
           "requestBody": {
            "required": true,
			"content": {
              "application/json": {
              "schema": {
              "$ref": "#/components/schemas/GrantUser"
                }
			  }
			},
            "x-nullable": true
          },
        "responses": {
          "204": {
            "description": "No Content.",
            "content": {}
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
		  "412": {
            "description": "Tenant id is invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "404": {
            "description": "Tenant is deleted.",
            "content": {}
          },
          "417": {
            "description": "Failed to remove user access from tenant.",
            "content": {}
          }
        }
      }
    },
	"/v2.0/user/add": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add User ",
        "description": "Add new user account in UMS.",
        "operationId": "add_user",
        "requestBody": {
          "description": "Add User request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User has been added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add user.",
            "content": {}
          }
        }
      }
    },
	"/v2.0/user/{userId}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "Update the user details.",
        "operationId": "update_user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Update user request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayUpdateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to while update user.",
            "content": {}
          }
        }
      }
    },
	"/v2.0/user/{user_Id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "View User ",
        "description": "View specific user details.",
        "operationId": "view_user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get user information successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to while get user information.",
            "content": {}
          }
        }
      }
    },
	"/v2.0/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List All Users",
        "description": "List all the active users.<br /><blockquote>URI Parameters</blockquote><ul><li><code>/v2.0/users</code> returns the first 25 users by default.</li><li><code>/v2.0/users?page_size=30</code> returns the first 30 users.</li><li><code>/v2.0/users?page=2&page_size=30</code> returns the 2nd group of 30 users.</li></ul>",
        "operationId": "get_user_list",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Specify the page number.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "int32",
              "nullable": false
            }
          },
          {
            "name": "page_size",
            "in": "path",
            "description": "Specify the number of users per page.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Listed users successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to list the users.",
            "content": {}
          }
        }
      }
    },
	"/v2.0/users/{userId}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update Password",
        "description": "Update user password.",
        "operationId": "update_user_password",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Update user password request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password has been changed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to while update user password.",
            "content": {}
          }
        }
      }
    },
	"/v2.0/user/{Id}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "Delete the user account.",
        "operationId": "delete_user",
       "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content.",
            "content": {}
          },
          "406 ": {
            "description": "User id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/administration/branding/logos": {
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Update Branding logos ",
        "description": "Add new images to branding logos",
        "operationId": "update_branding_logos",
        "requestBody": {
          "description": "Update branding images request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBrandings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Branding images have been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBrandingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update branding images.",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Response": {
        "type": "object",
        "properties": {
          "token_type": {
            "type": "string",
            "description": "Type of token assigned by the authorization server."
          },
          "access_token": {
            "type": "string",
            "description": "Authentication token of the client."
          },
          "expires_in": {
            "type": "string",
            "description": "The lifetime in seconds of the access token."
          },
          "clientId": {
            "type": "string",
            "description": "Client ID of the internal app."
          },
          "TenantStatus": {
            "type": "string",
            "description": "Status of the client."
          },
          ".confidentiality_level": {
            "type": "string",
            "description": "Level of token confidentiality."
          },
          ".issued": {
            "type": "string",
            "description": "Authorization token issued date/time."
          },
          ".expires": {
            "type": "string",
            "description": "Authorization token expires on date/time."
          }
        },
        "x-typeName": "Response"
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "object",
            "description": "Returns data from the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
      "TenantResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "description": "Response data.",
            "$ref": "#/components/schemas/TenantResponseData"
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
      "ArrayTenantResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "array",
            "description": "Response data.",
            "items": {
            "$ref": "#/components/schemas/TenantResponseData"
            }
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
      "TenantResponseData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the tenant."
          },
          "tenant_name": {
            "type": "string",
            "description": "Name of the tenant."
          },
          "url": {
            "type": "string",
            "description": "URL of the tenant.."
          },
          "tenant_type": {
            "type": "string",
            "description": "Type of tenant."
          },
          "created_date": {
            "type": "string",
            "description": "Created date of the tenant."
          },
          "modified_date": {
            "type": "string",
            "description": "Modified date of the tenant."
          },
          "tenant_status": {
            "type": "string",
            "description": "Status of the tenant."
          },
		  "use_site_identifier":{
			  "type": "boolean",
            "description": "site identifier of the tenant."
         },
		 "is_master":
		 {
			 "type": "boolean",
            "description": "master site of the tenant."
		 }
        }
      },
      "Authentication": {
        "required": [
          "grant_type",
          "client_id",
          "client_secret"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>client_credentials</code>",
            "nullable": false
          },
          "client_id": {
            "type": "string",
            "description": "Client ID of the internal app.",
            "nullable": false
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret of the internal app.",
            "nullable": false
          }
        }
      },
      "Startup": {
        "type": "object",
        "description": "Startup Configuration object details.",
        "additionalProperties": false,
        "properties": {
          "ServerConfiguration": {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          "UmsConfiguration": {
            "$ref": "#/components/schemas/UmsConfiguration"
          },
          "DataStoreConfiguration": {
            "$ref": "#/components/schemas/DataStoreConfiguration"
          }
        }
      },
      "AddTenantV2": {
        "type": "object",
        "description": "Add tenant object details.",
        "additionalProperties": false,
		"required": [
          "Email"
        ],
        "properties": {
          "Email": {
            "type": "string",
            "description": "Email of the user."
          },
          "ServerConfiguration": {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          "DataStoreConfiguration": {
            "$ref": "#/components/schemas/DataStoreConfiguration"
          }
        }
      },
      "UpdateTenant": {
        "type": "object",
        "description": "Update tenant object.",
        "additionalProperties": false,
        "properties": {
          "Site": { 
			 "$ref": "#/components/schemas/SiteDetails"
          },
          "Database": {
			 "$ref": "#/components/schemas/DatabaseInformation"
          }
        }
      },
	  "SiteDetails":
	  {
		 "type": "object",
        "description": "site details.",
        "additionalProperties": false,
		"properties": {
          "SiteName": { 
			 "type": "string",
            "description": "Name of the site."
          },
          "SiteUrl": {
            "type": "string",
            "description": "URL of the site."
          },
		  "SiteIdentifier":
		  {
			"type": "string",
            "description": "Identifier of the site."
		  }
        }
      },
	  "DatabaseInformation":
	  {
		  "type": "object",
        "description": "Database information.",
        "additionalProperties": false,
		 "required": [
          "ServerName",
          "DatabaseName",
          "UserName",
          "Password",
		  "SslEnabled"
        ],
		"properties": {
          "ServerName": {
            "type": "string",
            "description": "Name of the database server."
          },
          "DatabaseName": {
            "type": "string",
            "description": "Name of the database."
          },
          "UserName": {
            "type": "string",
            "description": "Username of the database server.  <br /> <blockquote>Check the permission required for the database users [here](/faq/what-are-the-database-permissions-required-to-set-up-bold-bi-embedded/)</blockquote>"
          },
          "Password": {
            "type": "string",
            "description": "Password of the database user."
          },
          "MaintenanceDatabase": {
            "type": "string",
            "description": "Maintenance database of the database server.<br /> <blockquote>Required only for <code>PostgreSQL</code> database server.</blockquote>"
          },
          "Port": {
            "type": "string",
            "description": "Port number of the database server.<br /><blockquote>Required only for <code>PostgreSQL</code> and <code>MySQL</code> database servers.</blockquote>"
          },
           "SslEnabled":
		  {
			  "type": "boolean",
			  "default": "false",
            "description": "Determines whether the encrypted connection to the database server is required. "
		  },
		   "AdditionalParameters": 
		  {
			"type": "string",
            "description": "Additional parameters for connecting to the database server."
		  }
	  }
	  },
      "DataStoreConfiguration": {
        "type": "object",
        "description": "Data store configuration of the site <blockquote>required to create <code>BoldBIOnPremise</code> tenants only.</blockquote>",
        "additionalProperties": false,
        "required": [
          "ServerName",
          "DatabaseName",
          "UserName",
          "Password",
          "ServerType"
        ],
        "properties": {
          "ServerName": {
            "type": "string",
            "description": "Name of the database server."
          },
          "DatabaseName": {
            "type": "string",
            "description": "Name of the database."
          },
          "UserName": {
            "type": "string",
            "description": "Username of the database server.  <br /> <blockquote>Check the permission required for the database userss [here](/faq/what-are-the-database-permissions-required-to-set-up-bold-bi-embedded/)</blockquote>"
          },
          "Password": {
            "type": "string",
            "description": "Password of the database user."
          },
          "IsNewDatabase": {
            "type": "boolean",
            "default": "false",
            "description": "Determines whether to create a new database or connect to an existing database specified by the <code>DatabaseName</code> parameter. "
          },
          "MaintenanceDatabase": {
            "type": "string",
            "description": "Maintenance database of the database server.<br /> <blockquote>Required only for <code>PostgreSQL</code> database server.</blockquote>"
          },
          "Port": {
            "type": "string",
            "description": "Port number of the database server.<br /><blockquote>Required only for <code>PostgreSQL</code> and <code>MySQL</code> database servers.</blockquote>"
          },
          "ServerType": {
            "description": "Database type of the server.",
            "$ref": "#/components/schemas/DatabaseType"
          },
		   "SslEnabled":
		  {
			  "type": "boolean",
			  "default": "false",
            "description": "Determines whether the encrypted connection to the database server is required. "
		  },
		   "AdditionalParameters": 
		  {
			"type": "string",
            "description": "Additional parameters for connecting to the database server."
		  }
        }
      },
      "Database": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ServerName",
          "DatabaseName",
          "UserName",
          "Password",
          "ServerType"
        ],
        "properties": {
          "ServerName": {
            "type": "string",
            "description": "Name of the database server."
          },
          "DatabaseName": {
            "type": "string",
            "description": "Name of the database."
          },
          "UserName": {
            "type": "string",
            "description": "Username of the database server.  <br /> <blockquote>Check the permission required for the database users [here](/faq/what-are-the-database-permissions-required-to-set-up-bold-bi-embedded/)</blockquote>"
          },
          "Password": {
            "type": "string",
            "description": "Password of the database user."
          },
          "IsNewDatabase": {
            "type": "boolean",
            "default": "false",
            "description": "Determines whether to create a new database or connect to an existing database specified by the <code>DatabaseName</code> parameter. "
          },
          "MaintenanceDatabase": {
            "type": "string",
            "description": "Maintenance database of the database server.<br /> <blockquote>Required only for <code>PostgreSQL</code> database server.</blockquote>"
          },
          "Port": {
            "type": "string",
            "description": "Port number of the database server.<br /><blockquote>Required only for <code>PostgreSQL</code> and <code>MySQL</code> database servers.</blockquote>"
          },
          "ServerType": {
            "description": "Database type of the server.",
            "$ref": "#/components/schemas/DatabaseType"
          },
		   "SslEnabled":
		  {
			  "type": "boolean",
			  "default": "false",
            "description": "Determines whether the encrypted connection to the database server is required. "
		  },
		   "AdditionalParameters": 
		  {
			"type": "string",
            "description": "Additional parameters for connecting to the database server."
		  }
        }
      },
      "UmsConfiguration": {
        "type": "object",
        "description": "Site administration configuration data.",
        "additionalProperties": false,
        "required": [
          "Database",
          "Storage",
          "User",
          "Unlockkey"
        ],
        "properties": {
          "Database": {
            "$ref": "#/components/schemas/Database"
          },
          "Storage": {
            "$ref": "#/components/schemas/Storage"
          },
          "User": {
            "$ref": "#/components/schemas/User"
          },
          "Unlockkey": {
            "type": "string",
            "description": "Unlock key for the Bold BI/Reports application."
          }
        }
      },
      "ServerConfiguration": {
        "type": "object",
        "description": "Site configuration data.",
        "additionalProperties": false,
        "required": [
          "Database",
          "Storage",
          "Site"
        ],
        "properties": {
          "Database": {
            "$ref": "#/components/schemas/Database"
          },
          "Storage": {
            "$ref": "#/components/schemas/Storage"
          },
          "Site": {
            "$ref": "#/components/schemas/Site"
          }
        }
      },
      "Storage": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "StorageType"
        ],
        "properties": {
          "StorageType": {
            "description": "Storage type.",
            "$ref": "#/components/schemas/StorageType"
          },
          "AzureBlob": {
            "description": "Azure Blob data.",
            "$ref": "#/components/schemas/AzureBlob"
          }
        }
      },
      "StorageType": {
		  "description": "0 - FileStorage, 1 - AzureBlob",
        "type": "enum",
        "enum": [
          0,
          1
        ],
        "x-enumNames": [
          "FileStorage",
          "AzureBlob"
        ]
      },
      "DatabaseType": {
		   "description": "0 - MSSQL, 1 - MySQL,2-PostgreSQL",
        "type": "enum",
        "enum": [
          0,
          1,
          2
        ],
        "x-enumNames": [
          "MSSQL",
          "MySQL",
          "PostgreSQL"
        ]
      },
      "TenantType": {
		  "description": "3 - BoldBIOnPremise, 4 - BoldReportsOnPremise",
        "type": "enum",
        "enum": [
          3,
          4
        ],
        "x-enumNames": [
          "BoldBIOnPremise",
          "BoldReportsOnPremise"
        ]
      },
	  "ApiUserDeleteResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status from the API."
          },
          "Data": {
            "type": "array",
            "description": "Response data from the API.",
            "items": {
            "$ref": "#/components/schemas/UserDeleteResponse"
            }
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
	  "UserDeleteResponse":
	  {
		   "type": "object",
        "properties": {
          "DatabaseDeleted": {
            "type": "string",
            "description": "DatabaseDeleted."
          },
          "IsSiteDeleted": {
            "type": "boolean",
            "description": "SiteDeleted."
          }
        }
	  },
      "AzureBlob": {
        "type": "object",
        "description": "Required only if the storage type is <code>AzureBlob</code>",
        "additionalProperties": false,
        "required": [
          "AzureBlobStorageContainerName",
          "AzureBlobStorageUri",
          "AccountName",
          "AccessKey"
        ],
        "properties": {
          "AzureBlobStorageContainerName": {
            "type": "string",
            "description": "Azure Blob storage container Name."
          },
          "AzureBlobStorageUri": {
            "type": "string",
            "description": "Azure Blob storage URI."
          },
          "ConnectionString": {
            "type": "string",
            "description": "Connection string of the blob."
          },
          "ConnectionType": {
            "type": "string",
            "description": "Connection type.<ul><li><code>http</code></li><li><code>https</code></li></ul>"
          },
          "AccountName": {
            "type": "string",
            "description": "Account name of the blob."
          },
          "AccessKey": {
            "type": "string",
            "description": "Access key of the blob"
          }
        }
      },
      "Site": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "TenantName",
          "TenantIdentifier",
          "TenantType"
        ],
        "properties": {
          "TenantName": {
            "type": "string",
            "description": "Name of the site."
          },
          "TenantIdentifier": {
            "type": "string",
            "description": "Identifier of the site."
          },
          "UseSiteIdentifier": {
            "type": "boolean",
            "description": "Decides whether we need to use or ignore the site identifier. If the site identifier is ignored, unique domain should be used for each site."
          },
          "TenantType": {
            "description": "Tenant type of the site.",
            "$ref": "#/components/schemas/TenantType"
          },
          "UseCustomBranding": {
            "type": "boolean",
            "description": "Decides to use branding details from ID."
          },
          "CustomAttribute": {
            "type": "array",
            "description": "Custom site attributes.<blockquote>Applicable to create <code>BoldBIOnPremise</code> tenants only.</blockquote>",
            "items": {
            "$ref": "#/components/schemas/CustomAttribute"
          }
          },
          "TenantIsolation": {
            "description": "Tenant isolation code. <blockquote>Applicable to create <code>BoldBIOnPremise</code> tenants only.</blockquote>",
            "$ref": "#/components/schemas/TenantIsolation"
          }
        }
      },
      "TenantIsolation": {
        "type": "object",
		"description": "Tenant isolation code. <blockquote>Applicable to create <code>BoldBIOnPremise</code> tenants only.</blockquote>",
        "additionalProperties": false,
        "properties": {
          "IsEnabled": {
            "type": "boolean",
            "description": "Enable or disable the Isolation Code."
          },
          "IsolationCode": {
            "type": "string",
            "description": "Isolation code."
          }
        }
      },
      "TenantIsolationResponse": {
        "type": "object",
        "description": "Tenant Isolation code response details.",
        "additionalProperties": false,
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "Enable or disable the Isolation Code."
          },
          "isolation_code": {
            "type": "string",
            "description": "Isolation code."
          }
        }
      },
      "User": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Email",
          "FirstName",
          "UserName",
          "LastName",
          "Password"
        ],
        "properties": {
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "UserName": {
            "type": "string",
            "description": "Username."
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the user."
          },
          "Password": {
            "type": "string",
            "description": "Password of the user. <br /><blockquote>Note: Password must meet the following requirements. It must contain,</blockquote><ul><li><code>At least 6 characters</code></li><li><code>1 uppercase character</code></li><li><code>1 lowercase character</code></li><li><code>1 numeric character</code></li><li><code>1 special character</code></li></ul>"
          }
        }
      },
	  "AddUser":
	  {
		 "type": "object",
        "additionalProperties": false,
        "required": [
          "Email",
          "FirstName",
          "UserName",
          "Password"
        ],
        "properties": {
          "Email": {
            "type": "string",
            "description": "Email address of the user. This value may be required based on the user accounts configuration."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "UserName": {
            "type": "string",
            "description": "Username of the user."
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the user."
          },
          "Password": {
            "type": "string",
            "description": "The user's password. Depending on the activation mode, this field may not be required. For, Email activation mode password is not necessary. Automatic activation is password required. <br /><blockquote>Note: Password must meet the following requirements. It must contain,</blockquote><ul><li><code>At least 6 characters</code></li><li><code>1 uppercase character</code></li><li><code>1 lowercase character</code></li><li><code>1 numeric character</code></li><li><code>1 special character</code></li></ul> "
          },
          "AccountActivationMode": {
            "type": "enum",
            "default": null,
            "enum": [
              0,
              1
            ],
            "x-enumNames": [
              "AutomaticActivation",
              "EmailActivation"
            ],
            "description": "Specify the mode of account activation.\n\n* 0 - AutomaticActivation\n* 1 - EmailActivation"
          }
        }
	  },
	  "GrantUser":
	  {
		 "type": "object",
        "additionalProperties": false,
        "properties": {
          "UserName": {
            "type": "string",
            "description": "Username of the user ."
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "user_id": {
            "type": "string",
            "description": "Id of the user."
          }
	  }
	  },
	  "GrantUserApiResponse":
	  {
		  "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status from the API."
          },
          "Data": {
            "type": "array",
            "description": "Response data from the API.",
            "items": {
			"$ref": "#/components/schemas/GrantResponseData",
            }
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
	  },
	   "GrantResponseData":
	  {
		 "type": "object",
        "properties": {
          "tenant": {
           "description": "Response data from the tenant..",
			"$ref": "#/components/schemas/TenantResponseData",
          },
          "user": {
            "description": "Response data from the user..",
			"$ref": "#/components/schemas/UserResponse",
            }
        }
	  },
	  "UpdateUser":
	  {
		"type": "object",
        "additionalProperties": false,
        "required": [
          "Email",
          "FirstName",
          "UserName",
		  "LastName",
          "contact",
        ],
        "properties": {
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "UserName": {
            "type": "string",
            "description": "Username of the user."
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the user."
          },
		  "contact":
		  {
			"type": "int32",
            "description": "Contact of the user."
		  }
        }
	  },
      "UpdatePassword": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Password"
        ],
        "properties": {
          "Password": {
            "type": "string",
            "description": "Password to be updated for the user. <br /><blockquote>Note: Password must meet the following requirements. It must contain,</blockquote><ul><li><code>At least 6 characters</code></li><li><code>1 uppercase character</code></li><li><code>1 lowercase character</code></li><li><code>1 numeric character</code></li><li><code>1 special character</code></li></ul>"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "Returns the user ID from the API."
          },
          "user_name": {
            "type": "string",
            "description": "Returns the username from the API."
          },
          "email": {
            "type": "string",
            "description": "Returns the email address of the user from the API."
          },
          "first_name": {
            "type": "string",
            "description": "Returns the first name of the user from the API."
          },
          "last_name": {
            "type": "string",
            "description": "Returns the last name of the user from the API."
          },
          "display_name": {
            "type": "string",
            "description": "Returns the display name of the user from the API."
          },
          "contact": {
            "type": "string",
            "description": "Returns the contact number of the user from the API."
          },
          "email_verified": {
            "type": "string",
            "description": "Returns whether the email is verified or not from the API."
          },
          "user_status": {
            "type": "string",
            "description": "Returns the status of the user from the API."
          },
          "directory_type": {
            "description": "Returns directory type response data from the API.",
            "$ref": "#/components/schemas/DirectoryType"
          }
        }
      },
	  "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "Returns the user ID from the API."
          },
          "user_name": {
            "type": "string",
            "description": "Returns the username from the API."
          },
          "email": {
            "type": "string",
            "description": "Returns the email address of the user from the API."
          },
          "first_name": {
            "type": "string",
            "description": "Returns the first name of the user from the API."
          },
          "last_name": {
            "type": "string",
            "description": "Returns the last name of the user from the API."
          },
          "display_name": {
            "type": "string",
            "description": "Returns the display name of the user from the API."
          },
          "contact": {
            "type": "string",
            "description": "Returns the contact number of the user from the API."
          },
          "email_verified": {
            "type": "string",
            "description": "Returns whether the email is verified or not from the API."
          },
          "user_status": {
            "type": "string",
            "description": "Returns the status of the user from the API."
          },
          "directory_type": {
            "description": "Returns directory type response data from the API.",
            "$ref": "#/components/schemas/DirectoryType"
          }
        }
      },
      "DirectoryType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the directory type."
          },
          "name": {
            "type": "string",
            "description": "Name of the directory type."
          }
        }
      },
      "ArrayUserResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status from the API."
          },
          "Data": {
            "type": "array",
            "description": "Response data from the API.",
            "items": {
            "$ref": "#/components/schemas/UserResponse"
            }
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
	  "ArrayUpdateUserResponse":
	  {
		  "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status from the API."
          },
          "Data": {
            "type": "array",
            "description": "Response data from the API.",
            "items": {
            "$ref": "#/components/schemas/UpdateUserResponse"
            }
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
	  },
      "CustomAttribute": {
        "type": "object",
        "required": [
          "Name",
          "Value",
          "Description",
          "CanEncrypt"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the site attribute."
          },
          "Value": {
            "type": "string",
            "description": "Value for the site attribute."
          },
          "Description": {
            "type": "string",
            "description": "Description of the attribute."
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Decides to encrypt the site attribute data."
          }
        }
      },
      "UpdateBrandings": {
        "type": "object",
        "description": "Update branding object.",
        "additionalProperties": false,
        "properties": {
          "Header": {
            "$ref": "#/components/schemas/BrandingDetails"
          },
          "Login": {
            "$ref": "#/components/schemas/BrandingDetails"
          },
          "Favicon": {
            "$ref": "#/components/schemas/BrandingDetails"
          },
          "Email": {
            "$ref": "#/components/schemas/BrandingDetails"
          },
          "PoweredBy": {
            "$ref": "#/components/schemas/BrandingDetails"
          }
        }
      },
      "BrandingDetails": {
        "description": "branding logos information to update. ",
        "additionalProperties": false,
        "properties": {
          "LogoBytes": {
            "type": "string",
            "description": "Logo bytes of the image."
          },
          "LogoType": {
            "type": "string",
            "description": "Logo type of branding logos."
          }
        }
      },
      "UpdateBrandingsResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status from the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      }
    },
	"securitySchemes": {
      "Bearer <Token>": {
        "type": "http",
        "description": "JWT token Authentication",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
  }
}