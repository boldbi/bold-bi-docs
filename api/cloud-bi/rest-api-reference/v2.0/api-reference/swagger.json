{
  "openapi": "3.0.1",
  "info": {
    "title": "API Reference",
    "description": {
      "$ref": "./../../../common/api-reference/introduction.md"
    },
    "version": "2.0",
  },
  "servers": [
    {
      "url": "https://{yourdomain}/bi/api"
    }
  ],
  "security": [
    {
      "bearer <token>": []
    }
  ],
  "tags": [
    {
      "name": "Interact with our REST API",
      "description": {
        "$ref": "./helperswagger.json#/tryitnow/tryitnowdescription"
      }
    },
    {
      "name": "Password Authentication",
      "description": {
        "$ref": "./helperswagger.json#/authentication/getauthenticationdescription"
      }
    },
    {
      "name": "Users",
      "description": {
        "$ref": "./helperswagger.json#/userdescription/getusersdescription"
      }
    },
    {
      "name": "Groups",
      "description": {
        "$ref": "./helperswagger.json#/groupdescription/getgroupsdescription"
      }
    },
    {
      "name": "Permission",
      "description": {
        "$ref": "./helperswagger.json#/permissiondescription/getpermissiondescription"
      }
    },
    {
      "name": "Category",
      "description": {
        "$ref": "./helperswagger.json#/categorydescription/getcategorydescription"
      }
    },
    {
      "name": "Dashboard",
      "description": {
        "$ref": "./helperswagger.json#/dashboarddescription/getdashboarddescription"
      }
    },
    {
      "name": "Items",
      "description": {
        "$ref": "./helperswagger.json#/itemdescription/getitemdescription"
      }
    }
  ],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "Password Authentication"
        ],
        "summary": "Authenticate User",
        "description": "Authenticate with a user password.",
        "operationId": "PasswordAuthentication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordAuth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User logged in successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Email address is empty.",
            "content": {}
          },
          "401": {
            "description": "Invalid email or password.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          }
        }
      }
    },    
    "/v2.0/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add User",
        "description": "Adds the new user.",
        "operationId": "Users_AddUser",
        "requestBody": {
          "description": "Detail of the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The user was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Email address already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userDetail"
      }
    },
    "/v2.0/users/{user}/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Groups",
        "description": "Retrieves the list of group details of the particular user.",
        "operationId": "Users_GetGroupsOfUser",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID or Email address of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user's groups has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGroupList"
                }
              }
            }
          },
          "204": {
            "description": "Group list empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get group details.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/csv-users/download-template": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Download CSV Template",
        "description": "Download the CSV template to import the CSV users.",
        "operationId": "Users_DownloadCsvTemplate",
        "responses": {
          "200": {
            "description": "CSV template was downloaded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDownloadCsvTemplate"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to download CSV template file.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/csv-users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add CSV User",
        "description": "Add the list of users using the CSV file.",
        "operationId": "Users_CsvUserImport",
        "requestBody": {
          "description": "Details passed to add the CSV of users.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCsvUserImportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User(s) created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCsvUserImportResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "417": {
            "description": "Failed to add CSV users.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCsvUserImportRequest"
      }
    },
    "/v2.0/users/{user}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a User by Email or Username",
        "description": "Retrieves the particular user detail.",
        "operationId": "Users_GetUserDetail",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Email address of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserDetail"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve user detail.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Groups",
        "description": "Retrieves the list of group details.",
        "operationId": "Groups_GetGroups",
        "responses": {
          "200": {
            "description": "List of groups has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGroupListV2"
                }
              }
            }
          },
          "204": {
            "description": "Group list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/groups/{id}/users": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add User(s) to Group",
        "description": "Adds the list of users to the particular group.",
        "operationId": "Groups_AddUserToGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "User(s) added to the group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupUsers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User(s) added to the group successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "412": {
            "description": "User already exists in group.",
            "content": {}
          },
          "417": {
            "description": "Failed to add user in to group.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiGroupUsers"
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete Group User",
        "description": "Deletes the list of users from the particular group.",
        "operationId": "Groups_DeleteUserFromGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "User(s) removed from the group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupUsers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "406": {
            "description": "Invalid group ID.",
            "content": {}
          },
          "412": {
            "description": "User detail not found.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete user from group.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiGroupUsers"
      }
    },
    "/v2.0/permissions/users": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Add User Permission",
        "description": "Administrators can add a new permission to the specific user by providing permission details.<br /><br />To add a specific permission, you must provide the item ID (Category Id, Schedule Id, and Dashboard Id) for the permission entity (SpecificCategory, SpecificSchedule, and SpecificDashboard).",
        "operationId": "Permission_AddUserPermission",
        "requestBody": {
          "description": "Details about the permissions passed will be added to specified user id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserPermissionAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User permission was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail  not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Permission already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add user permission.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUserPermissionAdd"
      }
    },
    "/v2.0/permissions/users/{id}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get User Permissions",
        "description": "Administrators can get the list of permissions of the specific user.",
        "operationId": "Permission_GetUserPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user permissions has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiUserPermissionDetail"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Permission list is empty.",
            "content": {}
          },
          "400": {
            "description": "Invalid user ID.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Permission"
        ],
        "summary": "Delete User Permission",
        "description": "Administrators can delete the specific user's permission.",
        "operationId": "Permission_DeleteUserPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User permission ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Permission id is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete user permission.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/permissions/groups": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Add Group Permission",
        "description": "Administrators can add a new permission to the specific group by providing permission details.<br /><br />To add a specific permission, you must provide the item ID (Category Id, Schedule Id, and Dashboard Id) for the permission entity (SpecificCategory, SpecificSchedule, and SpecificDashboard).",
        "operationId": "Permission_AddGroupPermission",
        "requestBody": {
          "description": "Details about the permissions passed will be added to specified group id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupPermissionAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group permission was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group  detail  not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Permission already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add group permission.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiGroupPermissionAdd"
      }
    },
    "/v2.0/permissions/groups/{id}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get Group Permissions",
        "description": "Administrators can get the list of permissions of the specific group.",
        "operationId": "Permission_GetGroupPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of group permissions has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiGroupPermissionDetail"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Permission list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "Invalid group ID.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Permission"
        ],
        "summary": "Delete Group Permission",
        "description": "Administrators can delete the specific group permission.",
        "operationId": "Permission_DeleteGroupPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group permission ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Permission id is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete group permission.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/categories": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Add Category",
        "description": "Users who have a create access for categories, can add a new category.",
        "operationId": "Category_AddCategory",
        "requestBody": {
          "description": "Details about the passed category will be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCategoryAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The category was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add category.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCategoryAdd"
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Update Category",
        "description": "Users who have write access for categories can update an existing category.",
        "operationId": "Category_UpdateCategory",
        "requestBody": {
          "description": "Details about the passed category will be updated to the specified category id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCategoryUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The category was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update category.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCategoryUpdate"
      }
    },
    "/v2.0/dashboards/public": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Public Dashboards",
        "description": "Retrieves the list of public dashboards for the current user.",
        "operationId": "Dashboards_GetPublicItems",
        "parameters": [
          {
            "name": "itemType",
            "in": "query",
            "description": "Item type.<br />Value allowed is <code>Dashboard</code>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": false,
              "x-schema": {
                "$ref": "#/components/schemas/ItemType"
              }
            },
            "x-schema": {
              "$ref": "#/components/schemas/ItemType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of public dashboards was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiPublicItems"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Public item list empty.",
            "content": {}
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get public items.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/dashboards/favorite": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Favorite Dashboards",
        "description": "Retrieves a list of favorite dashboards for the current user.",
        "operationId": "Dashboards_GetFavoriteItems",
        "responses": {
          "200": {
            "description": "List of favorite dashboards was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiFavoriteitems"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Favorite item list empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get favorite items.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Update Favorite Dashboard",
        "description": "Users who have read access to the dashboard can update the dashboard as favorite or non-favorite.",
        "operationId": "Dashboards_UpdateFavoriteItem",
        "requestBody": {
          "description": "Favorite value passed will be updated to the specified dashboard.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateFavorite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Favorite dashboard was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "417": {
            "description": "Failed to favorite item.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUpdateFavorite"
      }
    },
    "/v2.0/dashboards/tabs/{id}": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Child Dashboards",
        "description": "Retrieves a list of child dashboards for the current user.",
        "operationId": "Dashboards_GetChildDashboards",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dashboard ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of child dashboards retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiChildDashboard"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Child dashboard list empty",
            "content": {}
          },
          "400": {
            "description": "The content of the request body is missing or incomplete",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET",
            "content": {}
          }
        }
      }
    },
    "/v2.0/dashboards/export": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Export Dashboard",
        "description": "Users who have read access to the dashboard can export the dashboard to the export types (Excel, PDF, and Image) and get the exported dashboard as an array of bytes in response.<br /><br />When exporting multi-tabbed dashboard in image format, the response bytes must be saved in ZIP format.",
        "operationId": "Dashboards_ExportDashboard",
        "requestBody": {
          "description": "Details about the dashboard passed will be exported.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiExportDashboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dashboard exported successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiExportDashboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to Export item.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiExportDashboard"
      }
    },
    "/v2.0/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get Items",
        "description": "Retrieves the respective list of items for the item types (Category, Dashboard, Datasource, and Schedule) for the current user.",
        "operationId": "Items_GetItems",
        "parameters": [
          {
            "name": "itemType",
            "in": "query",
            "description": "Item type.<br />(Values allowed are <code>Category, Dashboard, Datasource, and Schedule</code>)",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": false,
              "x-schema": {
                "$ref": "#/components/schemas/ItemType"
              }
            },
            "x-schema": {
              "$ref": "#/components/schemas/ItemType"
            }
          },
          {
            "type": "string",
            "name": "serverPath",
            "in": "query",
            "required": false,
            "description": "<br />`\"/\"` + `\"Category name\"`",
            "x-nullable": true,
            "example": " /sales "
          }
        ],
        "responses": {
          "200": {
            "description": "List of items has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiItems"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Item list is empty.",
            "content": {}
          },
          "400": {
            "description": "Invalid item type.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v2.0/items/{id}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get Item by Id",
        "description": "Retrieves the respective item detail for the current users’ item types (Category, Dashboard, Datasource, and Schedule).",
        "operationId": "Items_GetItemDetail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpecifiedItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete Item",
        "description": "Users who have delete access to the item types Category, Dashboard, Datasource, and Schedule can delete the item by providing the item ID (Category Id, Dashboard Id, Datasource Id, and Schedule Id).",
        "operationId": "Items_DeleteItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },    
    "/v2.0/items/is-name-exists": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Check Item name existence",
        "description": "Current user can check whether the item (category, dashboard, datasource, schedule) is alread exists or not by providing itemname (category name, dashboard name, schedule name, datasource name) and itemtype (category, dashboard, datasource, schedule) in the request body.",
        "operationId": "Items_IsItemNameExists",
        "requestBody": {
          "description": "Details about the item passed will be checked.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiValidateItemName"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Returns an item existence",
            "content": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete",
            "content": {}
          },
          "404": {
            "description": "Item detail not found",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST",
            "content": {}
          },
          "417": {
            "description": "Failed to validate item name",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiValidateItemName"
      }
    }
  },
  "components": {
    "schemas": {
      "Response": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Authentication token of the user."
          },
          "token_type": {
            "type": "string",
            "description": "Type of token assigned by the authorization server."
          },
          "expires_in": {
            "type": "string",
            "description": "The lifetime in seconds of the access token."
          },
          "Email": {
            "type": "string",
            "description": "Email of the authenticated user."
          }
        },
        "x-typeName": "Response"
      },
      "ApiUserPermissionDetail": {
        "type": "object",
        "description": "User permission details.",
        "properties": {
          "PermissionAccess": {
            "type": "string",
            "description": "Specify an access type for item.<br />Values allowed are <code>Create, Read, ReadWrite, ReadWriteDelete</code>"
          },
          "PermissionEntity": {
            "type": "string",
            "description": "Specify an entity of item for permission.<br />Values allowed are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard</code>"
          },
          "UserId": {
            "type": "integer",
            "description": "User ID.",
            "format": "int32"
          },
          "ItemName": {
            "type": "string",
            "description": "Item name.<br />Valid values: <code>Category name, Dashboard name, Schedule name</code>"
          },
          "PermissionId": {
            "type": "integer",
            "description": "Permission ID.",
            "format": "int32"
          },
          "ItemId": {
            "type": "string",
            "description": "Item ID.<br />Valid values: <code>CategoryId, DashboardId, ScheduleId</code>",
            "format": "guid"
          }
        }
      },
      "ApiGroupPermissionDetail": {
        "type": "object",
        "description": "Group Permission details.",
        "properties": {
          "PermissionAccess": {
            "type": "string",
            "description": "Specify an access type for item.<br />Values allowed are <code>Create, Read, ReadWrite, ReadWriteDelete</code>"
          },
          "PermissionEntity": {
            "type": "string",
            "description": "Specify an entity of item for permission.<br />Values allowed are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard</code>"
          },
          "GroupId": {
            "type": "integer",
            "description": "Group ID.",
            "format": "int32"
          },
          "ItemName": {
            "type": "string",
            "description": "Item name.<br />Valid values: <code>Category name, Dashboard name, Schedule name</code>"
          },
          "PermissionId": {
            "type": "integer",
            "description": "Permission ID.",
            "format": "int32"
          },
          "ItemId": {
            "type": "string",
            "description": "Item ID.<br />Valid values: <code>CategoryId, DashboardId, ScheduleId</code>",
            "format": "guid"
          }
        }
      },
      "ApiUserPermissionAdd": {
        "type": "object",
        "description": "Permission details.",
        "required": [
          "UserId"
        ],
        "properties": {
          "PermissionAccess": {
            "type": "string",
            "description": "Specify an access type for item.<br />Values allowed are <code>Create, Read, ReadWrite, ReadWriteDelete</code>"
          },
          "UserId": {
            "type": "integer",
            "description": "User ID.",
            "format": "int32"
          },
          "PermissionEntity": {
            "type": "string",
            "description": "Specify an entity of item for permission.<br />Values allowed are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard</code>"
          },
          "ItemId": {
            "type": "string",
            "description": "Item ID.<br />Valid values: <code>CategoryId, DashboardId, ScheduleId</code>",
            "format": "guid"
          }
        }
      },
      "ApiResponse": {
        "required": [
          "ApiStatus",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "object",
            "description": "Returns data from the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
      "ApiGroupPermissionAdd": {
        "type": "object",
        "description": "Permission details.",
        "required": [
          "GroupId"
        ],
        "properties": {
          "PermissionAccess": {
            "type": "string",
            "description": "Specify an access type for item.<br />Values allowed are <code>Create, Read, ReadWrite, ReadWriteDelete</code>"
          },
          "GroupId": {
            "type": "integer",
            "description": "Group ID.",
            "format": "int32"
          },
          "PermissionEntity": {
            "type": "string",
            "description": "Specify an entity of item for permission.<br />Values allowed are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard</code>"
          },
          "ItemId": {
            "type": "string",
            "description": "Item ID.<br />Valid values: <code>CategoryId, DashboardId, ScheduleId</code>",
            "format": "guid"
          }
        }
      },
      "ItemType": {
        "type": "string",
        "description": "Item type"
      },
      "ApiItems": {
        "type": "object",
        "properties": {
          "CanRead": {
            "type": "boolean",
            "description": "Specifies the read permission of the item."
          },
          "CanWrite": {
            "type": "boolean",
            "description": "Specifies the write permission of the item."
          },
          "CanDelete": {
            "type": "boolean",
            "description": "Specifies the delete permission of the item."
          },
          "CanDownload": {
            "type": "boolean",
            "description": "Specifies the download permission of the item."
          },
          "CanSchedule": {
            "type": "boolean",
            "description": "Specifies the schedule permission of the item."
          },
          "CanOpen": {
            "type": "boolean",
            "description": "Specifies the open permission of the item."
          },
          "CanMove": {
            "type": "boolean",
            "description": "Specifies the move permission of the item."
          },
          "CanCopy": {
            "type": "boolean",
            "description": "Specifies the copy permission of the item."
          },
          "CanClone": {
            "type": "boolean",
            "description": "Specifies the clone permission of the item."
          },
          "CanCreateItem": {
            "type": "boolean",
            "description": "Specifies the create permission of the item."
          },
          "Id": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Datasource, Schedule</code>"
          },
          "Name": {
            "type": "string",
            "description": "Item name."
          },
          "Description": {
            "type": "string",
            "description": "Item description."
          },
          "ItemLocation": {
            "type": "string",
            "description": "Item location."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Specifies the display name of the user who created the item."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Specifies the full name of the user who modified the item."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "IsMultiDashboard": {
            "type": "boolean",
            "description": "Returns true, if the dashboard is multi-dashboard."
          },
          "IsFavorite": {
            "type": "boolean",
            "description": "Returns true, if it is a favorite item."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true, if the item is public."
          },
          "TabDetail": {
            "type": "array",
            "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
            "items": {
              "$ref": "#/components/schemas/ApiTabDetail"
            }
          }
        },
        "description": "Details of items."
      },
      "ApiTabDetail": {
        "type": "object",
        "description": "Specifies the details of the tab in a multi-tabbed dashboard",
        "properties": {
          "MultiTabDashboardId": {
            "type": "string",
            "description": "Specifies the dashboard ID of the multi-tabbed dashboard.",
            "format": "guid"
          },
          "DashboardId": {
            "type": "string",
            "description": "Specifies the dashboard ID of the tab.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Specifies the name of the tab."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format"
          }
        }
      },
      "ApiSpecifiedItemDetail": {
        "type": "object",
        "description": "Item Details.",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Item ID.<br />Valid values: <code>CategoryId, DashboardId, DatasourceId, ScheduleId</code>",
            "format": "guid"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Datasource, Schedule</code>"
          },
          "Name": {
            "type": "string",
            "description": "Item name.<br />Valid values: <code>Category name, Dashboard name, Datasource name, Schedule name</code>"
          },
          "Description": {
            "type": "string",
            "description": "Item description."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CloneOf": {
            "type": "string",
            "description": "Item ID from where the item was cloned.",
            "format": "guid"
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "Extension": {
            "type": "string",
            "description": "Item extension."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true if the item is public."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true if the item is active."
          }
        }
      },
      "ItemResponse": {
        "type": "object",
        "properties": {
          "FileContent": {
            "type": "string",
            "description": "File content",
            "format": "byte"
          },
          "GroupList": {
            "type": "array",
            "description": "Groups list",
            "items": {
              "$ref": "#/components/schemas/GroupResponse"
            }
          },
          "IsFavorite": {
            "type": "boolean",
            "description": "Returns true if it is a favorite item."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true if it is a public item."
          },
          "ItemName": {
            "type": "string",
            "description": "Item name."
          },
          "ItemsView": {
            "type": "array",
            "description": "Items view",
            "items": {
              "$ref": "#/components/schemas/ItemView"
            }
          },
          "ItemType": {
            "description": "Item type.<br />Valid values: <code>Category, Dashboard, Schedule</code>",
            "$ref": "#/components/schemas/ItemType"
          },
          "ItemViewId": {
            "type": "string",
            "description": "Item view id",
            "format": "guid"
          },
          "PublishedItemId": {
            "type": "string",
            "description": "Published item id",
            "format": "guid"
          },
          "ResponseContent": {
            "description": "Response content"
          },
          "SystemSettingsResponse": {
            "description": "System settings response",
            "$ref": "#/components/schemas/SystemSettingsResponse"
          },
          "UserDetailResponse": {
            "$ref": "#/components/schemas/UserDetailResponse"
          },
          "UserList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDetailResponse"
            }
          },
          "CategoryName": {
            "type": "string"
          },
          "Extension": {
            "type": "string"
          },
          "Version": {
            "type": "integer",
            "format": "int32"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          }
        ]
      },
      "GroupResponse": {
        "type": "object",
        "properties": {
          "ActiveDirectoryGroupId": {
            "type": "string",
            "description": "Returns active directory group id",
            "format": "guid"
          },
          "CanDelete": {
            "type": "boolean",
            "description": "Specifies the delete permission of the item"
          },
          "Color": {
            "type": "string",
            "description": "Group color"
          },
          "Description": {
            "type": "string",
            "description": "Group description"
          },
          "Id": {
            "type": "integer",
            "description": "Group Id",
            "format": "int32"
          },
          "IsActiveDirectoryGroup": {
            "type": "boolean",
            "description": "Returns true if it is an active directory group"
          },
          "Name": {
            "type": "string",
            "description": "Group name"
          },
          "Users": {
            "type": "array",
            "description": "Group users",
            "items": {
              "$ref": "#/components/schemas/UserDetailResponse"
            }
          },
          "UsersCount": {
            "type": "integer",
            "description": "Group's users count",
            "format": "int32"
          }
        }
      },
      "UserDetailResponse": {
        "type": "object",
        "properties": {
          "Avatar": {
            "type": "string",
            "description": "User avatar",
            "format": "byte"
          },
          "ContactNumber": {
            "type": "string",
            "description": "Contact number"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Created date of the user",
            "format": "date-time"
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user"
          },
          "Email": {
            "type": "string",
            "description": "User email address"
          },
          "Username": {
            "type": "string",
            "description": "Username of the user"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true if user is active"
          },
          "IsAzureADUser": {
            "type": "boolean",
            "description": "Returns true if user is azure directory user"
          },
          "IsAdmin": {
            "type": "boolean",
            "description": "Returns true if user is an admin user"
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the user"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Last modified date of the user",
            "format": "date-time"
          },
          "Status": {
            "description": "Status of the user",
            "$ref": "#/components/schemas/UserStatus"
          },
          "TimeZone": {
            "type": "string",
            "description": "Time zone of the user"
          },
          "UserDomain": {
            "type": "string",
            "description": "Domain of the user"
          },
          "UserId": {
            "type": "integer",
            "description": "User Id",
            "format": "int32"
          },
          "UserPreferredCulture": {
            "type": "string",
            "description": "User preferred culture"
          },
          "DirectoryType": {
            "description": "Directory type of the user",
            "$ref": "#/components/schemas/DirectoryType"
          }
        }
      },
      "UserStatus": {
        "type": "string",
        "x-enumNames": [ "Active", "InActive" ],
        "enum": [ "Active", "InActive" ]
      },
      "DirectoryType": {
        "type": "string",
        "x-enumNames": [
          "All",
          "Local",
          "AzureAD",
          "ExternalDatabase"
        ],
        "enum": [
          "All",
          "Local",
          "AzureAD",
          "ExternalDatabase"
        ]
      },
      "ItemView": {
        "type": "object",
        "properties": {
          "CanDelete": {
            "type": "boolean",
            "description": "Specifies the delete permission of the item"
          },
          "CanEdit": {
            "type": "boolean",
            "description": "Specifies the edit permission of the item"
          },
          "CanShare": {
            "type": "boolean",
            "description": "Specifies the sharing permission of the item"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true if the item is active"
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Specify true to set the item as a public"
          },
          "ItemId": {
            "type": "string",
            "description": "Item id",
            "format": "guid"
          },
          "ItemName": {
            "type": "string",
            "description": "Item name"
          },
          "PermissionAccessUserId": {
            "type": "integer",
            "description": "Permission access user id",
            "format": "int32"
          },
          "QueryString": {
            "type": "string",
            "description": "Query string"
          },
          "UserId": {
            "type": "integer",
            "description": "User id",
            "format": "int32"
          },
          "ViewId": {
            "type": "string",
            "description": "View id",
            "format": "guid"
          },
          "ViewName": {
            "type": "string",
            "description": "View name"
          }
        }
      },
      "SystemSettingsResponse": {
        "type": "object",
        "properties": {
          "DateFormat": {
            "type": "string",
            "description": "Date format"
          },
          "FavoriteIcon": {
            "type": "string",
            "description": "Favorite icon",
            "format": "byte"
          },
          "LogOnLogo": {
            "type": "string",
            "description": "Logon logo",
            "format": "byte"
          },
          "MainScreenLogo": {
            "type": "string",
            "description": "Mainscreen logo",
            "format": "byte"
          },
          "OrganizationName": {
            "type": "string"
          },
          "TimeZone": {
            "type": "string"
          },
          "WelcomeNoteText": {
            "type": "string"
          }
        }
      },
      "ApiPublicItems": {
        "type": "object",
        "description": "Details of public items.",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Item ID.<br />Valid values: <code>DashboardId</code>",
            "format": "guid"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Value allowed is <code>Dashboard</code>"
          },
          "Name": {
            "type": "string",
            "description": "Item name.<br />Valid values: <code>Dashboard name</code>"
          },
          "Description": {
            "type": "string",
            "description": "Item description."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "CategoryDescription": {
            "type": "string",
            "description": "Category description."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Specifies the display name of the user who created the item."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Specifies the full name of the user who modified the item."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "IsMultiTabbedDashboard": {
            "type": "boolean",
            "description": "Returns true if the dashboard is a multi-tabbed dashboard."
          },
          "TabDetail": {
            "type": "array",
            "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
            "items": {
              "$ref": "#/components/schemas/ApiTabDetail"
            }
          },
          "IsFavorite": {
            "type": "boolean",
            "description": "Returns true if it is a favorite item."
          }
        }
      },
      "ApiFavoriteitems": {
        "type": "object",
        "description": "Details of favorite items.",
        "properties": {
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Dashboard name."
          },
          "Description": {
            "type": "string",
            "description": "Dashboard description."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "CategoryDescription": {
            "type": "string",
            "description": "Category description."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Specifies the display name of the user who created the item."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Specifies the full name of the user who modified the item."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "IsMultiTabbedDashboard": {
            "type": "boolean",
            "description": "Returns true if the dashboard is a multi-tabbed dashboard."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true if the item is public."
          }
        }
      },
      "ApiChildDashboard": {
        "type": "object",
        "description": "Child dashboard details of the multi-dashboard",
        "properties": {
          "ParentId": {
            "type": "string",
            "description": "Specifies the Item Id of the parent dashboard.",
            "format": "guid"
          },
          "DashboardId": {
            "type": "string",
            "description": "Specifies the Item Id of the child dashboard.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Specifies the name of the child dashboard."
          },
          "TabId": {
            "type": "string",
            "description": "Specifies the tab Id of the child dashboard.",
            "format": "guid"
          }
        }
      },
      "ApiCategoryAdd": {
        "type": "object",
        "description": "Category details.",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Category name."
          },
          "Description": {
            "type": "string",
            "description": "Category description."
          }
        }
      },
      "ApiDashboardAdd": {
        "type": "object",
        "description": "Dashboard details.",
        "required": [
          "Name",
          "CategoryId",
          "IsPublic",
          "ItemContent"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Dashboard name."
          },
          "Description": {
            "type": "string",
            "description": "Dashboard description."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Specify true to set the item as a public."
          },
          "ItemContent": {
            "type": "string",
            "description": "Provide items in an array of bytes.",
            "format": "byte"
          }
        }
      },
      "ApiItemResponse": {
        "type": "object",
        "description": "Response details of item.",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "PublishedItemId": {
            "type": "string",
            "description": "Returns the ID of the published item.",
            "format": "guid"
          },
          "Version": {
            "type": "integer",
            "description": "Returns the version of the published file item.",
            "format": "int32"
          }
        }
      },
      "ApiValidateItemName": {
        "type": "object",
        "description": "Validation details of the item.",
        "required": [
          "ItemName",
          "ItemType"
        ],
        "properties": {
          "ItemName": {
            "type": "string",
            "description": "Item name.<br />Valid values: <code>dashboard name, Datasource name, Schedule name</code>"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Valid values: <code>Category, Dashboard, Datasource, Schedule</code>"
          }
        }
      },
      "ApiCategoryUpdate": {
        "type": "object",
        "description": "Category details.",
        "required": [
          "CategoryId"
        ],
        "properties": {
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Category name."
          },
          "Description": {
            "type": "string",
            "description": "Category description."
          }
        }
      },
      "ApiDashboardUpdate": {
        "type": "object",
        "description": "Dashboard details.",
        "required": [
          "DashboardId",
          "IsPublic",
          "IsDraft"
        ],
        "properties": {
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Dashboard name."
          },
          "Description": {
            "type": "string",
            "description": "Dashboard description."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "VersionComment": {
            "type": "string",
            "description": "Comments about update."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Specify true to set item as public."
          },
          "ItemContent": {
            "type": "string",
            "description": "Provide items in an array of bytes.",
            "format": "byte"
          },
          "IsDraft": {
            "type": "boolean",
            "description": "Returns true if the dashboard is a draft."
          }
        }
      },
      "ApiUpdateFavorite": {
        "type": "object",
        "description": "Details about the favorite item.",
        "required": [
          "DashboardId",
          "Favorite"
        ],
        "properties": {
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "Favorite": {
            "type": "boolean",
            "description": "Specify true to set the item as a favorite item."
          }
        }
      },
      "ApiExportDashboard": {
        "type": "object",
        "description": "Details about the dashboard to be exported.",
        "required": [
          "DashboardId",
          "ExportType"
        ],
        "properties": {
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "ServerPath": {
            "type": "string",
            "description": "Specifies the relative URL of the dashboard."
          },
          "ExportType": {
            "type": "string",
            "description": "Export type.<br />Values allowed are <code>Excel, Pdf, Image</code>"
          }
        }
      },
      "ApiExportDashboardResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "FileContent": {
            "type": "string",
            "description": "Returns the exported dashboard in an array of bytes.",
            "format": "byte"
          }
        }
      },
      "ApiUserAdd": {
        "type": "object",
        "description": "User detail",
        "required": [
          "Email",
          "FirstName"
        ],
        "properties": {
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user."
          }
        }
      },
      "ApiUserDetail": {
        "type": "object",
        "description": "Detail of the User",
        "required": [
          "UserId",
          "IsActive",
          "UserStatus",
          "IsAzureAdUser"
        ],
        "properties": {
          "UserId": {
            "type": "integer",
            "description": "ID of the user.",
            "format": "int32"
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user."
          },
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true if the user is an active user."
          },
          "UserStatus": {
            "description": "Returns the status of the user.",
            "$ref": "#/components/schemas/UserStatus"
          },
          "Username": {
            "type": "string",
            "description": "Username of the user."
          },
          "IsAzureAdUser": {
            "type": "boolean",
            "description": "Returns true if the user is added from Azure Active Directory."
          },
          "UserDomain": {
            "type": "string",
            "description": "Domain of the Active Directory User"
          },
          "Avatar": {
            "type": "string",
            "description": "Profile picture of the User",
            "format": "byte"
          }
        }
      },
      "ApiDownloadCsvTemplate": {
        "type": "object",
        "description": "Contains response of downloaded CSV template file.",
        "required": [
          "ApiStatus",
          "Status"
        ],
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "FileContent": {
            "type": "string",
            "description": "Returns CSV file in array of bytes.",
            "format": "byte"
          }
        }
      },
      "ApiCsvUserImportRequest": {
        "type": "object",
        "description": "Contains CSV user import request.",
        "required": [
          "CsvFileContent"
        ],
        "properties": {
          "CsvFileContent": {
            "type": "string",
            "description": "Provides the CSV file in an array of bytes.",
            "format": "byte"
          }
        }
      },
      "ApiCsvUserImportResponse": {
        "type": "object",
        "description": "Contains response of Csv user import",
        "required": [
          "ApiStatus",
          "Status"
        ],
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "CsvErrorContent": {
            "type": "string",
            "description": "Returns CSV file in array of bytes if the importing users find errors.",
            "format": "byte"
          }
        }
      },
      "ApiGroupList": {
        "type": "object",
        "properties": {
          "GroupList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiGroup"
            }
          }
        }
      },
      "ApiGroup": {
        "type": "object",
        "description": "Group detail",
        "required": [
          "Id",
          "IsAzureADGroup"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID of the group.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the group."
          },
          "Description": {
            "type": "string",
            "description": "Description of the group."
          },
          "IsAzureADGroup": {
            "type": "boolean",
            "description": "Returns true if the group is added from Azure Active Directory"
          }
        }
      },
      "ApiGroupUsers": {
        "type": "object",
        "description": "User(s) added/removed from the group.",
        "properties": {
          "Id": {
            "type": "array",
            "description": "List of user IDs",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "ApiGroupListV2": {
        "type": "object",
        "properties": {
          "GroupList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiGroupV2"
            }
          }
        }
      },
      "ApiGroupV2": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of the group."
          },
          "Id": {
            "type": "integer",
            "description": "ID of the group.",
            "format": "int32"
          },
          "IsAzureADGroup": {
            "type": "boolean",
            "description": "Returns true if the group is added from Azure Active Directory"
          },
          "Name": {
            "type": "string",
            "description": "Name of the group."
          },
          "UserCount": {
            "type": "integer",
            "description": "User(s) count",
            "format": "int32"
          }
        }
      },
      "PasswordAuth": {
        "required": [
          "grant_type",
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Email address of the user.",
            "nullable": false
          },
          "password": {
            "type": "string",
            "description": "Password of the user",
            "nullable": false
          },
          "grant_type": {
            "type": "string",
            "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>password</code>",
            "nullable": false
          }
        }
      }
    },
    "securitySchemes": {
      "bearer <token>": {
        "type": "http",
        "description": "JWT token Authentication",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}