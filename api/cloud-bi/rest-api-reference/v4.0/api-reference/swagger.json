{
  "openapi": "3.0.1",
  "info": {
    "title": "API Reference",
    "description": {
      "$ref": "./../../../common/api-reference/introduction.md"
    },
    "version": "4.0"
  },
  "servers": [
    {
      "url": "https://{yourdomain}/bi/api"
    }
  ],
  "security": [
    {
      "bearer <token>": []
    }
  ],
  "tags": [
    {
      "name": "Interact with our REST API",
      "description": {
        "$ref": "./helperswagger.json#/tryitnow/tryitnowdescription"
      }
    },
    {
      "name": "Password Authentication",
      "description": {
        "$ref": "./helperswagger.json#/authentication/getauthenticationdescription"
      }
    },
    {
      "name": "Dashboard",
      "description": {
        "$ref": "./helperswagger.json#/dashboarddescription/getdashboarddescription"
      }
    },
    {
      "name": "Dashboard Views",
      "description": {
        "$ref": "./helperswagger.json#/dashbaordviewsdescription/dashbaordviewsdescription"
      }
    },
    {
      "name": "DataSource",
      "description": {
        "$ref": "./helperswagger.json#/datasourcedescription/getdatasourcedescription"
      }
    }
  ],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "Password Authentication"
        ],
        "summary": "Authenticate User",
        "description": "Authenticate with a user password.",
        "operationId": "PasswordAuthentication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordAuth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User logged in successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Email address is empty.",
            "content": {}
          },
          "401": {
            "description": "Invalid email or password.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboard/{itemId}/copy": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Copy Dashboard",
        "description": "Users who have create access to the dashboard, can copy the dashboard.",
        "operationId": "Dashboards_CopyDashboard",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of the dashboard will be copied.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Details of the dashboard passed will be copied.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCopyDashboardRequestV4"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The dashboard has been copied successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCopyItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "403": {
            "description": "Mark as public has been restricted.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to copy the dashboard.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCopyDashboard"
      }
    },
    "/v4.0/dashboards/views": {
      "post": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Add Dashboard View",
        "description": "Users who have access to the dashboard can save a view by providing proper dashboard filter details.",
        "operationId": "ItemViews_AddItemView",
        "requestBody": {
          "description": "Details about the dashboard filter to save the view.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemViewsAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A view has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "View name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add view.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiItemViewsAdd"
      },
      "put": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Edit Dashboard View",
        "description": "Users who have created a view can edit the view by providing proper dashboard filter details.",
        "operationId": "ItemViews_UpdateItemView",
        "requestBody": {
          "description": "Details about the dashboard filter to edit the view.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemViewsUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A view has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "View name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to edit view.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiItemViewsUpdate"
      }      
    },
    "/v4.0/dashboards/{id}/views": {
      "get": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Get Dashboard Views",
        "description": "Retrieves the list of views of the particular dashboard for the current user.",
        "operationId": "ItemViews_ItemViewsByItemId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dashboard ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Views have been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiItemViewResponse"
                  }
                }
              }
            }
          },
          "204": {
            "description": "View list was empty.",
            "content": {}
          },
          "400": {
            "description": "Dashboard ID invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get views.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/views/{id}": {
      "get": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Get Dashboard View by Id",
        "description": "Retrieves the view detail for the current user.",
        "operationId": "ItemViews_ItemViewByViewId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "View ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A view has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemViewResponse"
                }
              }
            }
          },
          "400": {
            "description": "View ID invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "View detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get view.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Delete Dashboard View",
        "description": "Users who have created a view can delete them.",
        "operationId": "ItemViews_ItemViewDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "View ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "View ID invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Itemview is not active.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete view.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/datasource/{itemId}/copy": {
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "Copy Data source",
        "description": "Users who have create access to the data source, can copy the data source.",
        "operationId": "DataSource_CopyDataSource",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of the data source will be copied.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Details of the passed data source will be copied.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCopyDataSourceRequestV4"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The data source has been copied successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCopyItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Data source name already exist.",
            "content": {}
          },
          "417": {
            "description": "Failed to copy the data source.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCopyDatasource"
      }
    }
  },
  "components": {
    "schemas": {
      "Response": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Authentication token of the user."
          },
          "token_type": {
            "type": "string",
            "description": "Type of token assigned by the authorization server."
          },
          "expires_in": {
            "type": "string",
            "description": "The lifetime in seconds of the access token."
          },
          "Email": {
            "type": "string",
            "description": "Email of the authenticated user."
          }
        },
        "x-typeName": "Response"
      },
      "ApiResponse": {
        "required": [
          "ApiStatus",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "object",
            "description": "Returns data from the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
      "ApiItemViewsAdd": {
        "required": [
          "IsPublic",
          "ItemId",
          "QueryString",
          "ViewName"
        ],
        "type": "object",
        "properties": {
          "ViewName": {
            "type": "string",
            "description": "Specify name of the view."
          },
          "ItemId": {
            "type": "string",
            "description": "Specify ID of the dashboard.",
            "format": "guid"
          },
          "ChildItemId": {
            "type": "string",
            "description": "Specify ID of the child dashboard.",
            "format": "guid"
          },
          "QueryString": {
            "type": "string",
            "description": "Specify the filter query.",
            "example": "Year(OrderDate)=1996"
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Specify <i>true</i> to set the view as public"
          }
        },
        "description": "Add dashboard view request details."
      },
      "ApiItemViewsUpdate": {
        "required": [
          "DashboardId",
          "ViewId"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Specify name of the view."
          },
          "ViewId": {
            "type": "string",
            "description": "Specify ID of the dashboard view.",
            "format": "guid"
          },
          "DashboardId": {
            "type": "string",
            "description": "Specify ID of the dashboard.",
            "format": "guid"
          },
          "QueryString": {
            "type": "string",
            "description": "Specify the filter query.",
            "example": "Year(OrderDate)=1996"
          }
        },
        "description": "Update dashboard view request details."
      },
      "ApiItemViewResponse": {
        "required": [
          "CanDelete",
          "CanEdit",
          "CanShare",
          "IsPublic",
          "ItemId",
          "UserId",
          "ViewId"
        ],
        "type": "object",
        "properties": {
          "CanDelete": {
            "type": "boolean",
            "description": "Specifies the delete permission of the view."
          },
          "CanEdit": {
            "type": "boolean",
            "description": "Specifies the write permission of the view."
          },
          "CanShare": {
            "type": "boolean",
            "description": "Specifies the share permission of the view."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true, if the view is public."
          },
          "ItemId": {
            "type": "string",
            "description": "Specifies the ID of the dashboard.",
            "format": "guid"
          },
          "QueryString": {
            "type": "string",
            "description": "Specifies the filter query string."
          },
          "UserId": {
            "type": "integer",
            "description": "Specifies the ID of the user.",
            "format": "int32"
          },
          "ViewId": {
            "type": "string",
            "description": "Specifies the ID of the view.",
            "format": "guid"
          },
          "ViewName": {
            "type": "string",
            "description": "Specifies the name of the view."
          }
        },
        "description": "Dashboard view response details."
      },
      "ApiCopyItemResponse": {
        "required": [
          "ApiStatus",
          "PublishedItemId",
          "Status",
          "Version"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "PublishedItemId": {
            "type": "string",
            "description": "Returns the published data source item id",
            "format": "guid"
          },
          "Version": {
            "type": "integer",
            "description": "Returns the version number of the data source",
            "format": "int32"
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          }
        },
        "description": "Response details of the copied item."
      },
      "ApiCopyDashboardRequestV4": {
        "required": [
          "CategoryId",
          "IsCopyDatasource",
          "IsPublic",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Dashboard name."
          },
          "Description": {
            "type": "string",
            "description": "Dashboard description."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Specify <i>true</i> to set the item as a public."
          },
          "IsCopyDatasource": {
            "type": "boolean",
            "description": "Copy the data source of dashboard based on this value "
          }
        },
        "description": "Dashboard details."
      },
      "ApiCopyDataSourceRequestV4": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Data source name."
          },
          "Description": {
            "type": "string",
            "description": "Data source description."
          }
        },
        "description": "Data Source details."
      },
      "PasswordAuth": {
        "required": [
          "grant_type",
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Email address of the user.",
            "nullable": false
          },
          "password": {
            "type": "string",
            "description": "Password of the user",
            "nullable": false
          },
          "grant_type": {
            "type": "string",
            "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>password</code>",
            "nullable": false
          }
        }
      }
    },
    "securitySchemes": {
      "bearer <token>": {
        "type": "http",
        "description": "JWT token Authentication",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}