{
  "swagger" : "2.0",
  "info" : {
    "title" : "API Reference",
    "version" : "3.0"
  },
  "host" : "onpremise-demo.boldbi.com",
  "basePath" : "/bi/api/site/site1/",
  "schemes" : [ ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "tags" : [ {
    "name" : "Authentication"
  } ],
  "securityDefinitions" : {
    "Bearer" : {
      "type" : "apiKey",
      "name" : "Authorization",
      "in" : "header"
    }
  },
  "security" : [ {
    "Bearer" : [ ]
  } ],
  "paths" : {
    "/token" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Authenticate User",
        "description" : "Authenticate with a user password.",
        "operationId" : "Authentication",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "parameters" : [ {
          "type" : "string",
          "name" : "grant_type",
          "in" : "formData",
          "required" : true,
          "x-nullable" : false,
          "description" : "The type of credentials used to authorize the request for an access token. (Use \"password\")"
        }, {
          "type" : "string",
          "name" : "username",
          "in" : "formData",
          "required" : true,
          "x-nullable" : false,
          "description" : "Email address of the user. (Use guest@boldbi.com for this demo API)"
        }, {
          "type" : "string",
          "name" : "password",
          "in" : "formData",
          "required" : true,
          "x-nullable" : false,
          "description" : "Password of the user. (Use Demo759! for this demo API)"
        } ],
        "responses" : {
          "200" : {
            "description" : "User logged in successfully.",
            "schema" : {
              "$ref" : "#/definitions/Response"
            },
            "x-nullable" : true
          },
          "400" : {
            "description" : "Email address is empty"
          },
          "401" : {
            "description" : "Invalid email or password"
          },
          "404" : {
            "description" : "User detail not found."
          },
          "405" : {
            "description" : "Request type was not POST"
          }
        }
      }
    },
    "/v3.0/users": {
      "get": {
        "tags": [ "Users" ],
        "summary": "Get Users",
        "description": "Retrieves the list of user details.",
        "operationId": "Users_GetUsers",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of user details was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiUserListV3"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "204": {
            "description": "User list is empty."
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      }
    },
    "/v3.0/users/{user}": {
      "get": {
        "tags": [ "Users" ],
        "summary": "Get a User by Email",
        "description": "Retrieves the particular user detail.",
        "operationId": "Users_GetUserDetail",
        "parameters": [
          {
            "type": "string",
            "name": "user",
            "in": "path",
            "required": true,
            "description": "Email address of the user",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "User detail was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiUserDetailV3"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "User detail not found."
          },
          "405": {
            "description": "Request type was not GET"
          },
          "417": {
            "description": "Failed to retrieve user detail"
          }
        }
      }
    },
    "/v3.0/groups": {
      "get": {
        "tags": [ "Groups" ],
        "summary": "Get Groups",
        "description": "Retrieves the list of group details.",
        "operationId": "Groups_GetGroups",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of groups has been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiGroupListV3"
            }
          },
          "204": {
            "description": "Group list is empty."
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      }
    },
    "/v3.0/dashboards/schedules": {
      "post": {
        "tags": [ "Schedule" ],
        "summary": "Add Dashboard Schedule",
        "description": "Users who have create access to the schedule can add new dashboard schedule.",
        "operationId": "Dashboards_AddSchedule",
        "parameters": [
          {
            "name": "apiScheduleRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiScheduleRequest"
            },
            "description": "Details about the schedule passed will be added.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The schedule was created successfully.",
            "schema": {
              "$ref": "#/definitions/ApiScheduleResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "417": {
            "description": "Failed to add schedule"
          }
        }
      }
    },
    "/v3.0/dashboards/schedules/{scheduleId}": {
      "put": {
        "tags": [ "Schedule" ],
        "summary": "Update Dashboard Schedule",
        "description": "Users who have write access for schedule can update an existing dashboard schedule.",
        "operationId": "Dashboards_UpdateSchedule",
        "parameters": [
          {
            "type": "string",
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "description": "Schedule ID.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "apiUpdateScheduleRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiUpdateScheduleRequest"
            },
            "description": "Details about the schedule passed will be updated.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The schedule was modified successfully.",
            "schema": {
              "$ref": "#/definitions/ApiScheduleResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "417": {
            "description": "Failed to update schedule"
          }
        }
      }
    }
  },
  "definitions" : {
    "Response" : {
      "type" : "object",
      "x-typeName" : "Response",
      "additionalProperties" : false,
      "properties" : {
        "access_token" : {
          "type" : "string",
          "description" : "Authentication token of the user."
        },
        "token_type" : {
          "type" : "string",
          "description" : "Type of token assigned by the authorization server."
        },
        "expires_in" : {
          "type" : "string",
          "description" : "The lifetime in seconds of the access token."
        },
        "Email" : {
          "type" : "string",
          "description" : "Email of the authenticated user."
        }
      }
    },
    "ApiResponse" : {
      "type" : "object",
      "required" : [ "ApiStatus", "Status" ],
      "properties" : {
        "ApiStatus" : {
          "type" : "boolean",
          "description" : "Returns the status of the API."
        },
        "Data" : {
          "description" : "Returns data from the API."
        },
        "Status" : {
          "type" : "boolean",
          "description" : "Returns status of the API request."
        },
        "StatusMessage" : {
          "type" : "string",
          "description" : "Returns the status message from the API."
        },
        "Message" : {
          "type" : "string",
          "description" : "Returns the message from the API."
        }
      }
    },
    "ApiUserDetailV3": {
      "type": "object",
      "description": "Detail of the User",
      "additionalProperties": false,
      "properties": {
        "ContactNumber": {
          "type": "string",
          "description": "Phone number of the user"
        },
        "DisplayName": {
          "type": "string",
          "description": "Display name of the user"
        },
        "Email": {
          "type": "string",
          "description": "Email address of the user"
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true, if the user is an active user"
        },
        "Lastname": {
          "type": "string",
          "description": "Last name of the user"
        },
        "UserStatus": {
          "description": "Returns the status of the user",
          "$ref": "#/definitions/UserStatus"
        },
        "UserId": {
          "type": "integer",
          "description": "ID of the user",
          "format": "int32"
        },
        "Username": {
          "type": "string",
          "description": "Username of the user"
        },
        "DirectoryType": {
          "$ref": "#/definitions/DirectoryType"
        },
        "Avatar": {
          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
          "type": "string",
          "description": "Profile picture of the user",
          "format": "byte"
        }
      }
    },
    "UserStatus": {
      "type": "string",
      "enum": [ "Active", "InActive" ],
      "x-enumNames": [ "Active", "InActive" ]
    },
    "DirectoryType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "All",
        "Local",
        "AzureAD",
        "ExternalDatabase"
      ],
      "enum": [
        "All",
        "Local",
        "AzureAD",
        "ExternalDatabase"
      ]
    },
    "ApiUserListV3": {
      "type": "object",
      "description": "List of users",
      "additionalProperties": false,
      "properties": {
        "UserList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiUserV3"
          }
        }
      }
    },
    "ApiUserV3": {
      "type": "object",
      "description": "User detail",
      "additionalProperties": false,
      "properties": {
        "ContactNumber": {
          "type": "string",
          "description": "Phone number of the user."
        },
        "DisplayName": {
          "type": "string",
          "description": "Display name of the user."
        },
        "Email": {
          "type": "string",
          "description": "Email address of the user."
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true, if the user is an active user."
        },
        "DirectoryType": {
          "$ref": "#/definitions/DirectoryType"
        },
        "Lastname": {
          "type": "string",
          "description": "Last name of the user."
        },
        "UserId": {
          "type": "integer",
          "description": "ID of the user.",
          "format": "int32"
        },
        "Username": {
          "type": "string",
          "description": "Username of the user."
        },
        "UserStatus": {
          "description": "Returns the status of the user.",
          "allOf": [
            {
              "$ref": "#/definitions/UserStatus"
            }
          ]
        }
      }
    },
    "ApiGroupListV3": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "GroupList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiGroupV3"
          }
        }
      }
    },
    "ApiGroupV3": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Description": {
          "type": "string",
          "description": "Description of the group."
        },
        "Id": {
          "type": "integer",
          "description": "ID of the group.",
          "format": "int32"
        },
        "DirectoryType": {
          "$ref": "#/definitions/DirectoryType"
        },
        "Name": {
          "type": "string",
          "description": "Name of the group."
        },
        "UserCount": {
          "type": "integer",
          "description": "User(s) count",
          "format": "int32"
        }
      }
    },
    "ApiScheduleRequest": {
      "type": "object",
      "description": "Details about the schedule passed will be added.",
      "additionalProperties": false,
      "required": [
        "Name",
        "ItemId",
        "ExportType",
        "StartTime",
        "NeverEnd",
        "ScheduleType",
        "UserList",
        "GroupList",
        "ExternalRecipientsList"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Schedule name."
        },
        "ItemId": {
          "type": "string",
          "description": "Item ID.",
          "format": "guid"
        },
        "ExportType": {
          "type": "string",
          "description": "Specifies the export type to schedule the dashboard. Valid values: `Excel` `Image` `Pdf`."
        },
        "StartTime": {
          "type": "string",
          "description": "Specifies the UTC start date-time of schedule. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
        },
        "NeverEnd": {
          "type": "boolean",
          "description": "When set to true, it creates a schedule with no end.\n\n Note: By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
        },
        "EndAfterOccurrence": {
          "type": "integer",
          "description": "Specifies the number of occurrences after which the schedule will be completed. \n\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
          "format": "int32"
        },
        "EndDate": {
          "type": "string",
          "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed.<br /><br />The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.\n\n For example: If you provide an end date-time, the schedule will end when the end date-time is reached."
        },
        "UserList": {
          "type": "array",
          "description": "Provides the list of email addresses or user IDs to the recipients who will get the schedules.",
          "items": {
            "type": "string"
          }
        },
        "GroupList": {
          "type": "array",
          "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ExternalRecipientsList": {
          "type": "array",
          "description": "Provides the list of email addresses to the email recipients who will get the schedules. ",
          "items": {
            "type": "string"
          }
        },
        "ScheduleType": {
          "type": "string",
          "description": "Specifies the schedule type to schedule the dashboard. Valid values: `Hourly` `Daily` `Weekly` `Monthly` `Yearly`. \n\n Note: If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
        },
        "HourlySchedule": {
          "description": "Runs the schedules on an hourly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiHourlySchedule"
            }
          ]
        },
        "DailySchedule": {
          "description": "Runs the schedules on a daily basis. ",
          "allOf": [
            {
              "$ref": "#/definitions/ApiDailySchedule"
            }
          ]
        },
        "WeeklySchedule": {
          "description": "Runs the schedule on a weekly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiWeeklySchedule"
            }
          ]
        },
        "MonthlySchedule": {
          "description": "Runs the schedule on a monthly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlySchedule"
            }
          ]
        },
        "YearlySchedule": {
          "description": "Runs the schedules on a yearly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlySchedule"
            }
          ]
        }
      }
    },
    "ApiHourlySchedule": {
      "type": "object",
      "description": "Runs the schedules on an hourly basis.",
      "additionalProperties": false,
      "required": [
        "ScheduleInterval"
      ],
      "properties": {
        "ScheduleInterval": {
          "type": "string",
          "description": "Specifies the hour interval. Based on this interval, the schedule will run continuously until the end time.<br /><br />The format should be `HH:mm`."
        }
      }
    },
    "ApiDailySchedule": {
      "type": "object",
      "description": "Runs the schedules on a daily basis. \n            ",
      "additionalProperties": false,
      "required": [
        "RecurrenceType",
        "EveryNdays",
        "EveryWeekday"
      ],
      "properties": {
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.<br /><br />Valid values: `EveryNdays` `EveryWeekday`.\n\n Note: If you choose the recurrence type as EveryNdays, provide a value to the `EveryNdays` property, and leave the (EveryWeekday) property empty."
        },
        "EveryNdays": {
          "type": "integer",
          "description": "Specifies the day interval the schedule recurs. \n\n For example: If you provide 2, the schedule recurs every 2 days.",
          "format": "int32"
        },
        "EveryWeekday": {
          "type": "boolean",
          "description": "For the schedule to recur every working day, set to true."
        }
      }
    },
    "ApiWeeklySchedule": {
      "type": "object",
      "description": "Runs the schedule on a weekly basis.",
      "additionalProperties": false,
      "required": [
        "RecurrenceWeeks",
        "RecurrenceDays"
      ],
      "properties": {
        "RecurrenceWeeks": {
          "type": "integer",
          "description": "Specifies the week interval the schedule recurs. \n\n For example: If you provide 2, the schedule will recur every 2 weeks.  ",
          "format": "int32"
        },
        "RecurrenceDays": {
          "type": "array",
          "description": "Specifies the list of days the schedule recurs.<br /><br />Valid values `Sunday` `Monday` `Tuesday` `Wednesday` `Thursday` `Friday` `Saturday`. \n\n For example: If you provide `Sunday`, the schedule will recur sunday's of every 2 weeks.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApiMonthlySchedule": {
      "type": "object",
      "description": "Runs the schedule on a monthly basis.",
      "additionalProperties": false,
      "required": [
        "RecurrenceType"
      ],
      "properties": {
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs on a day basis or on the customized day basis.<br /><br />Valid values: `DayRecurrence` `CustomRecurrence` \n\n Note: If you choose the recurrence type as DayRecurrence, provide a value to the `DayRecurrence` property and leave the (CustomRecurrence) property empty."
        },
        "DayRecurrence": {
          "description": "The schedule recurs on the day specified on the month interval.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlyScheduleDayRecurrence"
            }
          ]
        },
        "CustomRecurrence": {
          "description": "The schedule recurs on the customized day of the specified month interval.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlyScheduleCustomRecurrence"
            }
          ]
        }
      }
    },
    "ApiMonthlyScheduleDayRecurrence": {
      "type": "object",
      "description": "The schedule recurs on the day specified on the month interval.",
      "additionalProperties": false,
      "required": [
        "DayInterval",
        "MonthInterval"
      ],
      "properties": {
        "DayInterval": {
          "type": "integer",
          "description": "Specifies the number of day interval the schedule recurs. \n\n For example: If you provide 10, the schedule will recur every 10th day. ",
          "format": "int32"
        },
        "MonthInterval": {
          "type": "integer",
          "description": "Specifies the number of month interval the schedule recurs. \n\n For example: If you provide 3, the schedule will recur 10th day of every 3 months.",
          "format": "int32"
        }
      }
    },
    "ApiMonthlyScheduleCustomRecurrence": {
      "type": "object",
      "description": "The schedule recurs on the customized day of the specified month interval.",
      "additionalProperties": false,
      "required": [
        "WeekOfMonth",
        "DayOfWeek",
        "MonthInterval"
      ],
      "properties": {
        "WeekOfMonth": {
          "type": "string",
          "description": "Specifies the week of the month the schedule recurs.<br /><br />Valid values: `first` `second` `third` `fourth` `last`. \n\n For example: If you provide second, the schedule will recur on the second week."
        },
        "DayOfWeek": {
          "type": "string",
          "description": "Specifies the day of the week the schedule recurs.<br /><br />Valid values: `day` `weekday` `weekendday` `Sunday` `Monday` `Tuesday` <br /><br />`Wednesday` `Thursday` `Friday` `Saturday`. \n\n For example: If you provide Sunday, the schedule will recur on the second week of sunday."
        },
        "MonthInterval": {
          "type": "integer",
          "description": "Specifies the number of month interval the schedule recurs. \n\n For example: If you provide 5, the schedule will recur second week of sunday's of every 5 months.",
          "format": "int32"
        }
      }
    },
    "ApiYearlySchedule": {
      "type": "object",
      "description": "Runs the schedules on a yearly basis.",
      "additionalProperties": false,
      "required": [
        "YearInterval",
        "RecurrenceType"
      ],
      "properties": {
        "YearInterval": {
          "type": "integer",
          "description": "Specifies the number of years the schedule recurs. \n\n For example: If you provide 5, the schedule will recur every 5 years.",
          "format": "int32"
        },
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs on a month basis or on the customized month basis.<br /><br />Valid values: `MonthRecurrence` `CustomRecurrence`. \n\n Note: If you choose the recurrence type as MonthRecurrence, provide a value to the `MonthRecurrence` property, and leave the (CustomRecurrence) property empty."
        },
        "MonthRecurrence": {
          "description": "The schedule recurs on the month and number of years specified in `YearInterval` property.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlyScheduleMonthRecurrence"
            }
          ]
        },
        "CustomRecurrence": {
          "description": "The schedule recurs in the customized month based on the number of years provided in the `YearInterval` property.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlyScheduleCustomRecurrence"
            }
          ]
        }
      }
    },
    "ApiYearlyScheduleMonthRecurrence": {
      "type": "object",
      "description": "The schedule recurs on the month and number of years specified in `YearInterval` property.",
      "additionalProperties": false,
      "required": [
        "MonthOfYear",
        "DayOfMonth"
      ],
      "properties": {
        "MonthOfYear": {
          "type": "string",
          "description": "Specifies the month the schedule recurs.<br /><br />Valid values: `January` `February` `March` `April` `May` `June` `July` <br /><br />`August` `September` `October` `November` `December`. \n\n For example: If you provide April, the schedule will recur in April of every year. Here, the (year) is the value provided in the `YearInterval` property."
        },
        "DayOfMonth": {
          "type": "integer",
          "description": "Specifies the day of the month the schedule recurs. \n\n For example: If you provide 20, the schedule will recur 20th April of every year.  Here, the (year) is the value provided in the `YearInterval` property.",
          "format": "int32"
        }
      }
    },
    "ApiYearlyScheduleCustomRecurrence": {
      "type": "object",
      "description": "The schedule recurs in the customized month based on the number of years provided in the `YearInterval` property.",
      "additionalProperties": false,
      "required": [
        "WeekOfMonth",
        "DayOfWeek",
        "MonthOfYear"
      ],
      "properties": {
        "WeekOfMonth": {
          "type": "string",
          "description": "Specifies the week of the month the schedule recurs.<br /><br />Valid values: `first` `second` `third` `fourth` `last`. \n\n For example: If you provide second, the schedule will recur on the second week."
        },
        "DayOfWeek": {
          "type": "string",
          "description": "Specifies the day of week the schedule recurs.<br /><br />Valid values: `day` `weekday` `weekendday` `Sunday` `Monday` `Tuesday` <br /><br />`Wednesday` `Thursday` `Friday` `Saturday`.\n\n For example: If you provide Sunday, the schedule will recur on every sunday's of the second week."
        },
        "MonthOfYear": {
          "type": "string",
          "description": "Specifies the month the schedule recurs.<br /><br />Valid values: `January` `February` `March` `April` `May` `June` `July` <br /><br />`August` `September` `October` `November` `December`. \n\n For example: If you provide March, the schedule will recur on the sunday's of the second week of March every year. Here, the (year) is the value provided in the `YearInterval` property."
        }
      }
    },
    "ApiScheduleResponse": {
      "type": "object",
      "description": "Response details of created schedules.",
      "additionalProperties": false,
      "properties": {
        "ScheduleName": {
          "type": "string",
          "description": "Returns the schedule name."
        },
        "ScheduleId": {
          "type": "string",
          "description": "Returns the schedule ID.",
          "format": "guid"
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "ScheduleType": {
          "type": "string",
          "description": "Returns the schedule type."
        },
        "NextRun": {
          "type": "string",
          "description": "Returns the schedule’s next run."
        }
      }
    },
    "ApiUpdateScheduleRequest": {
      "type": "object",
      "description": "Details about the schedule passed will be updated.",
      "additionalProperties": false,
      "required": [
        "ItemId",
        "ExportType",
        "ScheduleType",
        "StartTime",
        "NeverEnd"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Schedule name."
        },
        "ItemId": {
          "type": "string",
          "description": "Item ID.",
          "format": "guid"
        },
        "ExportType": {
          "type": "string",
          "description": "Specifies the export type to schedule the report. Valid values: `Excel` `Image` `Pdf`."
        },
        "Description": {
          "type": "string",
          "description": "File description"
        },
        "StartTime": {
          "type": "string",
          "description": "Specifies the UTC start date-time of schedule. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
        },
        "NeverEnd": {
          "type": "boolean",
          "description": "When set to true, it creates a schedule with no end.\n\n Note: By default, the NeverEnd is set to true. To set the end time for schedule, fill in the EndAfterOccurrence or EndDate properties; otherwise they remains empty."
        },
        "EndAfterOccurrence": {
          "type": "integer",
          "description": "Specifies the number of occurrences after which the schedule will be completed. \n\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
          "format": "int32"
        },
        "EndDate": {
          "type": "string",
          "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed.<br /><br />The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.\n\n For example: If you provide an end date-time, the schedule will end when the end date-time is reached."
        },
        "UserList": {
          "type": "array",
          "description": "Provides the list of email addresses or user IDs to the recipients who will get the schedules.",
          "items": {
            "type": "string"
          }
        },
        "GroupList": {
          "type": "array",
          "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ExternalRecipientsList": {
          "type": "array",
          "description": "Provides the list of email addresses to the email recipients who will get the schedules. ",
          "items": {
            "type": "string"
          }
        },
        "RemoveUserList": {
          "type": "array",
          "description": "Provides the list of email addresses or user IDs to remove recipients from the schedule subscriptions.",
          "items": {
            "type": "string"
          }
        },
        "RemoveGroupList": {
          "type": "array",
          "description": "Provides the list of group IDs to remove groups from the schedule subscriptions.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "RemoveExternalRecipientsList": {
          "type": "array",
          "description": "Provides the list of email addresses for removing email recipients from the schedule subscriptions.",
          "items": {
            "type": "string"
          }
        },
        "ScheduleType": {
          "type": "string",
          "description": "Specifies the schedule type to schedule the dashboard. Valid values: `Hourly` `Daily` `Weekly` `Monthly` `Yearly`. \n\n Note: If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) property empty."
        },
        "HourlySchedule": {
          "description": "Runs the schedules on an hourly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiHourlySchedule"
            }
          ]
        },
        "DailySchedule": {
          "description": "Runs the schedules on a daily basis. ",
          "allOf": [
            {
              "$ref": "#/definitions/ApiDailySchedule"
            }
          ]
        },
        "WeeklySchedule": {
          "description": "Runs the schedule on a weekly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiWeeklySchedule"
            }
          ]
        },
        "MonthlySchedule": {
          "description": "Runs the schedule on a monthly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlySchedule"
            }
          ]
        },
        "YearlySchedule": {
          "description": "Runs the schedules on a yearly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlySchedule"
            }
          ]
        }
      }
    },
    "ApiScheduledItemDetail": {
      "type": "object",
      "description": "Details of schedule items.",
      "additionalProperties": false,
      "properties": {
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator.",
          "format": "int32"
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in string format."
        },
        "ExportType": {
          "type": "string",
          "description": "Specifies the export type to schedule the report. Valid values: `Excel` `Image` `Pdf`."
        },
        "EndDate": {
          "type": "string",
          "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.\n\n For example: If you provide an end date-time, the schedule will end when the end date-time is reached."
        },
        "ExportTypeId": {
          "type": "integer",
          "description": "Specifies the export type id of schedule.",
          "format": "int32"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true, if the schedule is active."
        },
        "IsEnabled": {
          "type": "boolean",
          "description": "Returns true, if the schedule is enabled."
        },
        "ItemType": {
          "type": "string",
          "description": "Item type. Valid values: `\"Schedule\"`"
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in string format."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format": "int32"
        },
        "NextSchedule": {
          "type": "string",
          "description": "Specifies the Next scheduled date and time."
        },
        "RecurrenceInfo": {
          "type": "string",
          "description": "Specifies the recurrence information of the schedule."
        },
        "RecurrenceTypeId": {
          "type": "string",
          "description": "Specifies the schedule type to schedule the dashboard. Valid values: `Hourly` `Daily` `Weekly` `Monthly` `Yearly`. \n\n Note: If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
        },
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.  Valid values: `EveryNdays` `EveryWeekday`. \n\n Note: If you choose the recurrence type as EveryNdays, provide a value to the `EveryNdays` property, and leave the (EveryWeekday) property empty."
        },
        "DashboardId": {
          "type": "string",
          "description": "Dashboard ID.",
          "format": "guid"
        },
        "DashboardName": {
          "type": "string",
          "description": "Dashboard name."
        },
        "ScheduleId": {
          "type": "string",
          "description": "Schedule ID.",
          "format": "guid"
        },
        "ScheduleName": {
          "type": "string",
          "description": "Schedule name."
        },
        "StartDate": {
          "type": "string",
          "description": "Specifies the start date of the schedule."
        },
        "NeverEnd": {
          "type": "boolean",
          "description": "When set to true, it creates a schedule with no end.\n\n Note: By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
        },
        "EndAfterOccurrence": {
          "type": "integer",
          "description": "Specifies the number of occurrences after which the schedule will be completed. \n\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
          "format": "int32"
        },
        "UserList": {
          "type": "array",
          "description": "Provides the list of email addresses or user IDs to the recipients who will get the schedules.",
          "items": {
            "type": "string"
          }
        },
        "GroupList": {
          "type": "array",
          "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ExternalRecipientsList": {
          "type": "array",
          "description": "Provides the list of email addresses to the email recipients who will get the schedules. ",
          "items": {
            "type": "string"
          }
        },
        "HourlySchedule": {
          "description": "Runs the schedules on an hourly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiHourlySchedule"
            }
          ]
        },
        "DailySchedule": {
          "description": "Runs the schedules on a daily basis. ",
          "allOf": [
            {
              "$ref": "#/definitions/ApiDailySchedule"
            }
          ]
        },
        "WeeklySchedule": {
          "description": "Runs the schedule on a weekly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiWeeklySchedule"
            }
          ]
        },
        "MonthlySchedule": {
          "description": "Runs the schedule on a monthly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlySchedule"
            }
          ]
        },
        "YearlySchedule": {
          "description": "Runs the schedules on a yearly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlySchedule"
            }
          ]
        }
      }
    }
  },
  "parameters" : { },
  "responses" : { }
}