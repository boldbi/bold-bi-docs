{
  "openapi": "3.0.1",
  "info": {
    "title": "API Reference",
    "description": {
      "$ref": "./../../../common/api-reference/introduction.md"
    },
    "version": "3.0"
  },
  "servers": [
    {
      "url": "https://{yourdomain}/bi/api/site/<site_identifier>"
    }
  ],
  "security": [
    {
      "bearer <token>": []
    }
  ],
  "tags": [
    {
      "name": "Interact with our REST API",
      "description": {
        "$ref": "./helperswagger.json#/tryitnow/tryitnowdescription"
      }
    },
    {
      "name": "Password Authentication",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/authentication/getauthenticationdescription"
      }
    },
    {
      "name": "Users",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/userdescription/getusersdescription"
      }
    },
    {
      "name": "Groups",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/groupdescription/getgroupsdescription"
      }
    },
    {
      "name": "Schedule",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/scheduledescription/getscheduledescription"
      }
    }
  ],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "Password Authentication"
        ],
        "summary": "Authenticate User",
        "description": "Authenticate with a user password.",
        "operationId": "PasswordAuthentication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordAuth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User logged in successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Email address is empty.",
            "content": {}
          },
          "401": {
            "description": "Invalid email or password.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          }
        }
      }
    },
    "/v3.0/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Users",
        "description": "Retrieves the list of user details.",
        "operationId": "Users_GetUsers",
        "responses": {
          "200": {
            "description": "List of user details has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserListV3"
                }
              }
            }
          },
          "204": {
            "description": "User list is empty.",
            "content": {}
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v3.0/users/{user}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a User by Email",
        "description": "Retrieves the particular user detail.",
        "operationId": "Users_GetUserDetail",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Email address of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserDetailV3"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve user detail.",
            "content": {}
          }
        }
      }
    },
    "/v3.0/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Groups",
        "description": "Retrieves the list of group details.",
        "operationId": "Groups_GetGroups",
        "responses": {
          "200": {
            "description": "List of groups has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGroupListV3"
                }
              }
            }
          },
          "204": {
            "description": "Group list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v3.0/dashboards/schedules": {
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Add Dashboard Schedule",
        "description": "Users who have create access to the schedule can add new dashboard schedule.",
        "operationId": "Dashboards_AddSchedule",
        "requestBody": {
          "description": "Details about the schedule passed will be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The schedule was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add schedule.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiScheduleRequest"
      }
    },
    "/v3.0/dashboards/schedules/{scheduleId}": {
      "put": {
        "tags": [
          "Schedule"
        ],
        "summary": "Update Dashboard Schedule",
        "description": "Users who have write access for schedule can update an existing dashboard schedule.",
        "operationId": "Dashboards_UpdateSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Details about the schedule passed will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The schedule was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update schedule.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUpdateScheduleRequest"
      }
    }
  },
  "components": {
    "schemas": {
      "Response": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Authentication token of the user."
          },
          "token_type": {
            "type": "string",
            "description": "Type of token assigned by the authorization server."
          },
          "expires_in": {
            "type": "string",
            "description": "The lifetime in seconds of the access token."
          },
          "Email": {
            "type": "string",
            "description": "Email of the authenticated user."
          }
        },
        "x-typeName": "Response"
      },
      "ApiResponse": {
        "required": [
          "ApiStatus",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "object",
            "description": "Returns data from the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
      "ApiUserDetailV3": {
        "type": "object",
        "properties": {
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user"
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user"
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user"
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user"
          },
          "UserStatus": {
            "description": "Returns the status of the user",
            "$ref": "#/components/schemas/UserStatus"
          },
          "UserId": {
            "type": "integer",
            "description": "ID of the user",
            "format": "int32"
          },
          "Username": {
            "type": "string",
            "description": "Username of the user"
          },
          "DirectoryType": {
            "$ref": "#/components/schemas/DirectoryType"
          },
          "Avatar": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Profile picture of the user",
            "format": "byte"
          }
        },
        "description": "Detail of the User"
      },
      "UserStatus": {
        "type": "string",
        "enum": [ "Active", "InActive" ],
        "x-enumNames": [ "Active", "InActive" ]
      },
      "DirectoryType": {
        "type": "string",
        "enum": [
          "All",
          "Local",
          "AzureAD",
          "ExternalDatabase"
        ],
        "x-enumNames": [
          "All",
          "Local",
          "AzureAD",
          "ExternalDatabase"
        ]
      },
      "ApiUserListV3": {
        "type": "object",
        "properties": {
          "UserList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUserV3"
            }
          }
        },
        "description": "List of users"
      },
      "ApiUserV3": {
        "type": "object",
        "properties": {
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user."
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user."
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user."
          },
          "DirectoryType": {
            "$ref": "#/components/schemas/DirectoryType"
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user."
          },
          "UserId": {
            "type": "integer",
            "description": "ID of the user.",
            "format": "int32"
          },
          "Username": {
            "type": "string",
            "description": "Username of the user."
          },
          "UserStatus": {
            "description": "Returns the status of the user.",
            "$ref": "#/components/schemas/UserStatus"
          }
        },
        "description": "User detail"
      },
      "ApiGroupListV3": {
        "type": "object",
        "properties": {
          "GroupList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiGroupV3"
            }
          }
        }
      },
      "ApiGroupV3": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of the group."
          },
          "Id": {
            "type": "integer",
            "description": "ID of the group.",
            "format": "int32"
          },
          "DirectoryType": {
            "$ref": "#/components/schemas/DirectoryType"
          },
          "Name": {
            "type": "string",
            "description": "Name of the group."
          },
          "UserCount": {
            "type": "integer",
            "description": "User(s) count",
            "format": "int32"
          }
        }
      },
      "ApiScheduleRequest": {
        "required": [
          "ExportType",
          "ItemId",
          "Name",
          "NeverEnd",
          "ScheduleType",
          "StartTime",
          "UserList",
          "GroupList",
          "ExternalRecipientsList"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Schedule name."
          },
          "ItemId": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "ExportType": {
            "type": "string",
            "description": "Specifies the export type to schedule the dashboard.<br />Values allowed are <code>Excel, Pdf, Image</code>"
          },
          "StartTime": {
            "type": "string",
            "description": "Specifies the UTC start date-time of schedule. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
          },
          "NeverEnd": {
            "type": "boolean",
            "description": "When set to true, it creates a schedule with no end.\n\n**Note:** By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
          },
          "EndAfterOccurrence": {
            "type": "integer",
            "description": "Specifies the number of occurrences after which the schedule will be completed.\n\n**For example:** If you provide 5, the schedule will end after the completion of 5 occurrences.",
            "format": "int32"
          },
          "EndDate": {
            "type": "string",
            "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.\n\n**For example:** If you provide an end date-time, the schedule will end when the end date-time is reached."
          },
          "UserList": {
            "type": "array",
            "description": "Provides the list of email addresses or user IDs to the recipients who will get the schedules.",
            "items": {
              "type": "string"
            }
          },
          "GroupList": {
            "type": "array",
            "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ExternalRecipientsList": {
            "type": "array",
            "description": "Provides the list of email addresses to the email recipients who will get the schedules. ",
            "items": {
              "type": "string"
            }
          },
          "ScheduleType": {
            "type": "string",
            "description": "Specifies the schedule type to schedule the dashboard.<br />Values allowed are <code>Hourly, Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
          },
          "HourlySchedule": {
            "type": "object",
            "description": "Runs the schedules on an hourly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiHourlySchedule"
              }
            ]
          },
          "DailySchedule": {
            "type": "object",
            "description": "Runs the schedules on a daily basis. ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiDailySchedule"
              }
            ]
          },
          "WeeklySchedule": {
            "type": "object",
            "description": "Runs the schedule on a weekly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiWeeklySchedule"
              }
            ]
          },
          "MonthlySchedule": {
            "type": "object",
            "description": "Runs the schedule on a monthly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlySchedule"
              }
            ]
          },
          "YearlySchedule": {
            "type": "object",
            "description": "Runs the schedules on a yearly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlySchedule"
              }
            ]
          }
        },
        "description": "Details about the schedule passed will be added."
      },
      "ApiHourlySchedule": {
        "required": [
          "ScheduleInterval"
        ],
        "type": "object",
        "properties": {
          "ScheduleInterval": {
            "type": "string",
            "description": "Specifies the hour interval. Based on this interval, the schedule will run continuously until the end time. The format should be `HH:mm`"
          }
        },
        "description": "Runs the schedules on an hourly basis."
      },
      "ApiDailySchedule": {
        "required": [
          "EveryNdays",
          "EveryWeekday",
          "RecurrenceType"
        ],
        "type": "object",
        "properties": {
          "RecurrenceType": {
            "type": "string",
            "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.<br />Values allowed are <code>EveryNdays, EveryWeekday</code>\n\n**Note:** If you choose the recurrence type as EveryNdays, provide a value to the `EveryNdays` property, and leave the (EveryWeekday) property empty."
          },
          "EveryNdays": {
            "type": "integer",
            "description": "Specifies the day interval the schedule recurs.\n\n**For example:** If you provide 2, the schedule recurs every 2 days.",
            "format": "int32"
          },
          "EveryWeekday": {
            "type": "boolean",
            "description": "For the schedule to recur every working day, set to true."
          }
        },
        "description": "Runs the schedules on a daily basis."
      },
      "ApiWeeklySchedule": {
        "required": [
          "RecurrenceDays",
          "RecurrenceWeeks"
        ],
        "type": "object",
        "properties": {
          "RecurrenceWeeks": {
            "type": "integer",
            "description": "Specifies the week interval the schedule recurs.\n\n**For example:** If you provide 2, the schedule will recur every 2 weeks.  ",
            "format": "int32"
          },
          "RecurrenceDays": {
            "type": "array",
            "description": "Specifies the list of days the schedule recurs.<br />Values allowed are <code>Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</code>\n\n**For example:** If you provide `Sunday`, the schedule will recur sunday's of every 2 weeks.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Runs the schedule on a weekly basis."
      },
      "ApiMonthlySchedule": {
        "required": [
          "RecurrenceType"
        ],
        "type": "object",
        "properties": {
          "RecurrenceType": {
            "type": "string",
            "description": "Specifies the recurrence type, whether the schedule recurs on a day basis or on the customized day basis.<br />Values allowed are <code>DayRecurrence, CustomRecurrence</code>\n\n**Note:** If you choose the recurrence type as DayRecurrence, provide a value to the `DayRecurrence` property and leave the (CustomRecurrence) property empty."
          },
          "DayRecurrence": {
            "type": "object",
            "description": "The schedule recurs on the day specified on the month interval.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlyScheduleDayRecurrence"
              }
            ]
          },
          "CustomRecurrence": {
            "type": "object",
            "description": "The schedule recurs on the customized day of the specified month interval.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlyScheduleCustomRecurrence"
              }
            ]
          }
        },
        "description": "Runs the schedule on a monthly basis."
      },
      "ApiMonthlyScheduleDayRecurrence": {
        "required": [
          "DayInterval",
          "MonthInterval"
        ],
        "type": "object",
        "properties": {
          "DayInterval": {
            "type": "integer",
            "description": "Specifies the number of day interval the schedule recurs.\n\n**For example:** If you provide 10, the schedule will recur every 10th day. ",
            "format": "int32"
          },
          "MonthInterval": {
            "type": "integer",
            "description": "Specifies the number of month interval the schedule recurs.\n\n**For example:** If you provide 3, the schedule will recur 10th day of every 3 months.",
            "format": "int32"
          }
        },
        "description": "The schedule recurs on the day specified on the month interval."
      },
      "ApiMonthlyScheduleCustomRecurrence": {
        "required": [
          "DayOfWeek",
          "MonthInterval",
          "WeekOfMonth"
        ],
        "type": "object",
        "properties": {
          "WeekOfMonth": {
            "type": "string",
            "description": "Specifies the week of the month the schedule recurs.<br />Values allowed are <code>first, second, third, fourth, last</code>\n\n**For example:** If you provide second, the schedule will recur on the second week."
          },
          "DayOfWeek": {
            "type": "string",
            "description": "Specifies the day of the week the schedule recurs.<br />Values allowed are <code>day, weekday, weekendday, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</code>\n\n**For example:** If you provide Sunday, the schedule will recur on the second week of sunday."
          },
          "MonthInterval": {
            "type": "integer",
            "description": "Specifies the number of month interval the schedule recurs.\n\n**For example:** If you provide 5, the schedule will recur second week of sunday's of every 5 months.",
            "format": "int32"
          }
        },
        "description": "The schedule recurs on the customized day of the specified month interval."
      },
      "ApiYearlySchedule": {
        "required": [
          "RecurrenceType",
          "YearInterval"
        ],
        "type": "object",
        "properties": {
          "YearInterval": {
            "type": "integer",
            "description": "Specifies the number of years the schedule recurs.\n\n**For example:** If you provide 5, the schedule will recur every 5 years.",
            "format": "int32"
          },
          "RecurrenceType": {
            "type": "string",
            "description": "Specifies the recurrence type, whether the schedule recurs on a month basis or on the customized month basis.<br />Values allowed are <code>MonthRecurrence, CustomRecurrence</code>\n\n**Note:** If you choose the recurrence type as MonthRecurrence, provide a value to the `MonthRecurrence` property, and leave the (CustomRecurrence) property empty."
          },
          "MonthRecurrence": {
            "type": "object",
            "description": "The schedule recurs on the month and number of years specified in `YearInterval` property.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlyScheduleMonthRecurrence"
              }
            ]
          },
          "CustomRecurrence": {
            "type": "object",
            "description": "The schedule recurs in the customized month based on the number of years provided in the `YearInterval` property.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlyScheduleCustomRecurrence"
              }
            ]
          }
        },
        "description": "Runs the schedules on a yearly basis."
      },
      "ApiYearlyScheduleMonthRecurrence": {
        "required": [
          "DayOfMonth",
          "MonthOfYear"
        ],
        "type": "object",
        "properties": {
          "MonthOfYear": {
            "type": "string",
            "description": "Specifies the month the schedule recurs.<br />Values allowed are <code>January, February, March, April, May, June, July, August, September, October, November, December</code>\n\n**For example:** If you provide April, the schedule will recur in April of every year. Here, the (year) is the value provided in the `YearInterval` property."
          },
          "DayOfMonth": {
            "type": "integer",
            "description": "Specifies the day of the month the schedule recurs.\n\n**For example:** If you provide 20, the schedule will recur 20th April of every year.  Here, the (year) is the value provided in the `YearInterval` property.",
            "format": "int32"
          }
        },
        "description": "The schedule recurs on the month and number of years specified in `YearInterval` property."
      },
      "ApiYearlyScheduleCustomRecurrence": {
        "required": [
          "DayOfWeek",
          "MonthOfYear",
          "WeekOfMonth"
        ],
        "type": "object",
        "properties": {
          "WeekOfMonth": {
            "type": "string",
            "description": "Specifies the week of the month the schedule recurs.<br />Values allowed are <code>first, second, third, fourth, last</code>\n\n**For example:** If you provide second, the schedule will recur on the second week."
          },
          "DayOfWeek": {
            "type": "string",
            "description": "Specifies the day of week the schedule recurs.<br />Values allowed are <code>day, weekday, weekendday, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</code>\n\n**For example:** If you provide Sunday, the schedule will recur on every sunday's of the second week."
          },
          "MonthOfYear": {
            "type": "string",
            "description": "Specifies the month the schedule recurs.<br />Values allowed are <code>January, February, March, April, May, June, July, August, September, October, November, December</code>\n\n**For example:** If you provide March, the schedule will recur on the sunday's of the second week of March every year. Here, the (year) is the value provided in the `YearInterval` property."
          }
        },
        "description": "The schedule recurs in the customized month based on the number of years provided in the `YearInterval` property."
      },
      "ApiScheduleResponse": {
        "type": "object",
        "properties": {
          "ScheduleName": {
            "type": "string",
            "description": "Returns the schedule name."
          },
          "ScheduleId": {
            "type": "string",
            "description": "Returns the schedule ID.",
            "format": "guid"
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "ScheduleType": {
            "type": "string",
            "description": "Returns the schedule type."
          },
          "NextRun": {
            "type": "string",
            "description": "Returns the schedule’s next run."
          }
        },
        "description": "Response details of created schedules."
      },
      "ApiUpdateScheduleRequest": {
        "required": [
          "ItemId",
          "ExportType",
          "ScheduleType",
          "StartTime",
          "NeverEnd"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Schedule name."
          },
          "ItemId": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "ExportType": {
            "type": "string",
            "description": "Specifies the export type to schedule the dashboard.<br />Values allowed are <code>Excel, Pdf, Image</code>"
          },
          "Description": {
            "type": "string",
            "description": "File description"
          },
          "StartTime": {
            "type": "string",
            "description": "Specifies the UTC start date-time of schedule. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
          },
          "NeverEnd": {
            "type": "boolean",
            "description": "When set to true, it creates a schedule with no end.\n\n**Note:** By default, the NeverEnd is set to true. To set the end time for schedule, fill in the EndAfterOccurrence or EndDate properties; otherwise they remains empty."
          },
          "EndAfterOccurrence": {
            "type": "integer",
            "description": "Specifies the number of occurrences after which the schedule will be completed.\n\n**For example:** If you provide 5, the schedule will end after the completion of 5 occurrences.",
            "format": "int32"
          },
          "EndDate": {
            "type": "string",
            "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.\n\n**For example:** If you provide an end date-time, the schedule will end when the end date-time is reached."
          },
          "UserList": {
            "type": "array",
            "description": "Provides the list of email addresses or user IDs to the recipients who will get the schedules.",
            "items": {
              "type": "string"
            }
          },
          "GroupList": {
            "type": "array",
            "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ExternalRecipientsList": {
            "type": "array",
            "description": "Provides the list of email addresses to the email recipients who will get the schedules. ",
            "items": {
              "type": "string"
            }
          },
          "RemoveUserList": {
            "type": "array",
            "description": "Provides the list of email addresses or user IDs to remove recipients from the schedule subscriptions.",
            "items": {
              "type": "string"
            }
          },
          "RemoveGroupList": {
            "type": "array",
            "description": "Provides the list of group IDs to remove groups from the schedule subscriptions.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "RemoveExternalRecipientsList": {
            "type": "array",
            "description": "Provides the list of email addresses for removing email recipients from the schedule subscriptions.",
            "items": {
              "type": "string"
            }
          },
          "ScheduleType": {
            "type": "string",
            "description": "Specifies the schedule type to schedule the dashboard.<br />Values allowed are <code>Hourly, Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) property empty."
          },
          "HourlySchedule": {
            "type": "object",
            "description": "Runs the schedules on an hourly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiHourlySchedule"
              }
            ]
          },
          "DailySchedule": {
            "type": "object",
            "description": "Runs the schedules on a daily basis. ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiDailySchedule"
              }
            ]
          },
          "WeeklySchedule": {
            "type": "object",
            "description": "Runs the schedule on a weekly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiWeeklySchedule"
              }
            ]
          },
          "MonthlySchedule": {
            "type": "object",
            "description": "Runs the schedule on a monthly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlySchedule"
              }
            ]
          },
          "YearlySchedule": {
            "type": "object",
            "description": "Runs the schedules on a yearly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlySchedule"
              }
            ]
          }
        },
        "description": "Details about the schedule passed will be updated."
      },
      "PasswordAuth": {
        "required": [
          "grant_type",
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Email address of the user.",
            "nullable": false
          },
          "password": {
            "type": "string",
            "description": "Password of the user",
            "nullable": false
          },
          "grant_type": {
            "type": "string",
            "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>password</code>",
            "nullable": false
          }
        }
      }
    },
    "securitySchemes": {
      "bearer <token>": {
        "type": "http",
        "description": "JWT token Authentication",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}