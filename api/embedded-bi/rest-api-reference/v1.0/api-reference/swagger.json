{
  "openapi": "3.0.1",
  "info": {
    "title": "API Reference",
    "description": {
      "$ref": "./../../../common/api-reference/introduction.md"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://{yourdomain}/bi/api/site/<site_identifier>"
    }
  ],
  "security": [
    {
      "bearer <token>": []
    }
  ],
  "tags": [
    {
      "name": "Interact with our REST API",
      "description": {
        "$ref": "./helperswagger.json#/tryitnow/tryitnowdescription"
      }
    },
    {
      "name": "Password Authentication",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/authentication/getauthenticationdescription"
      }
    },
    {
      "name": "Users",
      "description": {
        "$ref": "./helperswagger.json#/userdescription/getusersdescription"
      }
    },
    {
      "name": "Groups",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/groupdescription/getgroupsdescription"
      }
    }
  ],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "Password Authentication"
        ],
        "summary": "Authenticate User",
        "description": "Authenticate with a user password.",
        "operationId": "PasswordAuthentication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordAuth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User logged in successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Email address is empty.",
            "content": {}
          },
          "401": {
            "description": "Invalid email or password.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          }
        }
      }
    },
    "/v1.0/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add User",
        "description": "Adds the new user.",
        "operationId": "Users_AddUser",
        "requestBody": {
          "description": "Detail of the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The user was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Email address already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userDetail"
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Users",
        "description": "Retrieves the list of user details.",
        "operationId": "Users_GetUsers",
        "responses": {
          "200": {
            "description": "List of user details has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserList"
                }
              }
            }
          },
          "204": {
            "description": "User list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v1.0/users/{user}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a User by Email or Username",
        "description": "Retrieves the particular user detail.",
        "operationId": "Users_GetUserDetail",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Username or email address of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserDetail"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve user detail.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "Updates the particular user detail.",
        "operationId": "Users_EditUser",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Email address of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Detail of the user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The user was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userDetail"
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "Deletes the particular user.",
        "operationId": "Users_DeleteUser",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Email address of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Email address is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete user.",
            "content": {}
          }
        }
      }
    },
    "/v1.0/groups": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add Group",
        "description": "Adds the new group to group the users.",
        "operationId": "Groups_AddGroup",
        "requestBody": {
          "description": "Detail of the group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Group name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add group.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "groupDetail"
      },
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Groups",
        "description": "Retrieves the list of group details.",
        "operationId": "Groups_GetGroups",
        "responses": {
          "200": {
            "description": "List of groups has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGroupListV2"
                }
              }
            }
          },
          "204": {
            "description": "Group list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v1.0/groups/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group by Id",
        "description": "Retrieves the particular group detail.",
        "operationId": "Groups_GetGroupDetail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGroupV2"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get group detail.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update Group",
        "description": "Updates the particular group detail.",
        "operationId": "Groups_EditGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Detail of the group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Group name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update group ",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "groupDetail"
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete Group",
        "description": "Deletes the particular group.",
        "operationId": "Groups_DeleteGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "406": {
            "description": "Invalid Group ID.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete the group.",
            "content": {}
          }
        }
      }
    },
    "/v1.0/groups/{id}/users": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group Users",
        "description": "Retrieves the list of user details of the particular group.",
        "operationId": "Groups_GetUsersFromGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of group's users has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserList"
                }
              }
            }
          },
          "204": {
            "description": "User list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "Invalid Group ID.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve the groups' users.",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Response": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Authentication token of the user."
          },
          "token_type": {
            "type": "string",
            "description": "Type of token assigned by the authorization server."
          },
          "expires_in": {
            "type": "string",
            "description": "The lifetime in seconds of the access token."
          },
          "Email": {
            "type": "string",
            "description": "Email of the authenticated user."
          }
        },
        "x-typeName": "Response"
      },
      "ApiResponse": {
        "required": [
          "ApiStatus",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "object",
            "description": "Returns data from the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
      "ApiUserAdd": {
        "required": [
          "Email",
          "FirstName",
          "Password"
        ],
        "type": "object",
        "properties": {
          "Email": {
            "type": "string",
            "description": "Email address of the user (Email required only in [Email required](/embedded-bi/site-administration/account-settings/#email-required) mode)."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user"
          },
          "Password": {
            "type": "string",
            "description": "Password of the user (Password accepted only in [Automatic activation](/embedded-bi/site-administration/account-settings/#automatic-activation) mode)."
          }
        },
        "description": "User detail"
      },
      "ApiUserEdit": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user"
          },
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user"
          }
        },
        "description": "User detail"
      },
      "ApiUserDetail": {
        "type": "object",
        "properties": {
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user"
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user"
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user"
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user"
          },
          "UserStatus": {
            "description": "Returns the status of the user",
            "$ref": "#/components/schemas/UserStatus"
          },
          "UserId": {
            "type": "integer",
            "description": "ID of the user",
            "format": "int32"
          },
          "Username": {
            "type": "string",
            "description": "Username of the user"
          },
          "IsAzureAdUser": {
            "type": "boolean",
            "description": "Returns true, if the user is added from Azure Active Directory."
          }
        },
        "description": "Detail of the User"
      },
      "UserStatus": {
        "type": "string",
        "enum": [ "Active", "InActive" ],
        "x-enumNames": [ "Active", "InActive" ]
      },
      "ApiGroupListV2": {
        "type": "object",
        "properties": {
          "GroupList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiGroupV2"
            }
          }
        }
      },
      "ApiGroupV2": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID of the group.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Description of the group."
          },
          "Description": {
            "type": "string",
            "description": "Description of the group."
          },
          "IsAzureADGroup": {
            "type": "boolean",
            "description": "Returns true, if the group is added from Azure Active Directory."
          }
        },
        "description": "Group detail"
      },
      "ApiGroupAdd": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the group."
          },
          "Description": {
            "type": "string",
            "description": "Description of the group."
          }
        },
        "description": "Group detail"
      },
      "ApiGroupEdit": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the group."
          },
          "Description": {
            "type": "string",
            "description": "Description of the group."
          }
        },
        "description": "Group detail"
      },
      "ApiUserList": {
        "type": "object",
        "properties": {
          "UserList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUser"
            }
          }
        },
        "description": "List of users"
      },
      "ApiUser": {
        "type": "object",
        "properties": {
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user."
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user."
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user."
          },
          "IsAzureAdUser": {
            "type": "boolean",
            "description": "Returns true, if the user is added from Azure Active Directory."
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user."
          },
          "UserId": {
            "type": "integer",
            "description": "ID of the user.",
            "format": "int32"
          },
          "Username": {
            "type": "string",
            "description": "Username of the user."
          },
          "UserStatus": {
            "description": "Returns the status of the user.",
            "$ref": "#/components/schemas/UserStatus"
          }
        },
        "description": "User detail"
      },
      "PasswordAuth": {
        "required": [
          "grant_type",
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Email address of the user.",
            "nullable": false
          },
          "password": {
            "type": "string",
            "description": "Password of the user",
            "nullable": false
          },
          "grant_type": {
            "type": "string",
            "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>password</code>",
            "nullable": false
          }
        }
      }
    },
    "securitySchemes": {
      "bearer <token>": {
        "type": "http",
        "description": "JWT token Authentication",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}