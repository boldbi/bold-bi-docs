{
  "openapi": "3.0.1",
  "info": {
    "title": "API Reference",
    "description": {
      "$ref": "./../../../common/api-reference/introduction - latest.md"
    },
    "version": "4.0"
  },
  "servers": [
    {
      "url": "https://{yourdomain}/bi/api/site/<site_identifier>"
    }
  ],
  "security": [
    {
      "bearer <token>": []
    }
  ],
  "tags": [
    {
      "name": "Interact with our REST API",
      "description": {
        "$ref": "./helperswagger.json#/tryitnow/tryitnowdescription"
      }
    },
    {
      "name": "Password Authentication",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/authentication/getauthenticationdescription"
      }
    },
    {
      "name": "Embed Secret Authentication",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/authentication/getauthenticationdescription"
      }
    },
    {
      "name": "Users",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/userdescription/getusersdescription"
      }
    },
    {
      "name": "Groups",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/groupdescription/getgroupsdescription"
      }
    },
    {
      "name": "Permission",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/permissiondescription/getpermissiondescription"
      }
    },
    {
      "name": "Category",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/categorydescription/getcategorydescription"
      }
    },
    {
      "name": "Dashboard",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/dashboarddescription/getdashboarddescription"
      }
    },
    {
      "name": "Draft Dashboard",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/draftdashboarddescription/getdraftdashboarddescription"
      }
    },
    {
      "name": "Dashboard Views",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/dashbaordviewsdescription/getdashbaordviewsdescription"
      }
    },
    {
      "name": "DataSource",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/datasourcedescription/getdatasourcedescription"
      }
    },
    {
      "name": "Items",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/itemdescription/getitemdescription"
      }
    },
    {
      "name": "Slideshow",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/slideshowdescription/getslideshowdescription"
      }
    },
    {
      "name": "Schedule",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/scheduledescription/getscheduledescription"
      }
    },
    {
      "name": "Pinboard",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/pinboarddescription/getpinboarddescription"
      }
    },
    {
      "name": "Publish to another site",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/publishdescription/getpublishdescription"
      }
    },
    {
      "name": "Attributes",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/attributesdescription/getattributesdescription"
      }
    },
    {
      "name": "Settings",
      "description": {
        "$ref": "./../../../common/api-reference/helperswagger.json#/settingsdescription/getsettingsdescription"
      }
    }
  ],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "Password Authentication"
        ],
        "summary": "Authenticate User",
        "description": "Authenticate with a user password.",
        "operationId": "PasswordAuthentication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordAuth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User logged in successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Email address is empty.",
            "content": {}
          },
          "401": {
            "description": "Invalid email or password.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          }
        }
      }
    },
    "/token ": {
      "post": {
        "tags": [
          "Embed Secret Authentication"
        ],
        "summary": "Authenticate User",
        "description": "Authenticate user using embed secret of the site.",
        "operationId": "EmbedSecretAuthentication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbedSecretAuth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User logged in successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Email address is empty.",
            "content": {}
          },
          "401": {
            "description": "Invalid email or embed secret.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/views": {
      "post": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Add Dashboard View",
        "description": "Users who have access to the dashboard can save a view by providing proper dashboard filter details.",
        "operationId": "ItemViews_AddItemView",
        "requestBody": {
          "description": "Details about the dashboard filter to save the view.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemViewsAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A view has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "View name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add view.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiItemViewsAdd"
      },
      "put": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Edit Dashboard View",
        "description": "Users who have created a view can edit the view by providing proper dashboard filter details.",
        "operationId": "ItemViews_UpdateItemView",
        "requestBody": {
          "description": "Details about the dashboard filter to edit the view.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemViewsUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A view has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "View name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to edit view.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiItemViewsUpdate"
      }      
    },
    
    "/v4.0/dashboards/{id}/views": {
      "get": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Get Dashboard Views",
        "description": "Retrieves the list of views of the particular dashboard for the current user.",
        "operationId": "ItemViews_ItemViewsByItemId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dashboard ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Views have been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiItemViewResponse"
                  }
                }
              }
            }
          },
          "204": {
            "description": "View list was empty.",
            "content": {}
          },
          "400": {
            "description": "Dashboard ID invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get views.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/views/{id}": {
      "get": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Get Dashboard View by Id",
        "description": "Retrieves the view detail for the current user.",
        "operationId": "ItemViews_ItemViewByViewId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "View ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A view has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemViewResponse"
                }
              }
            }
          },
          "400": {
            "description": "View ID invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "View detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get view.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Delete Dashboard View",
        "description": "Users who have created a view can delete them.",
        "operationId": "ItemViews_ItemViewDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "View ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "View ID invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Itemview is not active.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete view.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Dashboards",
        "description": "Users who have created the dashboards can view the dashboard lists.",
        "operationId": "Dashboards_GetDashboards",
        "parameters": [
          {
            "type": "string",
            "name": "serverPath",
            "in": "query",
            "required": false,
            "description": "<br />`\"/\"` + `\"Category name\"`",
            "x-nullable": true,
            "example": " /sales "
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "<br />\nPage number",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  1 ",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "<br />\nPage size",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  10 ",
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, CategoryName, and CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          },
          {
            "name": "exclude_multitabdashboard",
            "in": "query",
            "required": false,
            "description": "<br />\nExclude Multitab dashboards.<br />Values allowed are <code>True/true, False/false</code>",
            "x-nullable": true,
            "schema": {
              "type": "boolean"
            },
            "example": "  True "
          }
        ],
        "responses": {
          "200": {
            "description": "List of dashboards was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApiResponse"
                }
              }
            }
          },
          "204": {
            "description": "Items not found.",
            "content": {}
          },
          "400": {
            "description": "Page does not exists.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "403": {
            "description": "Access denied for the item.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/{itemId}/copy": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Copy Dashboard",
        "description": "Users who have create access to the dashboard, can copy the dashboard.",
        "operationId": "Dashboards_CopyDashboard",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of the dashboard will be copied.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Details of the dashboard passed will be copied.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCopyDashboardRequestV4"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The dashboard has been copied successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCopyItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "403": {
            "description": "Mark as public has been restricted.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to copy the dashboard.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCopyDashboard"
      }
    },
    "/v4.0/dashboards/public": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Public Dashboards",
        "description": "Retrieves the list of public dashboards for the current user.",
        "operationId": "Dashboards_GetPublicItems",
        "parameters": [
          {
            "name": "itemType",
            "in": "query",
            "description": "Item type.<br />Value allowed is <code>Dashboard</code>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": false,
              "x-schema": {
                "$ref": "#/components/schemas/ItemType"
              }
            },
            "x-schema": {
              "$ref": "#/components/schemas/ItemType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of public dashboards was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiPublicItems"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Public item list empty.",
            "content": {}
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get public items.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/favorite": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Favorite Dashboards",
        "description": "Retrieves a list of favorite dashboards for the current user.",
        "operationId": "Dashboards_GetFavoriteItems",
        "responses": {
          "200": {
            "description": "List of favorite dashboards was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiFavoriteitems"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Favorite item list empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get favorite items.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Update Favorite Dashboard",
        "description": "Users who have read access to the dashboard can update the dashboard as favorite or non-favorite.",
        "operationId": "Dashboards_UpdateFavoriteItem",
        "requestBody": {
          "description": "Favorite value passed will be updated to the specified dashboard.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateFavorite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Favorite dashboard was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "417": {
            "description": "Failed to favorite item.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUpdateFavorite"
      }
    },
    "/v4.0/dashboards/export": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Export Dashboard",
        "description": "Users who have read access to the dashboard can export the dashboard to the export types (Excel, PDF, and Image) and get the exported dashboard as an array of bytes in response.<br /><br />When exporting multi-tabbed dashboard in image format, the response bytes must be saved in ZIP format.",
        "operationId": "Dashboards_ExportDashboard",
        "requestBody": {
          "description": "Details about the dashboard passed will be exported.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiExportDashboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dashboard exported successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiExportDashboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to Export item.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiExportDashboard"
      }
    },
    "/v4.0/dashboards/{dashboardId}": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Dashboard by Id",
        "description": "Users who have created the dashboard can view the dashboard detail.",
        "operationId": "Dashboards_GetDashboard",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "description": "Dashboard ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpecifiedItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Delete Dashboard",
        "description": "Users who have delete access to the item type dashboard can delete the item by providing the Dashboard Id.",
        "operationId": "Dashboards_DeleteDashboard",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "description": "Dashboard ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/drafts": {
      "post": {
        "tags": [
          "Draft Dashboard"
        ],
        "summary": "Add Draft Dashboard",
        "description": "Users who have access to create a dashboard can add the draft dashboard.",
        "operationId": "Dashboards_AddDraftDashboard",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Draft dashboard detail.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Draft Dashboard has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DraftItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "403": {
            "description": "Access denied for the item.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "name"
      },
      "get": {
        "tags": [
          "Draft Dashboard"
        ],
        "summary": "Get Draft Dashboards",
        "description": "Users who have created the draft dashboard can view the draft dashboard lists.",
        "operationId": "Dashboards_GetDraftDashboard",
        "responses": {
          "200": {
            "description": "List of draft dashboards has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiItemsV4"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Items not found.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "403": {
            "description": "Access denied for the item.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/drafts/{itemId}": {
      "put": {
        "tags": [
          "Draft Dashboard"
        ],
        "summary": "Update Draft Dashboard",
        "description": "Users who have created the draft dashboard can update dashboard details.",
        "operationId": "Items_UpdateDraftItemDetail",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "ItemId of the draft dashboard.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Details of the draft dashboard item.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDraftItemDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Draft dashboard detail has been modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update draft item details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "updateDraftItemDetail"
      }
    },
    "/v4.0/datasources": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "Get Datasources",
        "description": "Users who have created the data source can view the data source lists.",
        "operationId": "DataSource_GetDataSources",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "<br />\nPage number",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  1 ",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "<br />\nPage size",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  10 ",
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, and CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          }
        ],
        "responses": {
          "200": {
            "description": "List of data sources has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApiResponse"
                }
              }
            }
          },
          "204": {
            "description": "Items not found.",
            "content": {}
          },
          "400": {
            "description": "Page does not exists.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "403": {
            "description": "Access denied for the item.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/datasources/{itemId}/copy": {
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "Copy Datasource",
        "description": "Users who have create access to the data source, can copy the data source.",
        "operationId": "DataSource_CopyDataSource",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "ItemId of the data source will be copied.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Details of the passed data source will be copied.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCopyDataSourceRequestV4"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The data source has been copied successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCopyItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Data source name already exist.",
            "content": {}
          },
          "417": {
            "description": "Failed to copy the data source.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCopyDatasource"
      }
    },
    "/v4.0/datasources/{datasourceId}": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "Get Datasource by Id",
        "description": "Users who have created the data source can view the data source details.",
        "operationId": "DataSource_GetDataSource",
        "parameters": [
          {
            "name": "datasourceId",
            "in": "path",
            "description": "Datasource ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data source detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpecifiedItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "DataSource"
        ],
        "summary": "Delete Datasource",
        "description": "Users who have delete access to the item type data source can delete the item by providing the Datasource Id.",
        "operationId": "DataSource_DeleteDataSource",
        "parameters": [
          {
            "name": "datasourceId",
            "in": "path",
            "description": "Datasource ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get Items",
        "description": "Retrieves the respective list of items for the item types (Category, Dashboard, Datasource, and Schedule) for the current user.",
        "operationId": "Items_GetItems",
        "parameters": [
          {
            "name": "itemType",
            "in": "query",
            "description": "Item type.<br />(Values allowed are <code>Category, Dashboard, Datasource, and Schedule</code>)",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": false,
              "x-schema": {
                "$ref": "#/components/schemas/ItemType"
              }
            },
            "x-schema": {
              "$ref": "#/components/schemas/ItemType"
            }
          },
          {
            "type": "string",
            "name": "serverPath",
            "in": "query",
            "required": false,
            "description": "<br />`\"/\"` + `\"Category name\"`",
            "x-nullable": true,
            "example": " /sales "
          }
        ],
        "responses": {
          "200": {
            "description": "List of items has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiItems"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Item list is empty.",
            "content": {}
          },
          "400": {
            "description": "Invalid item type.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/items/{id}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get Item by Id",
        "description": "Retrieves the respective item detail for the current users’ item types (Category, Dashboard, Datasource, and Schedule).",
        "operationId": "Items_GetItemDetail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpecifiedItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete Item",
        "description": "Users who have delete access to the item types Category, Dashboard, Datasource, and Schedule can delete the item by providing the item ID (Category Id, Dashboard Id, Datasource Id, and Schedule Id).",
        "operationId": "Items_DeleteItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add User",
        "description": "Adds the new user.",
        "operationId": "Users_AddUser",
        "requestBody": {
          "description": "Detail of the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The user was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Email address already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userDetail"
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Users",
        "description": "Retrieves the list of user details.",
        "operationId": "Users_GetUsers",
        "responses": {
          "200": {
            "description": "List of user details has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserListV3"
                }
              }
            }
          },
          "204": {
            "description": "User list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/users/{user}/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Groups",
        "description": "Retrieves the list of group details of the particular user.",
        "operationId": "Users_GetGroupsOfUser",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID or Email address of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user's groups has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGroupList"
                }
              }
            }
          },
          "204": {
            "description": "Group list empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get group details.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/csv-users/download-template": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Download CSV Template",
        "description": "Download the CSV template to import the CSV users.",
        "operationId": "Users_DownloadCsvTemplate",
        "responses": {
          "200": {
            "description": "CSV template was downloaded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDownloadCsvTemplate"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to download CSV template file.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/csv-users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add CSV User",
        "description": "Add the list of users using the CSV file.",
        "operationId": "Users_CsvUserImport",
        "requestBody": {
          "description": "Details passed to add the CSV of users.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCsvUserImportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User(s) created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCsvUserImportResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "417": {
            "description": "Failed to add CSV users.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCsvUserImportRequest"
      }
    },
    "/v4.0/users/{user}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a User by Email or Username",
        "description": "Retrieves the particular user detail.",
        "operationId": "Users_GetUserDetail",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Username or email address of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserDetailV4"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve user detail.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "Updates the particular user detail.",
        "operationId": "Users_EditUser",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Username or email address of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Detail of the user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The user was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userDetail"
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "Deletes the particular user.",
        "operationId": "Users_DeleteUser",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Username or email address of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Email address is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete user.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/groups": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add Group",
        "description": "Adds the new group to group the users.",
        "operationId": "Groups_AddGroup",
        "requestBody": {
          "description": "Detail of the group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Group name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add group.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "groupDetail"
      },
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Groups",
        "description": "Retrieves the list of group details.",
        "operationId": "Groups_GetGroups",
        "responses": {
          "200": {
            "description": "List of groups has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGroupListV3"
                }
              }
            }
          },
          "204": {
            "description": "Group list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/groups/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group by Id",
        "description": "Retrieves the particular group detail.",
        "operationId": "Groups_GetGroupDetail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGroup"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get group detail.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update Group",
        "description": "Updates the particular group detail.",
        "operationId": "Groups_EditGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Detail of the group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Group name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update group ",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "groupDetail"
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete Group",
        "description": "Deletes the particular group.",
        "operationId": "Groups_DeleteGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "406": {
            "description": "Invalid Group ID.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete the group.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/groups/{id}/users": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add User(s) to Group",
        "description": "Adds the list of users to the particular group.",
        "operationId": "Groups_AddUserToGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "User(s) added to the group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupUsers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User(s) added to the group successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "412": {
            "description": "User already exists in group.",
            "content": {}
          },
          "417": {
            "description": "Failed to add user in to group.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiGroupUsers"
      },
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group Users",
        "description": "Retrieves the list of user details of the particular group.",
        "operationId": "Groups_GetUsersFromGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of group's users has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserList"
                }
              }
            }
          },
          "204": {
            "description": "User list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "Invalid Group ID.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve the groups' users.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete Group User",
        "description": "Deletes the list of users from the particular group.",
        "operationId": "Groups_DeleteUserFromGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "User(s) removed from the group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupUsers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "406": {
            "description": "Invalid group ID.",
            "content": {}
          },
          "412": {
            "description": "User detail not found.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete user from group.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiGroupUsers"
      }
    },
    "/v4.0/settings/site": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Site Settings",
        "description": "Retrieves the list of site setting details of the particular site.",
        "operationId": "Administration_GetSiteSettings",
        "parameters": [
          {
            "type": "string",
            "name": "key",
            "in": "query",
            "required": false,
            "description": "<br />\nList of site setting keys separated by <code>,</code>",
            "x-nullable": true,
            "default": null,
            "example": " OrganizationName,SiteUrl "
          }
        ],
        "responses": {
          "200": {
            "description": "Site setting details has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSiteSettingList"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve site settings details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Site Settings",
        "description": "Users who have admin rights to the site can update the site settings.",
        "operationId": "Administration_UpdateSiteSettings",
        "requestBody": {
          "description": "Details of the site settings passed will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiSiteSettingList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Site settings has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUpdateSiteSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update site setting details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUpdateSiteSettings"
      }
    },
    "/v4.0/attribute/user": {
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Add User Attribute",
        "description": "Adds the attribute for a particular user.",
        "operationId": "Attribute_AddUserAttribute",
        "requestBody": {
          "description": "Attribute object, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserAddAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attribute details created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Attribute name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add attribute details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "attribute"
      },
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Update User Attribute",
        "description": "Updates the specific attribute of a particular user.",
        "operationId": "Attribute_UpdateUserAttribute",
        "requestBody": {
          "description": "Attribute object, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserUpdateAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attribute details was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Attribute name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update attribute details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "attribute"
      }
    },
    "/v4.0/attribute/user/{id}": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Get User Attributes",
        "description": "Retrieves the list of attributes of the particular user.",
        "operationId": "Attribute_GetUserCustomAttribute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attribute details has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "User ID invalid.",
            "content": {}
          },
          "404": {
            "description": "Attributes not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get attribute details.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Delete User Attribute",
        "description": "Deletes the attribute of the particular user.",
        "operationId": "Attribute_DeleteUserAttribute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User attribute ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Attribute ID invalid.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete attribute details.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/attribute/group": {
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Add Group Attribute",
        "description": "Adds the attribute for a particular group.",
        "operationId": "Attribute_AddGroupAttribute",
        "requestBody": {
          "description": "Attribute object, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupAddAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attribute details created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Attribute name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add attribute details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "attribute"
      },
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Update Group Attribute",
        "description": "Updates the specific attribute of a particular group.",
        "operationId": "Attribute_UpdateGroupAttribute",
        "requestBody": {
          "description": "Attribute object, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupUpdateAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attribute details was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Attribute name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update attribute details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "attribute"
      }
    },
    "/v4.0/attribute/group/{id}": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Get Group Attributes",
        "description": "Retrieves the list of attributes of the particular group.",
        "operationId": "Attribute_GetGroupCustomAttribute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attribute details has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Group ID invalid.",
            "content": {}
          },
          "404": {
            "description": "Attributes not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get attribute details.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Delete Group Attribute",
        "description": "Deletes the attribute of the particular group.",
        "operationId": "Attribute_DeleteGroupAttribute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group attribute ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Attribute ID invalid.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete attribute details.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/attribute/site": {
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Add Site Attribute",
        "description": "Adds the attribute for a particular site.",
        "operationId": "Attribute_SaveSiteAttribute",
        "requestBody": {
          "description": "Attribute object, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSiteAddAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attribute details created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Attribute name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add attribute details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "attribute"
      },
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Get Site Attributes",
        "description": "Retrieves the list of attributes of the particular site.",
        "operationId": "Attribute_GetSiteAttributes",
        "responses": {
          "200": {
            "description": "Attribute details has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Attributes not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get attribute details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Update Site Attribute",
        "description": "Updates the specific attribute of a particular site.",
        "operationId": "Attribute_UpdateSiteAttributes",
        "requestBody": {
          "description": "Attribute object, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSiteUpdateAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attribute details was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Attribute name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update attribute details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "attribute"
      }
    },
    "/v4.0/attribute/site/{id}": {
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Delete Site Attribute",
        "description": "Deletes the attribute of the particular site.",
        "operationId": "Attribute_DeleteSiteAttributes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Site attribute ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Attribute ID invalid.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete attribute details.",
            "content": {}
          }
        }
      }
    },
    "/api/pinboard": {
      "post": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Add Pinboard",
        "description": "Adds the new pinboard into a particular site.",
        "operationId": "Pinboard_AddEmbedPinBoard",
        "requestBody": {
          "description": "Details about adding pinboard.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAddEmbedPinboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pinboard has been added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAddPinboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Pinboard name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add pinboard details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiPinboardAdd"
      }
    },
    "/api/pinboard/copy": {
      "post": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Copy Pinboard",
        "description": "Copies the pinboard in the particular site.",
        "operationId": "Pinboard_CopyEmbedPinBoard",
        "requestBody": {
          "description": "Details about the copy pinboard.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSiteCopyPinboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pinboard has been copied successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAddPinboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Pinboard name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to copy pinboard details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiPinboardCopy"
      }
    },
    "/api/pinboard/{name}": {
      "get": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Get Pinboard by Name",
        "description": "Users who have create access for dashboard can retrieve pinboard item.",
        "operationId": "Dashboards_GetEmbedPinBoard",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Pinboard name",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pinboard detail have been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve the pinboard detail.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Delete Pinboard",
        "description": "Users who have created a pinboard can delete that pinboard.",
        "operationId": "Pinboard_RemoveEmbedPinBoard",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Pinboard name",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Item name is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete the pinboard details.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/publish/item": {
      "post": {
        "tags": [
          "Publish to another site"
        ],
        "summary": "Publish Dashboard",
        "description": "Publish the dashboard from one site to other site(s).",
        "operationId": "Publish_Dashboard",
        "requestBody": {
          "description": "Details about the publish dashboard, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPublishItemDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The dashboard is being published to one or more sites.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Site not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiPublishItemDetail"
      }
    },
    "/v4.0/publish/external-sites/add": {
      "post": {
        "tags": [
          "Publish to another site"
        ],
        "summary": "Add External Site",
        "description": "Adds the external site details.",
        "operationId": "Add_External_Sites",
        "requestBody": {
          "description": "Details about the add external site, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalSites"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The external site was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or empty.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ExternalSites"
      }
    },
    "/v4.0/permissions/users": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Add User Permission",
        "description": "Administrators can add a new permission to the specific user by providing permission details.<br /><br />To add a specific permission, you must provide the item ID (Category Id, Schedule Id, and Dashboard Id) for the permission entity (SpecificCategory, SpecificSchedule, and SpecificDashboard).",
        "operationId": "Permission_AddUserPermission",
        "requestBody": {
          "description": "Details about the permissions passed will be added to specified user id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserPermissionAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User permission was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail  not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Permission already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add user permission.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUserPermissionAdd"
      }
    },
    "/v4.0/permissions/users/{id}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get User Permissions",
        "description": "Administrators can get the list of permissions of the specific user.",
        "operationId": "Permission_GetUserPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user permissions has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiUserPermissionDetail"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Permission list is empty.",
            "content": {}
          },
          "400": {
            "description": "Invalid user ID.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Permission"
        ],
        "summary": "Delete User Permission",
        "description": "Administrators can delete the specific user's permission.",
        "operationId": "Permission_DeleteUserPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User permission ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Permission id is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete user permission.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/permissions/groups": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Add Group Permission",
        "description": "Administrators can add a new permission to the specific group by providing permission details.<br /><br />To add a specific permission, you must provide the item ID (Category Id, Schedule Id, and Dashboard Id) for the permission entity (SpecificCategory, SpecificSchedule, and SpecificDashboard).",
        "operationId": "Permission_AddGroupPermission",
        "requestBody": {
          "description": "Details about the permissions passed will be added to specified group id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupPermissionAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group permission was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group  detail  not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Permission already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add group permission.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiGroupPermissionAdd"
      }
    },
    "/v4.0/permissions/groups/{id}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get Group Permissions",
        "description": "Administrators can get the list of permissions of the specific group.",
        "operationId": "Permission_GetGroupPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of group permissions has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiGroupPermissionDetail"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Permission list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "Invalid group ID.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Permission"
        ],
        "summary": "Delete Group Permission",
        "description": "Administrators can delete the specific group permission.",
        "operationId": "Permission_DeleteGroupPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group permission ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Permission id is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete group permission.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/categories": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Add Category",
        "description": "Users who have a create access for categories, can add a new category.",
        "operationId": "Category_AddCategory",
        "requestBody": {
          "description": "Details about the passed category will be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCategoryAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The category was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add category.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCategoryAdd"
      },
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get Categories",
        "description": "Users who have created the categories can view the category lists.",
        "operationId": "Category_GetCategories",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "<br />\nPage number",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  1 ",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "<br />\nPage size",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  10 ",
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, and CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          }
        ],
        "responses": {
          "200": {
            "description": "The list of categories was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApiResponse"
                }
              }
            }
          },
          "204": {
            "description": "Items not found.",
            "content": {}
          },
          "400": {
            "description": "Page does not exists.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "403": {
            "description": "Access denied for the item.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Update Category",
        "description": "Users who have write access for categories can update an existing category.",
        "operationId": "Category_UpdateCategory",
        "requestBody": {
          "description": "Details about the passed category will be updated to the specified category id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCategoryUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The category was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update category.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCategoryUpdate"
      }
    },
    "/v4.0/categories/{categoryId}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get Category by Id",
        "description": "Users who created the category can view the category details.",
        "operationId": "Category_GetCategory",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpecifiedItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Delete Category",
        "description": "Users who have delete access to the item type category can delete the item by providing the Category Id.",
        "operationId": "Category_DeleteCategory",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "Caegory ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/schedules": {
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Add Dashboard Schedule",
        "description": "Users who have create access to the schedule can add new dashboard schedule.",
        "operationId": "Dashboards_AddSchedule",
        "requestBody": {
          "description": "Details about the schedule passed will be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The schedule was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "412": {
            "description": "FTP details invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add schedule.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiScheduleRequest"
      },
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get Dashboard Schedules",
        "description": "Users who have read access to the schedule can get the list of dashboard schedules.",
        "operationId": "Dashboards_GetScheduleItems",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "<br />\nPage number",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  1 ",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "<br />\nPage size",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  10 ",
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, and CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule details have been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedScheduleApiResponse"
                }
              }
            }
          },
          "204": {
            "description": "Item details not found.",
            "content": {}
          },
          "400": {
            "description": "Page does not exists.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve the schedules.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/schedules/{scheduleId}": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get Dashboard Schedule by Id",
        "description": "Users who have read access to the schedule can get the particular dashboard schedule.",
        "operationId": "Dashboards_GetSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule detail has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScheduleItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve the schedule.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Schedule"
        ],
        "summary": "Update Dashboard Schedule",
        "description": "Users who have write access for schedule can update an existing dashboard schedule.",
        "operationId": "Dashboards_UpdateSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Details about the schedule passed will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The schedule was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "412": {
            "description": "FTP details invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update schedule.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUpdateScheduleRequest"
      }
    },
    "/v4.0/schedules/{scheduleId}/run": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Run Schedule",
        "description": "Users who have read access for schedule can run the particular schedule.",
        "operationId": "Scheduler_RunSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The schedule started successfully. Schedule recipients will receive notification once a schedule has been completed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to run the schedule.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/schedules/{scheduleId}": {
      "delete": {
        "tags": [
          "Schedule"
        ],
        "summary": "Delete Schedule",
        "description": "Users who have delete access to the item type schedule can delete the particular dashboards schedule by providing the Schedule Id.",
        "operationId": "Scheduler_DeleteSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/slideshows": {
      "post": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Add Slideshow",
        "description": "Users who have create access to the slideshow can add a new slideshow.",
        "operationId": "SlideShow_AddSlideshow",
        "requestBody": {
          "description": "Details about the slideshow passed will be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSlideshowAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A slideshow was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add slideshow.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiSlideshowAdd"
      },
      "get": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Get Slideshows",
        "description": "Retrieves the list of slideshow details.",
        "operationId": "SlideShow_GetSlideshows",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "<br />\nPage number",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  1 ",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "<br />\nPage size",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  10 ",
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, and CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          }
        ],
        "responses": {
          "200": {
            "description": "List of slideshows was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSlideshowApiResponse"
                }
              }
            }
          },
          "204": {
            "description": "Items not found.",
            "content": {}
          },
          "400": {
            "description": "Page does not exists.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve the slideshows.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/slideshows/{slideshowId}": {
      "get": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Get Slideshow by Id",
        "description": "Users who have read access to the slideshow can get slideshow detail.",
        "operationId": "SlideShow_GetSlideshowDetail",
        "parameters": [
          {
            "name": "slideshowId",
            "in": "path",
            "description": "Slideshow ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Slideshow detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlideshowResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve the slideshows.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Update Slideshow",
        "description": "Users who have write access to the slideshow can update the slideshow detail.",
        "operationId": "SlideShow_EditSlideshow",
        "parameters": [
          {
            "name": "slideshowId",
            "in": "path",
            "description": "Slideshow ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Details about the slideshow passed will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSlideshowEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A slideshow was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update slideshow.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiSlideshowEdit"
      },
      "delete": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Delete Slideshow",
        "description": "Users can delete the specific slideshow.",
        "operationId": "SlideShow_DeleteSlideshow",
        "parameters": [
          {
            "name": "slideshowId",
            "in": "path",
            "description": "Slideshow ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Slideshow id is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete slideshow.",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Response": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Authentication token of the user."
          },
          "token_type": {
            "type": "string",
            "description": "Type of token assigned by the authorization server."
          },
          "expires_in": {
            "type": "string",
            "description": "The lifetime in seconds of the access token."
          },
          "Email": {
            "type": "string",
            "description": "Email of the authenticated user."
          }
        },
        "x-typeName": "Response"
      },
      "ApiResponse": {
        "required": [
          "ApiStatus",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "object",
            "description": "Returns data from the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
      "PaginatedApiResponse": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "array",
            "description": "Returns data from the API.",
            "items": {
              "$ref": "#/components/schemas/ApiItems"
            }
          },
          "TotalResults": {
            "type": "integer",
            "description": "Returns items count of the API request.",
            "format": "int32"
          },
          "Links": {
            "type": "array",
            "description": "Returns pagination links.",
            "items": {
              "$ref": "#/components/schemas/Links"
            }
          }
        }
      },
      "Links": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Returns the page link."
          },
          "Rel": {
            "type": "string",
            "description": "Returns link type.<br />(Values allowed are <code>First, Next, Prev, Last</code>)"
          },
          "Type": {
            "type": "string",
            "description": "Returns method type.<br />Value allowed is <code>GET</code>"
          }
        }
      },
      "ApiItemViewsAdd": {
        "required": [
          "IsPublic",
          "ItemId",
          "QueryString",
          "ViewName"
        ],
        "type": "object",
        "properties": {
          "ViewName": {
            "type": "string",
            "description": "Specify name of the view."
          },
          "ItemId": {
            "type": "string",
            "description": "Specify ID of the dashboard.",
            "format": "guid"
          },
          "ChildItemId": {
            "type": "string",
            "description": "Specify ID of the child dashboard.",
            "format": "guid"
          },
          "QueryString": {
            "type": "string",
            "description": "Specify the filter query.",
            "example": "Year(OrderDate)=1996"
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Specify <i>true</i> to set the view as public"
          }
        },
        "description": "Add dashboard view request details."
      },
      "ApiItemViewsUpdate": {
        "required": [
          "DashboardId",
          "ViewId"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Specify name of the view."
          },
          "ViewId": {
            "type": "string",
            "description": "Specify ID of the dashboard view.",
            "format": "guid"
          },
          "DashboardId": {
            "type": "string",
            "description": "Specify ID of the dashboard.",
            "format": "guid"
          },
          "QueryString": {
            "type": "string",
            "description": "Specify the filter query.",
            "example": "Year(OrderDate)=1996"
          }
        },
        "description": "Update dashboard view request details."
      },
      "ApiItemViewResponse": {
        "required": [
          "CanDelete",
          "CanEdit",
          "CanShare",
          "IsPublic",
          "ItemId",
          "UserId",
          "ViewId"
        ],
        "type": "object",
        "properties": {
          "CanDelete": {
            "type": "boolean",
            "description": "Specifies the delete permission of the view."
          },
          "CanEdit": {
            "type": "boolean",
            "description": "Specifies the write permission of the view."
          },
          "CanShare": {
            "type": "boolean",
            "description": "Specifies the share permission of the view."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true, if the view is public."
          },
          "ItemId": {
            "type": "string",
            "description": "Specifies the ID of the dashboard.",
            "format": "guid"
          },
          "QueryString": {
            "type": "string",
            "description": "Specifies the filter query string."
          },
          "UserId": {
            "type": "integer",
            "description": "Specifies the ID of the user.",
            "format": "int32"
          },
          "ViewId": {
            "type": "string",
            "description": "Specifies the ID of the view.",
            "format": "guid"
          },
          "ViewName": {
            "type": "string",
            "description": "Specifies the name of the view."
          }
        },
        "description": "Dashboard view response details."
      },
      "ApiCopyItemResponse": {
        "required": [
          "ApiStatus",
          "PublishedItemId",
          "Status",
          "Version"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "PublishedItemId": {
            "type": "string",
            "description": "Returns the published data source item id",
            "format": "guid"
          },
          "Version": {
            "type": "integer",
            "description": "Returns the version number of the data source",
            "format": "int32"
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          }
        },
        "description": "Response details of the copied item."
      },
      "ApiCopyDashboardRequestV4": {
        "required": [
          "CategoryId",
          "IsCopyDatasource",
          "IsPublic",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Dashboard name."
          },
          "Description": {
            "type": "string",
            "description": "Dashboard description."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Specify <i>true</i> to set the item as a public."
          },
          "IsCopyDatasource": {
            "type": "boolean",
            "description": "Copy the data source of dashboard based on this value "
          }
        },
        "description": "Dashboard details."
      },
      "ApiCopyDataSourceRequestV4": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Data source name."
          },
          "Description": {
            "type": "string",
            "description": "Data source description."
          }
        },
        "description": "Data Source details."
      },
      "ApiSiteAddAttribute": {
        "required": [
          "Name",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Attribute Name"
          },
          "Value": {
            "type": "string",
            "description": "Attribute Value"
          },
          "Description": {
            "type": "string",
            "description": "Attribute Description"
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Encrypt Attribute Value"
          }
        }
      },
      "ApiSiteUpdateAttribute": {
        "required": [
          "Id",
          "Name",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Attribute Id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Attribute Name"
          },
          "Value": {
            "type": "string",
            "description": "Attribute Value"
          },
          "Description": {
            "type": "string",
            "description": "Attribute Description"
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Encrypt Attribute Value"
          }
        }
      },
      "ApiUserAddAttribute": {
        "required": [
          "Name",
          "UserId",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Attribute Name"
          },
          "Value": {
            "type": "string",
            "description": "Attribute Value"
          },
          "Description": {
            "type": "string",
            "description": "Attribute Description"
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Encrypt Attribute Value"
          },
          "UserId": {
            "type": "integer",
            "description": "User Id",
            "format": "int32"
          }
        }
      },
      "ApiGroupAddAttribute": {
        "required": [
          "GroupId",
          "Name",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Attribute Name"
          },
          "Value": {
            "type": "string",
            "description": "Attribute Value"
          },
          "Description": {
            "type": "string",
            "description": "Attribute Description"
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Encrypt Attribute Value"
          },
          "GroupId": {
            "type": "integer",
            "description": "Group Id",
            "format": "int32"
          }
        }
      },
      "ApiUserUpdateAttribute": {
        "required": [
          "Id",
          "Name",
          "UserId",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Attribute Id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Attribute Name"
          },
          "Value": {
            "type": "string",
            "description": "Attribute Value"
          },
          "Description": {
            "type": "string",
            "description": "Attribute Description"
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Encrypt Attribute Value"
          },
          "UserId": {
            "type": "integer",
            "description": "User Id",
            "format": "int32"
          }
        }
      },
      "ApiGroupUpdateAttribute": {
        "required": [
          "GroupId",
          "Id",
          "Name",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Attribute Id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Attribute Name"
          },
          "Value": {
            "type": "string",
            "description": "Attribute Value"
          },
          "Description": {
            "type": "string",
            "description": "Attribute Description"
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Encrypt Attribute Value"
          },
          "GroupId": {
            "type": "integer",
            "description": "Group Id",
            "format": "int32"
          }
        }
      },
      "ApiUserAdd": {
        "required": [
          "Email",
          "FirstName",
          "Username"
        ],
        "type": "object",
        "properties": {
          "Username": {
            "type": "string",
            "description": "Username of the user"
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user (Email required only in [Email required](/embedded-bi/site-administration/account-settings/#email-required) mode)."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user"
          },
          "Password": {
            "type": "string",
            "description": "Password of the user (Password accepted only in [Automatic activation](/embedded-bi/site-administration/account-settings/#automatic-activation) mode)."
          }
        },
        "description": "User detail"
      },
      "ApiUserEdit": {
        "type": "object",
        "properties": {
          "Username": {
            "type": "string",
            "description": "Username of the user"
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user"
          },
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user"
          }
        },
        "description": "User detail"
      },
      "ApiUserDetailV4": {
        "type": "object",
        "properties": {
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user"
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user"
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user"
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user"
          },
          "UserStatus": {
            "description": "Returns the status of the user",
            "$ref": "#/components/schemas/UserStatus"
          },
          "UserId": {
            "type": "integer",
            "description": "ID of the user",
            "format": "int32"
          },
          "Username": {
            "type": "string",
            "description": "Username of the user"
          },
          "DirectoryType": {
            "$ref": "#/components/schemas/DirectoryType"
          },
          "Avatar": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Profile picture of the user",
            "format": "byte"
          }
        },
        "description": "Detail of the User"
      },
      "UserStatus": {
        "type": "string",
        "enum": [ "Active", "InActive" ],
        "x-enumNames": [ "Active", "InActive" ]
      },
      "DirectoryType": {
        "type": "string",
        "enum": [
          "All",
          "Local",
          "AzureAD",
          "ExternalDatabase"
        ],
        "x-enumNames": [
          "All",
          "Local",
          "AzureAD",
          "ExternalDatabase"
        ]
      },
      "ApiSiteSettingList": {
        "type": "array",
        "description": "Site settings details.",
        "items": {
          "$ref": "#/components/schemas/ApiSiteSettings"
        }
      },
      "ApiSiteSettings": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "description": "Site settings name.<br /><br />Valid keys: <code>OrganizationName, SiteUrl, LoginScreenLogo, EmailLogo, FavIcon, ShowCopyrightInformation, ShowPoweredBySyncfusion, Use24HourFormat,  DisableUserPreference, DataLanguage, DateFormat, TimeZone</code>"
          },
          "Value": {
            "type": "string",
            "description": "Site settings value.<br /><br />Values of, <br />1. <code>OrganizationName, SiteUrl, DataLanguage, TimeZone</code> are in `string`<br /><br />2. <code>LoginScreenLogo, EmailLogo, FavIcon</code> are in `Base64EncodedString`<br /><br />3. <code>ShowCopyrightInformation, ShowPoweredBySyncfusion, Use24HourFormat, DisableUserPreference</code> are in `true` or `false`<br /><br />4. <code>DateFormat</code> is in `MM/dd/yyyy` `dd/MM/yyyy` `d MMM, yyyy` `MMM d, yyyy`"
          },
          "FileFormat": {
            "type": "string",
            "description": "Image format type.<br />Values allowed are <code>svg, png, jpg, jpeg</code>"
          }
        }
      },
      "UpdateApiSiteSettingList": {
        "type": "array",
        "description": "Site settings details.",
        "items": {
          "$ref": "#/components/schemas/UpdateApiSiteSettings"
        }
      },
      "UpdateApiSiteSettings": {
        "required": [
          "Key",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "description": "Site settings name.<br /><br />Valid keys: <code>OrganizationName, SiteUrl, LoginScreenLogo, EmailLogo, FavIcon, ShowCopyrightInformation, ShowPoweredBySyncfusion, Use24HourFormat,  DisableUserPreference, DataLanguage, DateFormat, TimeZone</code>"
          },
          "Value": {
            "type": "string",
            "description": "Site settings value.<br /><br />Values of, <br />1. <code>OrganizationName, SiteUrl, DataLanguage, TimeZone</code> should be `string`<br /><br />2. <code>LoginScreenLogo, EmailLogo, FavIcon</code> should be `Base64EncodedString`<br /><br />3. <code>ShowCopyrightInformation, ShowPoweredBySyncfusion, Use24HourFormat, DisableUserPreference</code> should be `true` or `false`<br /><br />4. <code>DateFormat</code> should be `MM/dd/yyyy` `dd/MM/yyyy` `d MMM, yyyy` `MMM d, yyyy`"
          },
          "FileFormat": {
            "type": "string",
            "description": "Image format type. It must required when update image in site settings.<br />Values allowed are <code>svg, png, jpg, jpeg</code>"
          }
        }
      },
      "ApiUpdateSiteSettingsResponse": {
        "required": [
          "ApiStatus",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          }
        }
      },
      "ApiAddEmbedPinboard": {
        "required": [
          "HomepageName",
          "Pininfo"
        ],
        "type": "object",
        "properties": {
          "HomepageName": {
            "type": "string",
            "description": "Specify the name of the pinboard"
          },
          "Pininfo": {
            "type": "array",
            "description": "Provide the list of Widget IDs, Widget Names, and Dashboard IDs to add the pinboard.",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiAddPininfo"
                }
              ]
            }
          }
        },
        "description": "Add pinboard request details."
      },
      "ApiAddPininfo": {
        "required": [
          "DashboardId",
          "WidgetId",
          "WidgetName"
        ],
        "type": "object",
        "properties": {
          "WidgetName": {
            "type": "string",
            "description": "Specify the Widget Name to add within the pinboard."
          },
          "WidgetId": {
            "type": "string",
            "description": "Specify the Widget ID to add within the pinboard.",
            "format": "guid"
          },
          "DashboardId": {
            "type": "string",
            "description": "Specify the Dashboard ID where the widget exists.",
            "format": "guid"
          }
        }
      },
      "ApiSiteCopyPinboard": {
        "required": [
          "HomepageName",
          "TargetHomepageName",
          "TargetUserEmail"
        ],
        "type": "object",
        "properties": {
          "HomepageName": {
            "type": "string",
            "description": "Specify the name of the copy pinboard."
          },
          "TargetHomepageName": {
            "type": "string",
            "description": "Specify the name of the pinboard which is needed to copy."
          },
          "TargetUserEmail": {
            "type": "string",
            "description": "Specify the mail id of the user from where the pinboard is to be copied."
          }
        },
        "description": "Copy the pinboard request details."
      },
      "ApiAddPinboardResponse": {
        "required": [
          "ApiStatus",
          "Data",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "string",
            "description": "Returns the pinboard id from the API.",
            "format": "guid"
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          }
        },
        "description": "Response details of the pinboard."
      },
      "ApiPublishItemDetail": {
        "required": [
          "ItemId",
          "TargetSiteDetails"
        ],
        "type": "object",
        "properties": {
          "ItemId": {
            "type": "string",
            "description": "Item Id",
            "format": "guid"
          },
          "TargetSiteDetails": {
            "type": "array",
            "description": "Target Site Details",
            "items": {
              "$ref": "#/components/schemas/TargetSiteDetails"
            }
          }
        }
      },
      "TargetSiteDetails": {
        "required": [
          "CategoryName",
          "ClientId",
          "PublishType"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "type": "string",
            "description": "Client Id",
            "format": "guid"
          },
          "SiteIdentifier": {
            "type": "string",
            "description": "Site Identifier (Not required for external publish type)"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category Name"
          },
          "Description": {
            "type": "string",
            "description": "Description"
          },
          "LockDashboard": {
            "type": "boolean",
            "description": "Lock Dashboard"
          },
          "LockDatasource": {
            "type": "boolean",
            "description": "Lock Datasource"
          },
          "Datasources": {
            "type": "array",
            "description": "Data sources",
            "items": {
              "$ref": "#/components/schemas/DataSources"
            }
          },
          "PublishType": {
            "type": "string",
            "enum": [
              "Internal",
              "External"
            ]
          }
        }
      },
      "DataSources": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Datasource Id"
          },
          "IsLocked": {
            "type": "boolean",
            "description": "Is Datasource Locked"
          }
        }
      },
      "ExternalSites": {
        "required": [
          "ClientId",
          "ClientSecret",
          "Name",
          "SiteURL"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name"
          },
          "ClientId": {
            "type": "string",
            "description": "Client Id"
          },
          "ClientSecret": {
            "type": "string",
            "description": "Client Secret"
          },
          "SiteURL": {
            "type": "string",
            "description": "Site URL"
          }
        }
      },
      "DraftItemDetail": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Item ID of the dashboard.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Name of the dashboard."
          }
        },
        "description": "Dashboard item detail."
      },
      "ApiItemsV4": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Item ID of the dashboard.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Name of the dashboard."
          },
          "Description": {
            "type": "string",
            "description": "Description of the dashboard."
          },
          "ItemType": {
            "type": "string",
            "description": "Type of the Item."
          },
          "ItemLocation": {
            "type": "string",
            "description": "Item location."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Specifies the display name of the user who created the item."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Specifies the full name of the user who modified the item."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of the item in string format.",
            "format": "datetime"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of the item in string format.",
            "format": "datetime"
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of the item in date format.",
            "format": "datetime"
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of the item in date format.",
            "format": "datetime"
          },
          "IsMultiDashboard": {
            "type": "boolean",
            "description": "Returns true, if the dashboard is multi-dashboard."
          },
          "IsFavorite": {
            "type": "boolean",
            "description": "Returns true, if it is a favorite item."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true, if the item is public."
          },
          "IsDraft": {
            "type": "boolean",
            "description": "Returns true, if the item is draft."
          },
          "CanRead": {
            "type": "boolean",
            "description": "Specifies the read permission of the item."
          },
          "CanWrite": {
            "type": "boolean",
            "description": "Specifies the write permission of the item."
          },
          "CanDelete": {
            "type": "boolean",
            "description": "Specifies the delete permission of the item."
          },
          "CanDownload": {
            "type": "boolean",
            "description": "Specifies the download permission of the item."
          },
          "CanSchedule": {
            "type": "boolean",
            "description": "Specifies the schedule permission of the item."
          },
          "CanOpen": {
            "type": "boolean",
            "description": "Specifies the open permission of the item."
          },
          "CanMove": {
            "type": "boolean",
            "description": "Specifies the move permission of the item."
          },
          "CanCopy": {
            "type": "boolean",
            "description": "Specifies the copy permission of the item."
          },
          "CanClone": {
            "type": "boolean",
            "description": "Specifies the clone permission of the item."
          },
          "CanCreateItem": {
            "type": "boolean",
            "description": "Specifies the create permission of the item."
          },
          "WidgetInfo": {
            "type": "string",
            "description": "Returns WidgetInfo for the specified dashboard."
          },
          "TabDetail": {
            "type": "array",
            "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
            "items": {
              "$ref": "#/components/schemas/ApiTabDetail"
            }
          }
        },
        "description": "Draft Dashboard item details."
      },
      "UpdateDraftItemDetail": {
        "type": "object",
        "properties": {
          "ItemName": {
            "type": "string",
            "description": "Name of the dashboard."
          },
          "Description": {
            "type": "string",
            "description": "Description of the dashboard."
          }
        },
        "description": "Dashboard item detail."
      },
      "ApiTabDetail": {
        "type": "object",
        "properties": {
          "MultiTabDashboardId": {
            "type": "string",
            "description": "Specifies the dashboard ID of the multi-tabbed dashboard.",
            "format": "guid"
          },
          "DashboardId": {
            "type": "string",
            "description": "Specifies the dashboard ID of the tab.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Specifies the name of the tab."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of the item in string format.",
            "format": "datetime"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of the item in string format.",
            "format": "datetime"
          }
        },
        "description": "Multitab dashboard item detail."
      },
      "ApiUserListV3": {
        "type": "object",
        "properties": {
          "UserList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUserV3"
            }
          }
        },
        "description": "List of users"
      },
      "ApiUserV3": {
        "type": "object",
        "properties": {
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user."
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user."
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user."
          },
          "DirectoryType": {
            "$ref": "#/components/schemas/DirectoryType"
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user."
          },
          "UserId": {
            "type": "integer",
            "description": "ID of the user.",
            "format": "int32"
          },
          "Username": {
            "type": "string",
            "description": "Username of the user."
          },
          "UserStatus": {
            "description": "Returns the status of the user.",
            "$ref": "#/components/schemas/UserStatus"
          }
        },
        "description": "User detail"
      },
      "ApiGroupList": {
        "type": "object",
        "properties": {
          "GroupList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiGroup"
            }
          }
        }
      },
      "ApiGroup": {
        "required": [
          "Id",
          "IsAzureADGroup"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID of the group.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the group."
          },
          "Description": {
            "type": "string",
            "description": "Description of the group."
          },
          "IsAzureADGroup": {
            "type": "boolean",
            "description": "Returns true, if the group is added from Azure Active Directory."
          }
        },
        "description": "Group detail"
      },
      "ApiDownloadCsvTemplate": {
        "required": [
          "ApiStatus",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "FileContent": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Returns CSV file in array of bytes.",
            "format": "byte"
          }
        },
        "description": "Contains response of downloaded CSV template file."
      },
      "ApiCsvUserImportRequest": {
        "required": [
          "CsvFileContent"
        ],
        "type": "object",
        "properties": {
          "CsvFileContent": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Provides the CSV file in an array of bytes.",
            "format": "byte"
          }
        },
        "description": "Contains CSV user import request."
      },
      "ApiCsvUserImportResponse": {
        "required": [
          "ApiStatus",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "CsvErrorContent": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Returns CSV file in array of bytes if the importing users find errors.",
            "format": "byte"
          }
        },
        "description": "Contains response of Csv user import"
      },
      "ApiGroupAdd": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the group."
          },
          "Description": {
            "type": "string",
            "description": "Description of the group."
          }
        },
        "description": "Group detail"
      },
      "ApiGroupListV3": {
        "type": "object",
        "properties": {
          "GroupList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiGroupV3"
            }
          }
        }
      },
      "ApiGroupV3": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of the group."
          },
          "Id": {
            "type": "integer",
            "description": "ID of the group.",
            "format": "int32"
          },
          "DirectoryType": {
            "$ref": "#/components/schemas/DirectoryType"
          },
          "Name": {
            "type": "string",
            "description": "Name of the group."
          },
          "UserCount": {
            "type": "integer",
            "description": "User(s) count",
            "format": "int32"
          }
        }
      },
      "ApiGroupEdit": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the group."
          },
          "Description": {
            "type": "string",
            "description": "Description of the group."
          }
        },
        "description": "Group detail"
      },
      "ApiGroupUsers": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "array",
            "description": "List of user IDs",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "description": "User(s) added/removed from the group."
      },
      "ApiUserList": {
        "type": "object",
        "properties": {
          "UserList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUser"
            }
          }
        },
        "description": "List of users"
      },
      "ApiUser": {
        "type": "object",
        "properties": {
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user."
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user."
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user."
          },
          "IsAzureAdUser": {
            "type": "boolean",
            "description": "Returns true, if the user is added from Azure Active Directory."
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user."
          },
          "UserId": {
            "type": "integer",
            "description": "ID of the user.",
            "format": "int32"
          },
          "Username": {
            "type": "string",
            "description": "Username of the user."
          },
          "UserStatus": {
            "description": "Returns the status of the user.",
            "$ref": "#/components/schemas/UserStatus"
          }
        },
        "description": "User detail"
      },
      "ApiUserPermissionDetail": {
        "type": "object",
        "properties": {
          "PermissionAccess": {
            "type": "string",
            "description": "Specify an access type for item.<br />Values allowed are <code>Create, Read, ReadWrite, ReadWriteDelete</code>"
          },
          "PermissionEntity": {
            "type": "string",
            "description": "Specify an entity of item for permission.<br />Values allowed are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard</code>"
          },
          "UserId": {
            "type": "integer",
            "description": "User ID.",
            "format": "int32"
          },
          "ItemName": {
            "type": "string",
            "description": "Item name."
          },
          "PermissionId": {
            "type": "integer",
            "description": "Permission ID.",
            "format": "int32"
          },
          "ItemId": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid",
            "nullable": true
          }
        },
        "description": "User permission details."
      },
      "ApiGroupPermissionDetail": {
        "type": "object",
        "properties": {
          "PermissionAccess": {
            "type": "string",
            "description": "Specify an access type for item.<br />Values allowed are <code>Create, Read, ReadWrite, ReadWriteDelete</code>"
          },
          "PermissionEntity": {
            "type": "string",
            "description": "Specify an entity of item for permission.<br />Values allowed are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard</code>"
          },
          "GroupId": {
            "type": "integer",
            "description": "Group ID.",
            "format": "int32"
          },
          "ItemName": {
            "type": "string",
            "description": "Item name."
          },
          "PermissionId": {
            "type": "integer",
            "description": "Permission ID.",
            "format": "int32"
          },
          "ItemId": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid",
            "nullable": true
          }
        },
        "description": "Group Permission details."
      },
      "ApiUserPermissionAdd": {
        "required": [
          "PermissionAccess",
          "UserId",
          "PermissionEntity"
        ],
        "type": "object",
        "properties": {
          "PermissionAccess": {
            "type": "string",
            "description": "Specify an access type for item.<br />Values allowed are <code>Create, Read, ReadWrite, ReadWriteDelete</code>"
          },
          "UserId": {
            "type": "integer",
            "description": "User ID.",
            "format": "int32"
          },
          "PermissionEntity": {
            "type": "string",
            "description": "Specify an entity of item for permission.<br />Values allowed are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard</code>"
          },
          "ItemId": {
            "type": "string",
            "description": "Specify the item ID while assigning permission to particular item.",
            "format": "guid",
            "nullable": true
          }
        },
        "description": "Permission details."
      },
      "ApiGroupPermissionAdd": {
        "required": [
          "PermissionAccess",
          "GroupId",
          "PermissionEntity"
        ],
        "type": "object",
        "properties": {
          "PermissionAccess": {
            "type": "string",
            "description": "Specify an access type for item.<br />Values allowed are <code>Create, Read, ReadWrite, ReadWriteDelete</code>"
          },
          "GroupId": {
            "type": "integer",
            "description": "Group ID.",
            "format": "int32"
          },
          "PermissionEntity": {
            "type": "string",
            "description": "Specify an entity of item for permission.<br />Values allowed are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard</code>"
          },
          "ItemId": {
            "type": "string",
            "description": "Specify the item ID while assigning permission to particular item.",
            "format": "guid",
            "nullable": true
          }
        },
        "description": "Permission details."
      },
      "ApiCategoryAdd": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Category name."
          },
          "Description": {
            "type": "string",
            "description": "Category description."
          }
        },
        "description": "Category details."
      },
      "ApiCategoryUpdate": {
        "required": [
          "CategoryId"
        ],
        "type": "object",
        "properties": {
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Category name."
          },
          "Description": {
            "type": "string",
            "description": "Category description."
          }
        },
        "description": "Category details."
      },
      "ApiScheduleRequest": {
        "required": [
          "ExportType",
          "ItemId",
          "Name",
          "NeverEnd",
          "ScheduleType",
          "StartTime",
          "UserList",
          "GroupList",
          "ExternalRecipientsList"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Schedule name."
          },
          "Description": {
            "type": "string",
            "description": "Schedule description."
          },
          "ItemId": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "ExportType": {
            "type": "string",
            "description": "Specifies the export type to schedule the dashboard.<br />Values allowed are <code>Excel, Pdf, Image</code>"
          },
          "StartTime": {
            "type": "string",
            "description": "Specifies the UTC start date-time of schedule.<br />The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
          },
          "NeverEnd": {
            "type": "boolean",
            "description": "When set to true, it creates a schedule with no end.\n\n**Note:** By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
          },
          "EndAfterOccurrence": {
            "type": "integer",
            "description": "Specifies the number of occurrences after which the schedule will be completed.\n\n**For example:** If you provide 5, the schedule will end after the completion of 5 occurrences.",
            "format": "int32"
          },
          "EndDate": {
            "type": "string",
            "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.\n\n**For example:** If you provide an end date-time, the schedule will end when the end date-time is reached."
          },
          "UserList": {
            "type": "array",
            "description": "Provides a list of email addresses or user IDs to the recipients who will get the schedules.",
            "items": {
              "type": "string"
            }
          },
          "GroupList": {
            "type": "array",
            "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ExternalRecipientsList": {
            "type": "array",
            "description": "Provides a list of email addresses to the email recipients who will get the schedules. ",
            "items": {
              "type": "string"
            }
          },
          "ScheduleType": {
            "type": "string",
            "description": "Specifies the schedule type to schedule the dashboard.<br />Values allowed are <code>Hourly, Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
          },
          "IsEnabled": {
            "type": "boolean",
            "description": "Returns true, if the schedule is enabled."
          },
          "FailureNotificationToOwner": {
            "type": "boolean",
            "description": "Returns true, if the failure notification to an owner is enabled."
          },
          "FailureNotificationToRecipient": {
            "type": "boolean",
            "description": "Returns true, if the failure notification to the recipient is enabled."
          },
          "FailureOccurrence": {
            "type": "integer",
            "description": "Failure occurrence count.",
            "format": "int32"
          },
          "ExportFormatInfo": {
            "description": "Schedule export format information.",
            "$ref": "#/components/schemas/ScheduleExportFormat"
          },
          "ScheduleExportLocation": {
            "description": "Schedule export location information.",
            "$ref": "#/components/schemas/ScheduleExportLocation"
          },
          "HourlySchedule": {
            "type": "object",
            "description": "Runs the schedules on an hourly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiHourlySchedule"
              }
            ]
          },
          "DailySchedule": {
            "type": "object",
            "description": "Runs the schedules on a daily basis. ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiDailySchedule"
              }
            ]
          },
          "WeeklySchedule": {
            "type": "object",
            "description": "Runs the schedule on a weekly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiWeeklySchedule"
              }
            ]
          },
          "MonthlySchedule": {
            "type": "object",
            "description": "Runs the schedule on a monthly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlySchedule"
              }
            ]
          },
          "YearlySchedule": {
            "type": "object",
            "description": "Runs the schedules on a yearly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlySchedule"
              }
            ]
          }
        },
        "description": "Details about the schedule passed will be added."
      },
      "ScheduleExportFormat": {
        "type": "object",
        "properties": {
          "Size": {
            "type": "string",
            "description": "PDF page size.<br />Values allowed are <code>A3, A4, A5, Letter</code>",
            "default": "A4"
          },
          "Orientation": {
            "type": "string",
            "description": "PDF page orientation.<br />Values allowed are <code>Landscape, Portrait</code>",
            "default": "Landscape"
          },
          "Extension": {
            "type": "string",
            "description": "Excel or Image extension.<br />Values allowed for Excel file are <code>xlsx, xls</code><br />Values allowed for Image file are <code>jpg, png</code>",
            "default": "xlsx for Excel and jpg for image"
          },
          "Resolution": {
            "type": "integer",
            "description": "Image file resolution.",
            "format": "int32",
            "default": 100
          }
        },
        "description": "Schedule export format information."
      },
      "ScheduleExportLocation": {
        "type": "object",
        "properties": {
          "FtpURL": {
            "type": "string",
            "description": "Use the FTP URL to save the exported file."
          },
          "FtpUsername": {
            "type": "string",
            "description": "FTP username."
          },
          "FtpPassword": {
            "type": "string",
            "description": "FTP password."
          }
        },
        "description": "Schedule export location information."
      },
      "ScheduleExportLocationResponse": {
        "type": "object",
        "properties": {
          "FtpURL": {
            "type": "string",
            "description": "Use the FTP URL to save the exported file."
          },
          "FtpUsername": {
            "type": "string",
            "description": "FTP username."
          }
        },
        "description": "Schedule export location information."
      },
      "ApiHourlySchedule": {
        "required": [
          "ScheduleInterval"
        ],
        "type": "object",
        "properties": {
          "ScheduleInterval": {
            "type": "string",
            "description": "Specifies the hour interval. Based on this interval, the schedule will run continuously until the end time. The format should be `HH:mm`"
          }
        },
        "description": "Runs the schedules on an hourly basis."
      },
      "ApiDailySchedule": {
        "required": [
          "EveryNdays",
          "EveryWeekday",
          "RecurrenceType"
        ],
        "type": "object",
        "properties": {
          "RecurrenceType": {
            "type": "string",
            "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.<br />Values allowed are <code>EveryNdays, EveryWeekday</code>\n\n**Note:** If you choose the recurrence type as EveryNdays, provide a value to the EveryNdays property, and leave the (EveryWeekday) property empty."
          },
          "EveryNdays": {
            "type": "integer",
            "description": "Specifies the day interval the schedule recurs.\n\n**For example:** If you provide 2, the schedule recurs every 2 days.",
            "format": "int32"
          },
          "EveryWeekday": {
            "type": "boolean",
            "description": "For the schedule to recur every working day, set to true."
          }
        },
        "description": "Runs the schedules on a daily basis."
      },
      "ApiWeeklySchedule": {
        "required": [
          "RecurrenceDays",
          "RecurrenceWeeks"
        ],
        "type": "object",
        "properties": {
          "RecurrenceWeeks": {
            "type": "integer",
            "description": "Specifies the week interval the schedule recurs.\n\n**For example:** If you provide 2, the schedule will recur every 2 weeks.  ",
            "format": "int32"
          },
          "RecurrenceDays": {
            "type": "array",
            "description": "Specifies the list of days the schedule recurs.<br />Values allowed are <code>Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</code>\n\n**For example:** If you provide `Sunday`, the schedule will recur sunday's of every 2 weeks.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Runs the schedule on a weekly basis."
      },
      "ApiMonthlySchedule": {
        "required": [
          "RecurrenceType"
        ],
        "type": "object",
        "properties": {
          "RecurrenceType": {
            "type": "string",
            "description": "Specifies the recurrence type, whether the schedule recurs on a day basis or on the customized day basis.<br />Values allowed are <code>DayRecurrence, CustomRecurrence</code>\n\n**Note:** If you choose the recurrence type as DayRecurrence, provide a value to the `DayRecurrence` property and leave the (CustomRecurrence) property empty."
          },
          "DayRecurrence": {
            "type": "object",
            "description": "The schedule recurs on the day specified on the month interval.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlyScheduleDayRecurrence"
              }
            ]
          },
          "CustomRecurrence": {
            "type": "object",
            "description": "The schedule recurs on the customized day of the specified month interval.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlyScheduleCustomRecurrence"
              }
            ]
          }
        },
        "description": "Runs the schedule on a monthly basis."
      },
      "ApiMonthlyScheduleDayRecurrence": {
        "required": [
          "DayInterval",
          "MonthInterval"
        ],
        "type": "object",
        "properties": {
          "DayInterval": {
            "type": "integer",
            "description": "Specifies the number of day interval the schedule recurs.\n\n**For example:** If you provide 10, the schedule will recur every 10th day. ",
            "format": "int32"
          },
          "MonthInterval": {
            "type": "integer",
            "description": "Specifies the number of month interval the schedule recurs.\n\n**For example:** If you provide 3, the schedule will recur 10th day of every 3 months.",
            "format": "int32"
          }
        },
        "description": "The schedule recurs on the day specified on the month interval."
      },
      "ApiMonthlyScheduleCustomRecurrence": {
        "required": [
          "DayOfWeek",
          "MonthInterval",
          "WeekOfMonth"
        ],
        "type": "object",
        "properties": {
          "WeekOfMonth": {
            "type": "string",
            "description": "Specifies the week of the month the schedule recurs.<br />Values allowed are <code>first, second, third, fourth, last</code>\n\n**For example:** If you provide second, the schedule will recur on the second week."
          },
          "DayOfWeek": {
            "type": "string",
            "description": "Specifies the day of the week the schedule recurs.<br />Values allowed are <code>day, weekday, weekendday, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</code>\n\n**For example:** If you provide Sunday, the schedule will recur on the second week of sunday."
          },
          "MonthInterval": {
            "type": "integer",
            "description": "Specifies the number of month interval the schedule recurs.\n\n**For example:** If you provide 5, the schedule will recur second week of sunday's of every 5 months.",
            "format": "int32"
          }
        },
        "description": "The schedule recurs on the customized day of the specified month interval."
      },
      "ApiYearlySchedule": {
        "required": [
          "RecurrenceType",
          "YearInterval"
        ],
        "type": "object",
        "properties": {
          "YearInterval": {
            "type": "integer",
            "description": "Specifies the number of years the schedule recurs.\n\n**For example:** If you provide 5, the schedule will recur every 5 years.",
            "format": "int32"
          },
          "RecurrenceType": {
            "type": "string",
            "description": "Specifies the recurrence type, whether the schedule recurs on a month basis or on the customized month basis.<br />Values allowed are <code>MonthRecurrence, CustomRecurrence</code>\n\n**Note:** If you choose the recurrence type as MonthRecurrence, provide a value to the `MonthRecurrence` property, and leave the (CustomRecurrence) property empty."
          },
          "MonthRecurrence": {
            "type": "object",
            "description": "The schedule recurs on the month and number of years specified in `YearInterval` property.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlyScheduleMonthRecurrence"
              }
            ]
          },
          "CustomRecurrence": {
            "type": "object",
            "description": "The schedule recurs in the customized month based on the number of years provided in the `YearInterval` property.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlyScheduleCustomRecurrence"
              }
            ]
          }
        },
        "description": "Runs the schedules on a yearly basis."
      },
      "ApiYearlyScheduleMonthRecurrence": {
        "required": [
          "DayOfMonth",
          "MonthOfYear"
        ],
        "type": "object",
        "properties": {
          "MonthOfYear": {
            "type": "string",
            "description": "Specifies the month the schedule recurs.<br />Values allowed are <code>January, February, March, April, May, June, July, August, September, October, November, December</code>\n\n**For example:** If you provide April, the schedule will recur in April of every year. Here, the (year) is the value provided in the `YearInterval` property."
          },
          "DayOfMonth": {
            "type": "integer",
            "description": "Specifies the day of the month the schedule recurs.\n\n**For example:** If you provide 20, the schedule will recur 20th April of every year.  Here, the (year) is the value provided in the `YearInterval` property.",
            "format": "int32"
          }
        },
        "description": "The schedule recurs on the month and number of years specified in `YearInterval` property."
      },
      "ApiYearlyScheduleCustomRecurrence": {
        "required": [
          "DayOfWeek",
          "MonthOfYear",
          "WeekOfMonth"
        ],
        "type": "object",
        "properties": {
          "WeekOfMonth": {
            "type": "string",
            "description": "Specifies the week of the month the schedule recurs.<br />Values allowed are <code>first, second, third, fourth, last</code>\n\n**For example:** If you provide second, the schedule will recur on the second week."
          },
          "DayOfWeek": {
            "type": "string",
            "description": "Specifies the day of week the schedule recurs.<br />Values allowed are <code>day, weekday, weekendday, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</code>\n\n**For example:** If you provide Sunday, the schedule will recur on every sunday's of the second week."
          },
          "MonthOfYear": {
            "type": "string",
            "description": "Specifies the month the schedule recurs.<br />Values allowed are <code>January, February, March, April, May, June, July, August, September, October, November, December</code>\n\n**For example:** If you provide March, the schedule will recur on the sunday's of the second week of March every year. Here, the (year) is the value provided in the `YearInterval` property."
          }
        },
        "description": "The schedule recurs in the customized month based on the number of years provided in the `YearInterval` property."
      },
      "ApiScheduleResponse": {
        "type": "object",
        "properties": {
          "ScheduleName": {
            "type": "string",
            "description": "Returns the schedule name."
          },
          "ScheduleId": {
            "type": "string",
            "description": "Returns the schedule ID.",
            "format": "guid"
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "ScheduleType": {
            "type": "string",
            "description": "Returns the schedule type."
          },
          "NextRun": {
            "type": "string",
            "description": "Returns the schedule’s next run."
          }
        },
        "description": "Response details of created schedules."
      },
      "ApiUpdateScheduleRequest": {
        "required": [
          "ItemId",
          "Name",
          "ExportType",
          "ScheduleType",
          "StartTime",
          "NeverEnd"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Schedule name."
          },
          "ItemId": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "ExportType": {
            "type": "string",
            "description": "Specifies the export type to schedule the dashboard.<br />Values allowed are <code>Excel, Pdf, Image</code>"
          },
          "Description": {
            "type": "string",
            "description": "File description"
          },
          "StartTime": {
            "type": "string",
            "description": "Specifies the UTC start date-time of schedule.<br />The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
          },
          "NeverEnd": {
            "type": "boolean",
            "description": "When set to true, it creates a schedule with no end.\n\n**Note:** By default, the NeverEnd is set to true. To set the end time for schedule, fill in the EndAfterOccurrence or EndDate properties; otherwise they remains empty."
          },
          "EndAfterOccurrence": {
            "type": "integer",
            "description": "Specifies the number of occurrences after which the schedule will be completed.\n\n**For example:** If you provide 5, the schedule will end after the completion of 5 occurrences.",
            "format": "int32"
          },
          "EndDate": {
            "type": "string",
            "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.\n\n**For example:** If you provide an end date-time, the schedule will end when the end date-time is reached."
          },
          "ScheduleType": {
            "type": "string",
            "description": "Specifies the schedule type to schedule the dashboard.<br />Values allowed are <code>Hourly, Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) property empty."
          },
          "IsEnabled": {
            "type": "boolean",
            "description": "Returns true, if the schedule is enabled."
          },
          "FailureNotificationToOwner": {
            "type": "boolean",
            "description": "Returns true, if the failure notification to an owner is enabled."
          },
          "FailureNotificationToRecipient": {
            "type": "boolean",
            "description": "Returns true, if the failure notification to the recipient is enabled."
          },
          "FailureOccurrence": {
            "type": "integer",
            "description": "Failure occurrence count.",
            "format": "int32"
          },
          "UserList": {
            "type": "array",
            "description": "Provides a list of email addresses or user IDs to the recipients who will get the schedules.",
            "items": {
              "type": "string"
            }
          },
          "GroupList": {
            "type": "array",
            "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ExternalRecipientsList": {
            "type": "array",
            "description": "Provides a list of email addresses to the email recipients who will get the schedules. ",
            "items": {
              "type": "string"
            }
          },
          "RemoveUserList": {
            "type": "array",
            "description": "Provides a list of email addresses or user IDs to remove recipients from the schedule subscriptions.",
            "items": {
              "type": "string"
            }
          },
          "RemoveGroupList": {
            "type": "array",
            "description": "Provides a list of group IDs to remove groups from the schedule subscriptions.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "RemoveExternalRecipientsList": {
            "type": "array",
            "description": "Provides a list of email addresses for removing email recipients from the schedule subscriptions.",
            "items": {
              "type": "string"
            }
          },
          "ExportFormatInfo": {
            "description": "Schedule export format information.",
            "$ref": "#/components/schemas/ScheduleExportFormat"
          },
          "ScheduleExportLocation": {
            "description": "Schedule export location information.",
            "$ref": "#/components/schemas/ScheduleExportLocation"
          },
          "HourlySchedule": {
            "type": "object",
            "description": "Runs the schedules on an hourly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiHourlySchedule"
              }
            ]
          },
          "DailySchedule": {
            "type": "object",
            "description": "Runs the schedules on a daily basis. ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiDailySchedule"
              }
            ]
          },
          "WeeklySchedule": {
            "type": "object",
            "description": "Runs the schedule on a weekly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiWeeklySchedule"
              }
            ]
          },
          "MonthlySchedule": {
            "type": "object",
            "description": "Runs the schedule on a monthly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlySchedule"
              }
            ]
          },
          "YearlySchedule": {
            "type": "object",
            "description": "Runs the schedules on a yearly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlySchedule"
              }
            ]
          }
        },
        "description": "Details about the schedule passed will be updated."
      },
      "ApiPublicItems": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Value allowed is <code>Dashboard</code>"
          },
          "Name": {
            "type": "string",
            "description": "Item name."
          },
          "Description": {
            "type": "string",
            "description": "Item description."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "CategoryDescription": {
            "type": "string",
            "description": "Category discription."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Specifies the display name of the user who created the item."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Specifies the full name of the user who modified the item."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "IsMultiTabbedDashboard": {
            "type": "boolean",
            "description": "Returns true, if the dashboard is a multi-tabbed dashboard."
          },
          "TabDetail": {
            "type": "array",
            "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
            "items": {
              "$ref": "#/components/schemas/ApiTabDetail"
            }
          },
          "IsFavorite": {
            "type": "boolean",
            "description": "Returns true, if it is a favorite item."
          }
        },
        "description": "Details of public items."
      },
      "ApiFavoriteitems": {
        "type": "object",
        "properties": {
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Dashboard name."
          },
          "Description": {
            "type": "string",
            "description": "Dashboard description."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "CategoryDescription": {
            "type": "string",
            "description": "Category description."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Specifies the display name of the user who created the item."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Specifies the full name of the user who modified the item."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "IsMultiTabbedDashboard": {
            "type": "boolean",
            "description": "Returns true, if the dashboard is a multi-tabbed dashboard."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true, if the item is public."
          }
        },
        "description": "Details of favorite items."
      },
      "ApiUpdateFavorite": {
        "required": [
          "DashboardId",
          "Favorite"
        ],
        "type": "object",
        "properties": {
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "Favorite": {
            "type": "boolean",
            "description": "Specify true to set the item as a favorite item."
          }
        },
        "description": "Details about the favorite item."
      },
      "ApiExportDashboard": {
        "required": [
          "DashboardId",
          "ExportType"
        ],
        "type": "object",
        "properties": {
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "ServerPath": {
            "type": "string",
            "description": "Specifies the category name of the dashboard."
          },
          "ExportType": {
            "type": "string",
            "description": "Export type.<br />Values allowed are <code>Excel, Pdf, Image</code>"
          }
        },
        "description": "Details about the dashboard to be exported."
      },
      "ApiExportDashboardResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "FileContent": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Returns the exported dashboard in an array of bytes.",
            "format": "byte"
          }
        }
      },
      "ItemType": {
        "type": "string",
        "description": "Item type"
      },
      "ApiItems": {
        "type": "object",
        "properties": {
          "CanRead": {
            "type": "boolean",
            "description": "Specifies the read permission of the item."
          },
          "CanWrite": {
            "type": "boolean",
            "description": "Specifies the write permission of the item."
          },
          "CanDelete": {
            "type": "boolean",
            "description": "Specifies the delete permission of the item."
          },
          "CanDownload": {
            "type": "boolean",
            "description": "Specifies the download permission of the item."
          },
          "CanSchedule": {
            "type": "boolean",
            "description": "Specifies the schedule permission of the item."
          },
          "CanOpen": {
            "type": "boolean",
            "description": "Specifies the open permission of the item."
          },
          "CanMove": {
            "type": "boolean",
            "description": "Specifies the move permission of the item."
          },
          "CanCopy": {
            "type": "boolean",
            "description": "Specifies the copy permission of the item."
          },
          "CanClone": {
            "type": "boolean",
            "description": "Specifies the clone permission of the item."
          },
          "CanCreateItem": {
            "type": "boolean",
            "description": "Specifies the create permission of the item."
          },
          "Id": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Datasource, Schedule</code>"
          },
          "Name": {
            "type": "string",
            "description": "Item name."
          },
          "Description": {
            "type": "string",
            "description": "Item description."
          },
          "ItemLocation": {
            "type": "string",
            "description": "Item location."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Specifies the display name of the user who created the item."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Specifies the full name of the user who modified the item."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "IsMultiDashboard": {
            "type": "boolean",
            "description": "Returns true, if the dashboard is multi-dashboard."
          },
          "IsFavorite": {
            "type": "boolean",
            "description": "Returns true, if it is a favorite item."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true, if the item is public."
          },
          "TabDetail": {
            "type": "array",
            "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
            "items": {
              "$ref": "#/components/schemas/ApiTabDetail"
            }
          }
        },
        "description": "Details of items."
      },
      "ApiSpecifiedItemDetail": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Datasource, Schedule</code>"
          },
          "Name": {
            "type": "string",
            "description": "Item name."
          },
          "Description": {
            "type": "string",
            "description": "Item description."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CloneOf": {
            "type": "string",
            "description": "Item ID from where the item was cloned.",
            "format": "guid"
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "Extension": {
            "type": "string",
            "description": "Item extension."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true, if the item is public."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the item is active."
          }
        },
        "description": "Item Details."
      },
      "ApiSlideshowAdd": {
        "required": [
          "Duration",
          "Name",
          "Slides"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Slideshow name."
          },
          "Duration": {
            "type": "integer",
            "description": "The time interval between slides.",
            "format": "int32",
            "minimum": 5,
            "maximum": 300
          },
          "Slides": {
            "type": "array",
            "description": "Slides’ list.",
            "items": {
              "$ref": "#/components/schemas/Slide"
            }
          }
        },
        "description": "Slideshow details."
      },
      "Slide": {
        "type": "object",
        "properties": {
          "OrderNumber": {
            "type": "integer",
            "description": "Slide order.",
            "format": "int32"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Widget</code>"
          },
          "ItemInfo": {
            "type": "object",
            "description": "Slide item details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SlideInfo"
              }
            ]
          }
        },
        "description": "Slide details."
      },
      "SlideInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Item Name."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category Name."
          },
          "TabId": {
            "type": "string",
            "description": "Tab ID.",
            "format": "guid"
          },
          "TabName": {
            "type": "string",
            "description": "Tab Name."
          },
          "ViewId": {
            "type": "string",
            "description": "View ID.",
            "format": "guid"
          },
          "ViewName": {
            "type": "string",
            "description": "View Name."
          },
          "IsMultiDashboard": {
            "type": "boolean",
            "description": "Returns true, if the dashboard is multi-dashboard."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user"
          }
        },
        "description": "Slide item details."
      },
      "PaginatedSlideshowApiResponse": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "array",
            "description": "Returns data from the API.",
            "items": {
              "$ref": "#/components/schemas/SlideshowResponse"
            }
          },
          "TotalResults": {
            "type": "integer",
            "description": "Returns items count of the API request.",
            "format": "int32"
          },
          "Links": {
            "type": "array",
            "description": "Returns pagination links.",
            "items": {
              "$ref": "#/components/schemas/Links"
            }
          }
        }
      },
      "SlideshowResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Slideshow ID.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Slideshow Name."
          },
          "Duration": {
            "type": "integer",
            "description": "Time interval between slides.",
            "format": "int32"
          },
          "CreatedBy": {
            "type": "object",
            "description": "Created user detail.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemUser"
              }
            ]
          },
          "ModifiedBy": {
            "type": "object",
            "description": "Modified user detail.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemUser"
              }
            ]
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "Slides": {
            "type": "array",
            "description": "Slides’ list.",
            "items": {
              "$ref": "#/components/schemas/Slide"
            }
          },
          "Permissions": {
            "type": "object",
            "description": "Permission detail.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Permissions"
              }
            ]
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user"
          }
        },
        "description": "Slide details."
      },
      "Permissions": {
        "type": "object",
        "properties": {
          "CanRead": {
            "type": "boolean",
            "description": "Returns true, if the user has read permission for the slideshow."
          },
          "CanWrite": {
            "type": "boolean",
            "description": "Returns true, if the user has write permission for the slideshow."
          },
          "CanDelete": {
            "type": "boolean",
            "description": "Returns true, if the user has delete permission for the slideshow."
          }
        },
        "description": "Permission details."
      },
      "ApiSlideshowEdit": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Slideshow name."
          },
          "Duration": {
            "type": "integer",
            "description": "Time interval between slides.",
            "format": "int32"
          },
          "Slides": {
            "type": "array",
            "description": "Slides’ list.",
            "items": {
              "$ref": "#/components/schemas/Slide"
            }
          }
        },
        "description": "Slideshow details."
      },
      "ItemUser": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "User ID.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "User name."
          }
        },
        "description": "Slideshow details."
      },
      "PaginatedScheduleApiResponse": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "array",
            "description": "Returns data from the API.",
            "items": {
              "$ref": "#/components/schemas/ApiScheduleItemDetail"
            }
          },
          "TotalResults": {
            "type": "integer",
            "description": "Returns items count of the API request.",
            "format": "int32"
          },
          "Links": {
            "type": "array",
            "description": "Returns pagination links.",
            "items": {
              "$ref": "#/components/schemas/Links"
            }
          }
        }
      },
      "ApiScheduleItemDetail": {
        "type": "object",
        "properties": {
          "CanRead": {
            "type": "boolean",
            "description": "Returns true, if the user has read permission for the schedule."
          },
          "CanWrite": {
            "type": "boolean",
            "description": "Returns true, if the user has write permission for the schedule."
          },
          "CanOpen": {
            "type": "boolean",
            "description": "Returns true, if the user has read permission for the schedule."
          },
          "CanSchedule": {
            "type": "boolean",
            "description": "Returns true, if the user has create permission for the schedule."
          },
          "CanMove": {
            "type": "boolean",
            "description": "Returns true, if the user has move permission for the schedule."
          },
          "CanClone": {
            "type": "boolean",
            "description": "Returns true, if the user has clone permission for the schedule."
          },
          "CanCopy": {
            "type": "boolean",
            "description": "Returns true, if the user has copy permission for the schedule."
          },
          "CanCreateItem": {
            "type": "boolean",
            "description": "Returns true, if the user has create permission for the schedule."
          },
          "CanDelete": {
            "type": "boolean",
            "description": "Returns true, if the user has delete permission for the schedule."
          },
          "CanDownload": {
            "type": "boolean",
            "description": "Returns true, if the user has download permission for the schedule."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category Name."
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Schedule created user name."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Created user ID.",
            "format": "int32"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "Description": {
            "type": "string",
            "description": "Schedule description."
          },
          "ScheduleId": {
            "type": "string",
            "description": "Schedule ID.",
            "format": "guid"
          },
          "ScheduleName": {
            "type": "string",
            "description": "Schedule Name."
          },
          "ItemLocation": {
            "type": "string",
            "description": "Schedule item location."
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Value allowed is <code>Schedule</code>"
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Schedule modified user name."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Modified user ID.",
            "format": "int32"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ExportType": {
            "type": "string",
            "description": "Specifies the export type to schedule the dashboard. Values allowed are <code>Excel, Image, Pdf</code>."
          },
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "DashboardName": {
            "type": "string",
            "description": "Dashboard Name."
          },
          "IsEnabled": {
            "type": "boolean",
            "description": "Returns true, if the schedule is enabled."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the schedule is active."
          },
          "FailureNotificationToOwner": {
            "type": "boolean",
            "description": "Returns true, if the failure notification to an owner is enabled."
          },
          "FailureNotificationToRecipient": {
            "type": "boolean",
            "description": "Returns true, if the failure notification to the recipient is enabled."
          },
          "FailureOccurrence": {
            "type": "integer",
            "description": "Failure occurrence count.",
            "format": "int32"
          },
          "ExportFormatInfo": {
            "description": "Schedule export format information.",
            "$ref": "#/components/schemas/ScheduleExportFormat"
          },
          "ScheduleExportLocation": {
            "description": "Schedule export location information.",
            "$ref": "#/components/schemas/ScheduleExportLocationResponse"
          },
          "StartDate": {
            "type": "string",
            "description": "Specifies the UTC start date-time of schedule.",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed.",
            "format": "date-time"
          },
          "NextSchedule": {
            "type": "string",
            "description": "Specifies the UTC date-time of the upcoming schedule.",
            "format": "date-time"
          },
          "NeverEnd": {
            "type": "boolean",
            "description": "When set to true, it creates a schedule with no end.\n\n Note: By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
          },
          "EndAfterOccurrence": {
            "type": "integer",
            "description": "Specifies the number of occurrences after which the schedule will be completed. \n\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
            "format": "int32"
          },
          "UserList": {
            "type": "array",
            "description": "Provides a list of user IDs to the recipients who will get the schedules.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "GroupList": {
            "type": "array",
            "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ExternalRecipientsList": {
            "type": "array",
            "description": "Provides a list of email addresses to the email recipients who will get the schedules. ",
            "items": {
              "type": "string"
            }
          },
          "HourlySchedule": {
            "description": "Runs the schedules on an hourly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiHourlySchedule"
              }
            ]
          },
          "DailySchedule": {
            "description": "Runs the schedules on a daily basis. ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiDailySchedule"
              }
            ]
          },
          "WeeklySchedule": {
            "description": "Runs the schedule on a weekly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiWeeklySchedule"
              }
            ]
          },
          "MonthlySchedule": {
            "description": "Runs the schedule on a monthly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlySchedule"
              }
            ]
          },
          "YearlySchedule": {
            "description": "Runs the schedules on a yearly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlySchedule"
              }
            ]
          },
          "RecurrenceTypeId": {
            "type": "string",
            "description": "Specifies the schedule type to schedule the dashboard.<br />Values allowed are <code>Hourly, Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
          },
          "RecurrenceType": {
            "type": "string",
            "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.<br />Values allowed are <code>EveryNdays, EveryWeekday</code>\n\n**Note:** If you choose the recurrence type as EveryNdays, provide a value to the `EveryNdays` property, and leave the (EveryWeekday) property empty."
          }
        },
        "description": "Schedule item detail."
      },
      "PasswordAuth": {
        "required": [
          "grant_type",
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Email address of the user.",
            "nullable": false
          },
          "password": {
            "type": "string",
            "description": "Password of the user",
            "nullable": false
          },
          "grant_type": {
            "type": "string",
            "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>password</code>",
            "nullable": false
          }
        }
      },
      "EmbedSecretAuth": {
        "required": [
          "embed_secret",
          "grant_type",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Email address of the user.",
            "nullable": false
          },
          "embed_secret": {
            "type": "string",
            "description": "Embed secret of the site",
            "nullable": false
          },
          "grant_type": {
            "type": "string",
            "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>embed_secret</code>",
            "nullable": false
          }
        }
      }
    },
    "securitySchemes": {
      "bearer <token>": {
        "type": "http",
        "description": "JWT token Authentication",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}