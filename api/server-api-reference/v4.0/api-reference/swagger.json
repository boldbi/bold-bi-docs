{
  "openapi": "3.0.1",
  "info": {
    "title": "API Reference",
    "description": {
      "$ref": "./../../common/api-reference/introduction - v4.0.md"
    },
    "version": "4.0"
  },
  "servers": [
    {
      "url": "Self-Hosted Server: https://{yourdomain}/bi/api/site/<site_identifier>"
    },
    {
      "url": "Bold BI Cloud Server: https://{yourdomain}/bi/api/"
    }
  ],
  "security": [
    {
      "bearer <token>": []
    }
  ],
  "tags": [
    {
      "name": "Interact with our REST API",
      "description": {
        "$ref": "./helperswagger.json#/tryitnow/tryitnowdescription"
      }
    },
    {
      "name": "Password Authentication",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/authentication/getauthenticationdescription"
      }
    },
    {
      "name": "Embed Secret Authentication",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/authentication/getauthenticationdescription"
      }
    },
    {
      "name": "Users",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/userdescription/getusersdescription"
      }
    },
    {
      "name": "Groups",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/groupdescription/getgroupsdescription"
      }
    },
    {
      "name": "Permission",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/permissiondescription/getpermissiondescription"
      }
    },
    {
      "name": "Category",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/categorydescription/getcategorydescription"
      }
    },
    {
      "name": "Dashboard",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/dashboarddescription/getdashboarddescription"
      }
    },
    {
      "name": "Draft Dashboard",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/draftdashboarddescription/getdraftdashboarddescription"
      }
    },
    {
      "name": "Dashboard Views",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/dashbaordviewsdescription/getdashbaordviewsdescription"
      }
    },
    {
      "name": "DataSource",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/datasourcedescription/getdatasourcedescription"
      }
    },
    {
      "name": "Items",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/itemdescription/getitemdescription"
      }
    },
    {
      "name": "Slideshow",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/slideshowdescription/getslideshowdescription"
      }
    },
    {
      "name": "Schedule",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/scheduledescription/getscheduledescription"
      }
    },
    {
      "name": "Pinboard",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/pinboarddescription/getpinboarddescription"
      }
    },
    {
      "name": "Publish to another site",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/publishdescription/getpublishdescription"
      }
    },
    {
      "name": "Attributes",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/attributesdescription/getattributesdescription"
      }
    },
    {
      "name": "Settings",
      "description": {
        "$ref": "./../../common/api-reference/helperswagger.json#/settingsdescription/getsettingsdescription"
      }
    }
  ],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "Password Authentication"
        ],
        "summary": "Authenticate User",
        "description": "Please authenticate with a user password.",
        "operationId": "PasswordAuthentication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordAuth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User logged in successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Email address is empty.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          }
        }
      }
    },
    "/token ": {
      "post": {
        "tags": [
          "Embed Secret Authentication"
        ],
        "summary": "Authenticate User",
        "description": "Authenticate user using embed secret of the site.",
        "operationId": "EmbedSecretAuthentication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbedSecretAuth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User logged in successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Email address is empty.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/views": {
      "post": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Add Dashboard View",
        "description": "Users who have access to the dashboard can save a view by providing the proper dashboard filter details.",
        "operationId": "ItemViews_AddItemView",
        "requestBody": {
          "description": "Information about the dashboard filter for saving the view.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemViewsAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A view has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "View name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add view.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiItemViewsAdd"
      },
      "put": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Edit Dashboard View",
        "description": "Users who have created a view can edit the view by providing the proper dashboard filter details.",
        "operationId": "ItemViews_UpdateItemView",
        "requestBody": {
          "description": "Please provide details about the dashboard filter for editing the view.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemViewsUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A view has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "View name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to edit view.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiItemViewsUpdate"
      }
    },
    "/v4.0/dashboards/{id}/views": {
      "get": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Get Dashboard Views",
        "description": "Retrieve the list of views of the specific dashboard for the current user.",
        "operationId": "ItemViews_ItemViewsByItemId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dashboard ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Views have been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiItemViewResponse"
                  }
                }
              }
            }
          },
          "204": {
            "description": "View list was empty.",
            "content": {}
          },
          "400": {
            "description": "Dashboard ID invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get views.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/views/{id}": {
      "get": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Get Dashboard View by Id",
        "description": "Retrieve the detailed view for the current user.",
        "operationId": "ItemViews_ItemViewByViewId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "View ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A view has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemViewResponse"
                }
              }
            }
          },
          "400": {
            "description": "View ID invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "View detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get item view.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Delete Dashboard View",
        "description": "Users who have created a view can delete it.",
        "operationId": "ItemViews_ItemViewDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "View ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "View ID invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Itemview is not active.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete view.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Dashboards",
        "description": "Users who have created the dashboards are able to view the lists of dashboards.",
        "operationId": "Dashboards_GetDashboards",
        "parameters": [
          {
            "type": "string",
            "name": "serverPath",
            "in": "query",
            "required": false,
            "description": "<br />`\"/\"` + `\"Category name\"`",
            "x-nullable": true,
            "example": " /sales "
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
           "description": "<br />Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  1 ",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
           "description": "<br />Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  10 ",
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, CategoryName, and CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          },
          {
            "name": "exclude_multitabdashboard",
            "in": "query",
            "required": false,
            "description": "<br />\nExclude Multitab dashboards.<br />Values allowed are <code>True/true, False/false</code>",
            "x-nullable": true,
            "schema": {
              "type": "boolean"
            },
            "example": "  True "
          }
        ],
        "responses": {
          "200": {
            "description": "List of dashboards was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApiResponse"
                }
              }
            }
          },
          "204": {
            "description": "Items not found.",
            "content": {}
          },
          "400": {
            "description": "Page does not exists.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/{itemId}/copy": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Copy Dashboard",
        "description": "Users who have access to create on the dashboard can copy it.",
        "operationId": "Dashboards_CopyDashboard",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of the dashboard will be copied.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "The details of the dashboard that were passed will be copied.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCopyDashboardRequestV4"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The dashboard has been copied successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCopyItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied. You do not have permission to copy the dashboard.",
            "content": {}
          },
          "403": {
            "description": "Mark as public has been restricted.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to copy the dashboard.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCopyDashboard"
      }
    },
    "/v4.0/dashboards/public": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Public Dashboards",
        "description": "Retrieve the list of public dashboards for the current user.",
        "operationId": "Dashboards_GetPublicItems",
        "parameters": [
          {
            "name": "itemType",
            "in": "query",
            "description": "Item type.<br />Value allowed is <code>Dashboard</code>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": false,
              "x-schema": {
                "$ref": "#/components/schemas/ItemType"
              }
            },
            "x-schema": {
              "$ref": "#/components/schemas/ItemType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of public dashboards was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiPublicItems"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Public item list empty.",
            "content": {}
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get public items.",
            "content": {}
          }
        }
      },
      "put": {
        "tags" : [
            "Dashboard"
        ],
        "summary" : "Update Public Dashboard",
        "description": "Users who have access to the dashboard and its settings can update the dashboard to be public.",
        "operationId": "Dashboards_UpdatePublicDashboard",
        "requestBody": {
            "description": "The public value that is passed will be updated on the specified dashboard.",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/ApiUpdateDashboardPublicV4"
                    }
                }
            },
            "required": true
        },
        "responses": {
            "200": {
                "description": "Dashboard marked public successfully.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ApiResponse"
                        }
                    }
                }
            },
            "400": {
                "description" : "The content of the request body is missing or incomplete.",
                "content": {}
            },
            "401": {
                "description": "Access denied",
                "content": {}
            },
            "412" : {
                "description": "Mark as public has been restricted.",
                "content": {}
            },
            "417": {
                "description": "Failed to mark dashboard as public.",
                "content": {}
            }
        }
      }
    },
    "/v4.0/dashboards/favorite": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Favorite Dashboards",
        "description": "Retrieve a list of favorite dashboards for the current user.",
        "operationId": "Dashboards_GetFavoriteItems",
        "responses": {
          "200": {
            "description": "List of favorite dashboards was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiFavoriteitems"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No favorite items.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get favorite items.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Update Favorite Dashboard",
        "description": "Users who have read access to the dashboard can update the dashboard as a favorite or non-favorite.",
        "operationId": "Dashboards_UpdateFavoriteItem",
        "requestBody": {
          "description": "The favorite value that is passed will be updated on the specified dashboard.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateFavorite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Favorite dashboard was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "417": {
            "description": "Failed to favorite item.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUpdateFavorite"
      }
    },
    "/v4.0/dashboards/export": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Export Dashboard",
        "description": "Users who have read access to the dashboard can export it to various formats (Excel, PDF, and Image) and receive the exported dashboard as an array of bytes in response.<br /><br />When exporting a multi-tabbed dashboard in image format, the response bytes must be saved in ZIP format.",
        "operationId": "Dashboards_ExportDashboard",
        "requestBody": {
          "description": "Details about the passed dashboard will be exported.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiExportDashboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dashboard exported successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiExportDashboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to Export item.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiExportDashboard"
      }
    },
    "/v4.0/dashboards/{dashboardId}": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Dashboard by Id",
        "description": "Users who have created the dashboard are able to view the detailed information on the dashboard.",
        "operationId": "Dashboards_GetDashboard",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "description": "Dashboard ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpecifiedItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied for the item.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Delete Dashboard",
        "description": "Users who have deletion access to the item type dashboard can delete the item by providing the Dashboard Id.",
        "operationId": "Dashboards_DeleteDashboard",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "description": "Dashboard ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Item ID is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/{dashboardId}/widgets": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Widgets of Dashboard",
        "description": "Users who created the dashboard can view the details of their widgets.",
        "operationId": "Dashboards_GetWidgets",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "description": "ID of the dashboard to get widget list.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of widgets was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiGetWidget"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Widget list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/download/job": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Prepare Dashboard For Download",
        "description": "Initiates the download of the dashboard for users with read and download access.",
        "operationId": "Dashboards_DownloadDashboard",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDownloadDashboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Download job has been initiated for the given dashboards.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Dashboard list is empty.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "The maximum number of dashboards that can be downloaded at a time is 15. Please list 15 or fewer dashboards and try again.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiDownloadDashboard"
      }
    },
    "/v4.0/dashboards/download/job/{jobId}": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Download Dashboard",
        "description": "Please download the content of the dashboard file.",
        "operationId": "Dashboard_DownloadDashboardFile",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Download Job ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard files downloaded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDownloadDashboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid job ID",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/upload/meta": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Meta Info For Dashboard",
        "description": "Retrieve metadata for the downloaded dashboard files.",
        "operationId": "Dashboards_GetMetaInfo",
        "requestBody": {
          "description": "Dashboard file content",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGetMetaInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Metadata for the given dashboard file has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGetMetaInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "File content is empty.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiGetMetaInfo"
      }
    },
    "/v4.0/dashboards/upload": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Upload Dashboard File",
        "description": "Users who have create access to the dashboard can upload it.",
        "operationId": "Dashboards_UploadDashboard",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUploadDashboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dashboard upload started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "File content is empty.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUploadDashboard"
      }
    },
    "/v4.0/dashboards/upload/job/{jobId}": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Upload Dashboard Status",
        "description": "Retrieve the status of an upload dashboard job.",
        "operationId": "Dashboard_GetUploadDashboardJobStatus",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Upload Job ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upload job status retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUploadStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid job ID",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/drafts": {
      "post": {
        "tags": [
          "Draft Dashboard"
        ],
        "summary": "Add Draft Dashboard",
        "description": "Users who have access to create a dashboard can add the draft dashboard.",
        "operationId": "Dashboards_AddDraftDashboard",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Draft dashboard detail.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Draft Dashboard has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DraftItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "403": {
            "description": "Access denied for the item.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "name"
      },
      "get": {
        "tags": [
          "Draft Dashboard"
        ],
        "summary": "Get Draft Dashboards",
        "description": "Users who have created the draft dashboard can view the lists of draft dashboards.",
        "operationId": "Dashboards_GetDraftDashboard",
        "responses": {
          "200": {
            "description": "List of draft dashboards has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiItemsV4"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Items not found.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "403": {
            "description": "Access denied for the item.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/drafts/{itemId}": {
      "put": {
        "tags": [
          "Draft Dashboard"
        ],
        "summary": "Update Draft Dashboard",
        "description": "Users who have created the draft dashboard are able to update the dashboard details.",
        "operationId": "Items_UpdateDraftItemDetail",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "ItemId of the draft dashboard.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Details of the draft dashboard item.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDraftItemDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Draft dashboard detail has been modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update draft item details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "updateDraftItemDetail"
      }
    },
    "/v4.0/datasources": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "Get Datasources",
        "description": "Users who have created the data source are able to view the lists of data sources.",
        "operationId": "DataSource_GetDataSources",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
          "description": "<br />Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  1 ",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "<br />Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  10 ",
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, and CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          }
        ],
        "responses": {
          "200": {
            "description": "List of data sources has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApiResponse"
                }
              }
            }
          },
          "204": {
            "description": "Items not found.",
            "content": {}
          },
          "400": {
            "description": "Page does not exists.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "403": {
            "description": "Access denied for the item.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "Create Data Source",
        "description": "Create a data source.",
        "operationId": "DataSource_CreateDataSource",
        "requestBody": {
          "description": "The following documentation explains how a user can create a data source using the API.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDataSourceAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The data source has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebAPItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Item name is empty",
            "content": {}
          },
          "401": {
            "description": " Unauthorized.",
            "content": {}
          },
          "404": {
            "description": "Requested resource is not found.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "411": {
            "description": "Content-length is required.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiDataSourceConnectionAdd"
      },
      "put": {
        "tags": [
          "DataSource"
        ],
        "summary": "Update Data Source",
        "description": "Update an existing data source on a specific site. \n\n **Note**: The Update data source API is only applicable for a live SQL data source.",
        "operationId": "DataSource_UpdateDataSource",
        "requestBody": {
          "description": "Details about the passed data source will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateDataSourceAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The data source has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebAPItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Item name is empty",
            "content": {}
          },
          "401": {
            "description": " Unauthorized.",
            "content": {}
          },
          "404": {
            "description": "Requested resource is not found.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "411": {
            "description": "Content-length is required.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUpdateDataSourceV4"
      }
    },
    "/v4.0/datasources/{itemId}/copy": {
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "Copy Datasource",
        "description": "Users who have create access to the data source can copy the data source.",
        "operationId": "DataSource_CopyDataSource",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "ItemId of the data source will be copied.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Details of the passed data source will be copied.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCopyDataSourceRequestV4"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The data source has been copied successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCopyItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Data source name already exist.",
            "content": {}
          },
          "417": {
            "description": "Failed to copy the data source.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCopyDatasource"
      }
    },
    "/v4.0/datasources/{datasourceId}": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "Get Datasource by Id",
        "description": "Users who have created the data source are able to view the details of the data source.",
        "operationId": "DataSource_GetDataSource",
        "parameters": [
          {
            "name": "datasourceId",
            "in": "path",
            "description": "Datasource ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data source detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpecifiedItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "DataSource"
        ],
        "summary": "Delete Datasource",
        "description": "Users who have delete access to the item type data source can delete the item by providing the Datasource Id.",
        "operationId": "DataSource_DeleteDataSource",
        "parameters": [
          {
            "name": "datasourceId",
            "in": "path",
            "description": "Datasource ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get Items",
        "description": "Retrieve the respective list of items for the item types (Category, Dashboard, Datasource, and Schedule) for the current user.",
        "operationId": "Items_GetItems",
        "parameters": [
          {
            "name": "itemType",
            "in": "query",
            "description": "Item type.<br />(Values allowed are <code>Category, Dashboard, Datasource, and Schedule</code>)",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": false,
              "x-schema": {
                "$ref": "#/components/schemas/ItemType"
              }
            },
            "x-schema": {
              "$ref": "#/components/schemas/ItemType"
            }
          },
          {
            "type": "string",
            "name": "serverPath",
            "in": "query",
            "required": false,
            "description": "<br />`\"/\"` + `\"Category name\"`",
            "x-nullable": true,
            "example": " /sales "
          }
        ],
        "responses": {
          "200": {
            "description": "List of items has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiItems"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Item list is empty.",
            "content": {}
          },
          "400": {
            "description": "Invalid item type.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/items/{id}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get Item by Id",
        "description": "Retrieve the respective item details for the current users' item types (Category, Dashboard, Datasource, and Schedule).",
        "operationId": "Items_GetItemDetail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpecifiedItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete Item",
        "description": "Users who have delete access to the item types Category, Dashboard, Datasource, and Schedule can delete the item by providing the item ID (Category ID, Dashboard ID, Datasource ID, and Schedule ID).",
        "operationId": "Items_DeleteItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/items/is-name-exists": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Check Item name existence",
        "description": "The current user can check whether the item (category, dashboard, data source, schedule, slideshow) already exists by providing the item name (category name, dashboard name, data source name, schedule name, slideshow name) and item type (Category, Dashboard, Data source, Schedule, Slideshow) in the request body.",
        "operationId": "Items_IsItemNameExists",
        "requestBody": {
          "description": "Details about the item that was passed will be checked.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiValidateItemName"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns an item existence",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete",
            "content": {}
          },
          "404": {
            "description": "Category details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST",
            "content": {}
          },
          "406": {
            "description": "Invalid item type.",
            "content": {}
          },
          "417": {
            "description": "Failed to validate item name.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add User",
        "description": "Adds the new user.",
        "operationId": "Users_AddUser",
        "requestBody": {
          "description": "Detail of the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The user was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Email address already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userDetail"
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Users",
        "description": "Retrieve the list of user details.",
        "operationId": "Users_GetUsers",
        "responses": {
          "200": {
            "description": "List of user details has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserListV3"
                }
              }
            }
          },
          "204": {
            "description": "User list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/users/{user}/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Groups",
        "description": "Retrieve the list of group details for the specific user.",
        "operationId": "Users_GetGroupsOfUser",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID or Email address of the user.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user's groups has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGroupList"
                }
              }
            }
          },
          "204": {
            "description": "Group list empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get group details.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/csv-users/download-template": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Download CSV Template",
        "description": "Download the CSV template in order to import the CSV users.",
        "operationId": "Users_DownloadCsvTemplate",
        "responses": {
          "200": {
            "description": "CSV template was downloaded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDownloadCsvTemplate"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to download CSV template file.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/csv-users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add CSV User",
        "description": "Please add the list of users using the CSV file.",
        "operationId": "Users_CsvUserImport",
        "requestBody": {
          "description": "Details passed to add the CSV of users.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCsvUserImportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User(s) created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCsvUserImportResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "417": {
            "description": "Failed to add CSV users.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCsvUserImportRequest"
      }
    },
    "/v4.0/users/{user}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a User by Email or Username",
        "description": "Retrieve the specific user detail.",
        "operationId": "Users_GetUserDetail",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Username or email address of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserDetailV4"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve user detail.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "Update the specific user details.",
        "operationId": "Users_EditUser",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Username or email address of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Detail of the user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The user was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "500": {
            "description": "Failed to update user profile detail.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userDetail"
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "Delete the specific user.",
        "operationId": "Users_DeleteUser",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Username or email address of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Email address is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete user.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/groups": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add Group",
        "description": "Add the new group to group the users.",
        "operationId": "Groups_AddGroup",
        "requestBody": {
          "description": "Detail of the group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Group name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add group.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "groupDetail"
      },
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Groups",
        "description": "Retrieve the list of group details.",
        "operationId": "Groups_GetGroups",
        "responses": {
          "200": {
            "description": "List of groups has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGroupListV3"
                }
              }
            }
          },
          "204": {
            "description": "Group list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/groups/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group by Id",
        "description": "Retrieve the specific group details.",
        "operationId": "Groups_GetGroupDetail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGroup"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get group detail.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update Group",
        "description": "Update the specific group details.",
        "operationId": "Groups_EditGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Detail of the group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Group name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update group ",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "groupDetail"
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete Group",
        "description": "Remove the specific group.",
        "operationId": "Groups_DeleteGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "406": {
            "description": "Invalid Group ID.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete the group.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/groups/azure-active-directory/import": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add Azure AD Groups",
        "description": "Import the group(s) from Azure Active Directory.",
        "operationId": "Groups_AddAzureADGroup",
        "requestBody": {
          "description": "Name of the group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAzureADGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group has been imported successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAzureGroupImportResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "412": {
            "description": "Azure AD details are not configured.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "groupName"
      }
    },
    "/v4.0/groups/{id}/users": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add User(s) to Group",
        "description": "Add the list of users to the specific group.",
        "operationId": "Groups_AddUserToGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "User(s) added to the group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupUsers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User(s) added to the group successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "417": {
            "description": "Failed to add user in to group.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiGroupUsers"
      },
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group Users",
        "description": "Retrieve the list of user details for the specific group.",
        "operationId": "Groups_GetUsersFromGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of group's users has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserList"
                }
              }
            }
          },
          "204": {
            "description": "User list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "Invalid Group ID.",
            "content": {}
          },
          "417": {
            "description": "Failed to check whether the group is active or not.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete Group User",
        "description": "Delete the list of users from the specific group.",
        "operationId": "Groups_DeleteUserFromGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "User(s) removed from the group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupUsers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "406": {
            "description": "Invalid group ID.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete user from group.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiGroupUsers"
      }
    },
    "/v4.0/settings/site": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Site Settings",
        "description": "Retrieve the list of site setting details for the particular site if the user has administrative rights for the site settings.",
        "operationId": "Administration_GetSiteSettings",
        "parameters": [
          {
            "type": "string",
            "name": "key",
            "in": "query",
            "required": false,
            "description": "<br />\nList of site setting keys separated by <code>,</code>",
            "x-nullable": true,
            "default": null,
            "example": " OrganizationName,SiteUrl "
          }
        ],
        "responses": {
          "200": {
            "description": "Site setting details has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSiteSettingList"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve site settings details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Site Settings",
        "description": "Users who have administrative rights to the site are able to update the site settings.",
        "operationId": "Administration_UpdateSiteSettings",
        "requestBody": {
          "description": "The details of the site settings that were passed will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiSiteSettingList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Site settings has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUpdateSiteSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update site setting details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUpdateSiteSettings"
      }
    },
    "/v4.0/settings/dashboard-settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Dashboard Settings",
        "description": "Retrieve the dashboard settings details of the specific site if the user has admin rights for the dashboard settings.",
        "operationId": "Administration_GetDashboardSettings",
        "responses": {
          "200": {
            "description": "Dashboard setting details have been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDashboardSettings"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve dashboard settings.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Dashboard Settings",
        "description": "Users who have admin rights permissions to dashboard settings can update the dashboard settings.",
        "operationId": "Administration_UpdateDashboardSettings",
        "requestBody": {
          "description": "The details of the dashboard settings that have been passed will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateDashboardSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dashboard settings have been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT",
            "content": {}
          },
          "417": {
            "description": "Failed to update site setting details",
            "content": {}
          },
          "500": {
            "description": "Error in the database while executing the query.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/settings/email": {
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Email Settings",
        "description": "Users who have admin rights permission to email settings are able to update the email settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_UpdateEmailSettings",
        "requestBody": {
          "description": "The details of the email settings that have been provided will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateEmailSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Email settings have been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT",
            "content": {}
          },
          "412": {
            "description": "Email address is invalid (or) Authentication type is invalid",
            "content": {}
          },
          "417": {
            "description": "Failed to update email settings",
            "content": {}
          }
        }
      }
    },
    "/v4.0/settings/azure-active-directory": {
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Azure AD Settings",
        "description": "Users who have admin rights permissions to user directories can update the Azure AD settings.",
        "operationId": "Administration_UpdateAzureADSettings",
        "requestBody": {
          "description": "The details of the azure active directory settings that have been passed will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateAzureADSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Azure AD settings have been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT",
            "content": {}
          },
          "412": {
            "description": "Connection details are invalid",
            "content": {}
          },
          "417": {
            "description": "Failed to update azure ad settings",
            "content": {}
          }
        }
      }
    },
    "/v4.0/settings/schedule-synchronization/azure-active-directory": {
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Azure AD Schedule Synchronization Settings",
        "description": "Users with administrative permissions to user directories can update the Azure AD schedule synchronization settings.",
        "operationId": "Administration_UpdateAzureADScheduleSettings",
        "requestBody": {
          "description": "The details of the Azure Active Directory schedule synchronization settings that have been provided will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateAzureAdScheduleSynchronizationSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Azure AD Schedule Synchronization settings have been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUpdateAzureAdScheduleSynchronizationSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT",
            "content": {}
          },
          "406": {
            "description": "Schedule type is invalid (or) Recurrence type is invalid",
            "content": {}
          },
          "412": {
            "description": "Start time is invalid",
            "content": {}
          },
          "417": {
            "description": "Failed to update azure ad synchronization schedule settings",
            "content": {}
          }
        }
      }
    },
    "/v4.0/settings/accounts": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Account Settings",
        "description": "Retrieve the account setting details of the specific site if the user has administrative rights for the account settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_GetAccountSettings",
        "responses": {
          "200": {
            "description": "Account setting details have been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountSettings"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve account settings",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Account Settings",
        "description": "Users who have admin rights permissions to account settings can update the account settings.",
        "operationId": "Administration_UpdateAccountSettings",
        "requestBody": {
          "description": "The details of the account settings that have been passed will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateAccountSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Account settings have been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT",
            "content": {}
          },
          "412": {
            "description": "Email settings are not configured (or) user email field is set as false for Email activation type"
          },
          "417": {
            "description": "Failed to update account settings"
          }
        }
      }
    },
    "/v4.0/settings/security/cors": {
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Cors Settings",
        "description": "Users who have administrative rights permission to security settings can update the CORS settings.",
        "operationId": "Administration_UpdateCorsSettings",
        "requestBody": {
          "description": "The details of the CORS settings that have been passed will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateCorsSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Cors settings have been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT",
            "content": {}
          },
          "417": {
            "description": "Failed to update cors settings",
            "content": {}
          }
        }
      }
    },
    "/v4.0/settings/embed-secret/generate": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Generate Embed Secret",
        "description": "Generate the embed secret for the specific site only if the user has administrative rights for the site settings.",
        "operationId": "Administration_GenerateEmbedSecret",
        "responses": {
          "200": {
            "description": "Embed Secret has been generated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEmbedSecretSettings"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve embed secret.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/attribute/user": {
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Add User Attribute",
        "description": "Add the attribute for a specific user.",
        "operationId": "Attribute_AddUserAttribute",
        "requestBody": {
          "description": "Attribute object, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserAddAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attribute details created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Attribute name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add attribute details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "attribute"
      },
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Update User Attribute",
        "description": "Updates the specific attribute of a specific user.",
        "operationId": "Attribute_UpdateUserAttribute",
        "requestBody": {
          "description": "Attribute object, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserUpdateAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attribute details was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Attribute name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update attribute details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "attribute"
      }
    },
    "/v4.0/attribute/user/{id}": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Get User Attributes",
        "description": "Retrieve the list of attributes of the specific user.",
        "operationId": "Attribute_GetUserCustomAttribute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attribute details has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "User ID invalid.",
            "content": {}
          },
          "404": {
            "description": "Attributes not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get attribute details.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Delete User Attribute",
        "description": "Delete the attribute of the specific user.",
        "operationId": "Attribute_DeleteUserAttribute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User attribute ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Attribute ID invalid.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete attribute details.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/attribute/group": {
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Add Group Attribute",
        "description": "Add the attribute for a specific group.",
        "operationId": "Attribute_AddGroupAttribute",
        "requestBody": {
          "description": "Attribute object, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupAddAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attribute details created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Attribute name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add attribute details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "attribute"
      },
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Update Group Attribute",
        "description": "Retrieve the list of attributes of the specific group.",
        "operationId": "Attribute_UpdateGroupAttribute",
        "requestBody": {
          "description": "Attribute object, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupUpdateAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attribute details was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Attribute name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update attribute details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "attribute"
      }
    },
    "/v4.0/attribute/group/{id}": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Get Group Attributes",
        "description": "Retrieve the list of attributes of the specific group.",
        "operationId": "Attribute_GetGroupCustomAttribute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attribute details has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Group ID invalid.",
            "content": {}
          },
          "404": {
            "description": "Attributes not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get attribute details.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Delete Group Attribute",
        "description": "Remove the attribute from the specific group.",
        "operationId": "Attribute_DeleteGroupAttribute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group attribute ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Attribute ID invalid.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete attribute details.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/attribute/site": {
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Add Site Attribute",
        "description": "Add the attribute for a specific site.",
        "operationId": "Attribute_SaveSiteAttribute",
        "requestBody": {
          "description": "Attribute object, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSiteAddAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attribute details created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Attribute name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add attribute details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "attribute"
      },
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Get Site Attributes",
        "description": "Retrieve the list of attributes for the specific site.",
        "operationId": "Attribute_GetSiteAttributes",
        "responses": {
          "200": {
            "description": "Attribute details has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Attributes not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get attribute details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Update Site Attribute",
        "description": "Update the specific attribute of a particular site.",
        "operationId": "Attribute_UpdateSiteAttributes",
        "requestBody": {
          "description": "Attribute object, which is sent as request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSiteUpdateAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attribute details was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Attribute name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update attribute details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "attribute"
      }
    },
    "/v4.0/attribute/site/{id}": {
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Delete Site Attribute",
        "description": "Remove the attribute from the specific site.",
        "operationId": "Attribute_DeleteSiteAttributes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Site attribute ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Attribute ID invalid.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete attribute details.",
            "content": {}
          }
        }
      }
    },
    "/pinboard": {
      "post": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Add Pinboard",
        "description": "Add the new pinboard to a specific site.",
        "operationId": "Pinboard_AddEmbedPinBoard",
        "requestBody": {
          "description": "Details about adding pinboard.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAddEmbedPinboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pinboard has been added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAddPinboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Pinboard name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add pinboard details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiPinboardAdd"
      }
    },
    "/pinboard/copy": {
      "post": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Copy Pinboard",
        "description": "Copy the pinboard on the specific site.",
        "operationId": "Pinboard_CopyEmbedPinBoard",
        "requestBody": {
          "description": "Details about the copy pinboard.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSiteCopyPinboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pinboard has been copied successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAddPinboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Pinboard name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to copy pinboard details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiPinboardCopy"
      }
    },
    "/pinboard/{name}": {
      "get": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Get Pinboard by Name",
        "description": "Users who have create access for the dashboard can retrieve pinboard items.",
        "operationId": "Dashboards_GetEmbedPinBoard",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Pinboard name",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pinboard detail have been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve the pinboard detail.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Update Pinboard",
        "description": "Update an existing pinboard on a specific site.",
        "operationId": "Pinboard_UpdateEmbedPinBoard",
        "parameters": [
          {
            "name": "pinboard",
            "in": "path",
            "description": "Pinboard name",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Details regarding the passed pinboard will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateEmbedPinboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pinboard Updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied for the item."
          },
          "404": {
            "description": "Item not found"
          },
          "405": {
            "description": "Request type was not PUT."
          },
          "412": {
            "description": "Pinboard is not available as default page."
          },
          "417": {
            "description": "Failed to update pinboard details."
          }
        },
        "x-codegen-request-body-name": "apiEmbedPinbaord"
      },
      "delete": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Delete Pinboard",
        "description": "Users who have created a pinboard can delete it.",
        "operationId": "Pinboard_RemoveEmbedPinBoard",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Pinboard name",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Item name is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete the pinboard details.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/pinboard/is-name-exists": {
      "post": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Check Pinboard name existence",
        "description": "The current user can check whether the pinboard already exists by providing the name in the request body.",
        "operationId": "Pinboard_IsPinBoardNameExists",
        "requestBody": {
          "description": "Details about the item that was passed will be checked.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiValidatePinboardName"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns an item existence",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST",
            "content": {}
          },
          "500": {
            "description": "Error in the database while executing the query.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/publish/item": {
      "post": {
        "tags": [
          "Publish to another site"
        ],
        "summary": "Publish Dashboard",
        "description": "Publish the dashboard from one site to other site(s). \n\n<B> **Note**: </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Publish_Dashboard",
        "requestBody": {
          "description": "Details about the publish dashboard, which have been sent as a request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPublishItemDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The dashboard is being published to one or more sites.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Site not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiPublishItemDetail"
      }
    },
    "/v4.0/publish/items": {
      "get": {
        "tags": [
          "Publish to another site"
        ],
        "summary": "Get Published Items",
        "description": "Please provide the details of the published items.",
        "operationId": "Publish_GetPublishedItemsDetails",
        "responses": {
          "200": {
            "description": "Published Items details have been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishedItemsResponse"
                }
              }
            }
          },
          "204": {
            "description": "No content.",
            "content": {}
          },
          "405": {
            "description": "Request type is not GET.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/publish/external-sites/add": {
      "post": {
        "tags": [
          "Publish to another site"
        ],
        "summary": "Add External Site",
        "description": "Please provide the details of the external site.\n\n<B> **Note**: </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Add_External_Sites",
        "requestBody": {
          "description": "Details about the external site that was requested to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalSites"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The external site was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or empty.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "External site name is duplicated.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ExternalSites"
      }
    },
    "/v4.0/permissions/users": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Add User Permission",
        "description": "Administrators can add a new permission to a specific user by providing the permission details.",
        "operationId": "Permission_AddUserPermission",
        "requestBody": {
          "description": "Details about the permissions that were passed will be added to the specified user id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserPermissionAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User permission has been added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail  not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Permission already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add user permission.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUserPermissionAdd"
      }
    },
    "/v4.0/permissions/users/{id}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get User Permissions",
        "description": "Administrators can obtain the list of permissions for the specific user.",
        "operationId": "Permission_GetUserPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user permissions has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiUserPermissionDetail"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Permission list is empty.",
            "content": {}
          },
          "400": {
            "description": "Invalid user ID.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "User detail not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Permission"
        ],
        "summary": "Delete User Permission",
        "description": "Administrators have the ability to delete a specific user's permission.",
        "operationId": "Permission_DeleteUserPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User permission ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Permission id is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to remove permission.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/permissions/groups": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Add Group Permission",
        "description": "Administrators can add a new permission to the specific group by providing permission details.",
        "operationId": "Permission_AddGroupPermission",
        "requestBody": {
          "description": "Details about the permissions that were passed will be added to the specified group ID.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGroupPermissionAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group permission was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group  detail  not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Permission already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add group permission.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiGroupPermissionAdd"
      }
    },
    "/v4.0/permissions/groups/{id}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get Group Permissions",
        "description": "Administrators can obtain the list of permissions for the specific group.",
        "operationId": "Permission_GetGroupPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of group permissions has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiGroupPermissionDetail"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Permission list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Group detail was not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "Invalid group ID.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Permission"
        ],
        "summary": "Delete Group Permission",
        "description": "Administrators have the ability to delete specific group permissions.",
        "operationId": "Permission_DeleteGroupPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group permission ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Permission id is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete group permission.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/categories": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Add Category",
        "description": "Users who have create access for categories can add a new category.",
        "operationId": "Category_AddCategory",
        "requestBody": {
          "description": "Details about the passed category will be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCategoryAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The category was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add category.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCategoryAdd"
      },
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get Categories",
        "description": "Users who have created the categories are able to view the lists of categories.",
        "operationId": "Category_GetCategories",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
           "description": "<br />Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  1 ",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
           "description": "<br />Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  10 ",
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, and CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          }
        ],
        "responses": {
          "200": {
            "description": "The list of categories was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApiResponse"
                }
              }
            }
          },
          "204": {
            "description": "Items not found.",
            "content": {}
          },
          "400": {
            "description": "Page does not exists.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "403": {
            "description": "Access denied for the item.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Update Category",
        "description": "Users who have write access to categories can update an existing category.",
        "operationId": "Category_UpdateCategory",
        "requestBody": {
          "description": "Details about the category that has been passed will be updated to the specified category ID.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCategoryUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The category was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to update category.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiCategoryUpdate"
      }
    },
    "/v4.0/categories/{categoryId}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get Category by Id",
        "description": "Users who created the category are able to view the category details.",
        "operationId": "Category_GetCategory",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpecifiedItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid item ID.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Delete Category",
        "description": "Users who have delete access to the item type category can delete the item by providing the Category Id.",
        "operationId": "Category_DeleteCategory",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Item ID is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "412": {
            "description": "Failed to delete because the category contains dashboards.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/schedules": {
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Add Dashboard Schedule",
        "description": "Users who have create access to the schedule can add a new dashboard schedule.",
        "operationId": "Dashboards_AddSchedule",
        "requestBody": {
          "description": "Details about the schedule that was passed will be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The schedule was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "412": {
            "description": "FTP details invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add schedule.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiScheduleRequest"
      },
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get Dashboard Schedules",
        "description": "Users who have read access to the schedule can access the list of dashboard schedules.",
        "operationId": "Dashboards_GetScheduleItems",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
          "description": "<br />Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  1 ",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
           "description": "<br />Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  10 ",
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, and CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule details have been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedScheduleApiResponse"
                }
              }
            }
          },
          "204": {
            "description": "Item details not found.",
            "content": {}
          },
          "400": {
            "description": "Page does not exists.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve the schedules.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/dashboards/schedules/{scheduleId}": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get Dashboard Schedule by Id",
        "description": "Users who have read access to the schedule can access the specific dashboard schedule.",
        "operationId": "Dashboards_GetSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule detail has been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScheduleItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve the schedule.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Schedule"
        ],
        "summary": "Update Dashboard Schedule",
        "description": "Users who have write access to the schedule can update an existing dashboard schedule.",
        "operationId": "Dashboards_UpdateSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Details about the schedule that was passed will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The schedule was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "412": {
            "description": "FTP details invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update schedule.",
            "content": {}
          },
          "500": {
            "description": "Error in the database while executing the query.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUpdateScheduleRequest"
      }
    },
    "/v4.0/schedules/{scheduleId}/run": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Run Schedule",
        "description": "Users who have read access to the schedule can run that specific schedule.",
        "operationId": "Scheduler_RunSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The schedule started successfully. Schedule recipients will receive notification once a schedule has been completed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to run the schedule.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/schedules/{scheduleId}": {
      "delete": {
        "tags": [
          "Schedule"
        ],
        "summary": "Delete Schedule",
        "description": "Users who have delete access to the item type schedule can delete the specific dashboard schedule by providing the Schedule Id.",
        "operationId": "Scheduler_DeleteSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Item id invalid.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete item.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/slideshows": {
      "post": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Add Slideshow",
        "description": "Users who have created access to the slideshow can add a new slideshow.",
        "operationId": "SlideShow_AddSlideshow",
        "requestBody": {
          "description": "Details about the passed slideshow will be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSlideshowAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A slideshow was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to add slideshow.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiSlideshowAdd"
      },
      "get": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Get Slideshows",
        "description": "Retrieve the list of slideshow details.",
        "operationId": "SlideShow_GetSlideshows",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
         "description": "<br />Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  1 ",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
           "description": "<br />Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  10 ",
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, and CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          }
        ],
        "responses": {
          "200": {
            "description": "List of slideshows was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSlideshowApiResponse"
                }
              }
            }
          },
          "204": {
            "description": "Items not found.",
            "content": {}
          },
          "400": {
            "description": "Page does not exists.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve the slideshows.",
            "content": {}
          }
        }
      }
    },
    "/v4.0/slideshows/{slideshowId}": {
      "get": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Get Slideshow by Id",
        "description": "Users who have read access to the slideshow can access slideshow details.",
        "operationId": "SlideShow_GetSlideshowDetail",
        "parameters": [
          {
            "name": "slideshowId",
            "in": "path",
            "description": "Slideshow ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Slideshow detail was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlideshowResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to retrieve the slideshows.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Update Slideshow",
        "description": "Users who have write access to the slideshow can update the details of the slideshow.",
        "operationId": "SlideShow_EditSlideshow",
        "parameters": [
          {
            "name": "slideshowId",
            "in": "path",
            "description": "Slideshow ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "description": "Details about the passed slideshow will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSlideshowEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A slideshow was modified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to update slideshow.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiSlideshowEdit"
      },
      "delete": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Delete Slideshow",
        "description": "Users have the ability to delete the specific slideshow.",
        "operationId": "SlideShow_DeleteSlideshow",
        "parameters": [
          {
            "name": "slideshowId",
            "in": "path",
            "description": "Slideshow ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content.",
            "content": {}
          },
          "400": {
            "description": "Slideshow id is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          },
          "417": {
            "description": "Failed to delete slideshow.",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Response": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Authentication token of the user."
          },
          "token_type": {
            "type": "string",
            "description": "Type of token assigned by the authorization server."
          },
          "expires_in": {
            "type": "string",
            "description": "The lifetime in seconds of the access token."
          },
          "Email": {
            "type": "string",
            "description": "Email of the authenticated user."
          }
        },
        "x-typeName": "Response"
      },
       "ApiResponse": {
        "required": [
          "ApiStatus",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "object",
            "description": "Returns data from the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
      "PaginatedApiResponse": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "array",
            "description": "Returns data from the API.",
            "items": {
              "$ref": "#/components/schemas/ApiItems"
            }
          },
          "TotalResults": {
            "type": "integer",
            "description": "Returns items count of the API request.",
            "format": "int32"
          },
          "Links": {
            "type": "array",
            "description": "Returns pagination links.",
            "items": {
              "$ref": "#/components/schemas/Links"
            }
          }
        }
      },
      "Links": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Returns the page link."
          },
          "Rel": {
            "type": "string",
            "description": "Returns link type.<br />(Values allowed are <code>First, Next, Prev, Last</code>)"
          },
          "Type": {
            "type": "string",
            "description": "Returns method type.<br />Value allowed is <code>GET</code>"
          }
        }
      },
      "ApiItemViewsAdd": {
        "required": [
          "IsPublic",
          "ItemId",
          "QueryString",
          "ViewName"
        ],
        "type": "object",
        "properties": {
          "ViewName": {
            "type": "string",
            "description": "Specify name of the view."
          },
          "ItemId": {
            "type": "string",
            "description": "Specify ID of the dashboard.",
            "format": "guid"
          },
          "ChildItemId": {
            "type": "string",
            "description": "Specify the ID of the child dashboard if the provided ItemId is the ID of a multi-tab dashboard.",
            "format": "guid"
          },
          "QueryString": {
            "type": "string",
            "description": "Specify the filter query.",
            "example": "Year(OrderDate)=1996"
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Specify <i>true</i> to set the view as public"
          }
        },
        "description": "Add dashboard view request details."
      },
      "ApiItemViewsUpdate": {
        "required": [
          "DashboardId",
          "ViewId"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Specify name of the view."
          },
          "ViewId": {
            "type": "string",
            "description": "Specify ID of the dashboard view.",
            "format": "guid"
          },
          "DashboardId": {
            "type": "string",
            "description": "Specify ID of the dashboard.",
            "format": "guid"
          },
          "QueryString": {
            "type": "string",
            "description": "Specify the filter query.",
            "example": "Year(OrderDate)=1996"
          }
        },
        "description": "Update dashboard view request details."
      },
      "ApiItemViewResponse": {
        "required": [
          "CanDelete",
          "CanEdit",
          "CanShare",
          "IsPublic",
          "ItemId",
          "UserId",
          "ViewId"
        ],
        "type": "object",
        "properties": {
          "CanDelete": {
            "type": "boolean",
            "description": "Specifies the delete permission of the view."
          },
          "CanEdit": {
            "type": "boolean",
            "description": "Specifies the write permission of the view."
          },
          "CanShare": {
            "type": "boolean",
            "description": "Specifies the share permission of the view."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true, if the view is public."
          },
          "ItemId": {
            "type": "string",
            "description": "Specifies the ID of the dashboard.",
            "format": "guid"
          },
          "QueryString": {
            "type": "string",
            "description": "Specifies the filter query string."
          },
          "UserId": {
            "type": "integer",
            "description": "Specifies the ID of the user.",
            "format": "int32"
          },
          "ViewId": {
            "type": "string",
            "description": "Specifies the ID of the view.",
            "format": "guid"
          },
          "ViewName": {
            "type": "string",
            "description": "Specifies the name of the view."
          }
        },
        "description": "Dashboard view response details."
      },
      "ApiCopyItemResponse": {
        "required": [
          "ApiStatus",
          "PublishedItemId",
          "Status",
          "Version"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "PublishedItemId": {
            "type": "string",
            "description": "Returns the published item id",
            "format": "guid"
          },
          "Version": {
            "type": "integer",
            "description": "Returns the version number of the item",
            "format": "int32"
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          }
        },
        "description": "Response details of the copied item."
      },
      "ApiCopyDashboardRequestV4": {
        "required": [
          "CategoryId",
          "IsCopyDatasource",
          "IsPublic",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Dashboard name."
          },
          "Description": {
            "type": "string",
            "description": "Dashboard description."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Specify <i>true</i> to set the item as a public to access dashboard anonymously, otherwise specify <i>false</i>."
          },
          "IsCopyDatasource": {
            "type": "boolean",
            "description": "Specify <i>true</i> to copy the data sources along with dashboard, otherwise specify <i>false<i>."
          }
        },
        "description": "Dashboard details."
      },
      "ApiCopyDataSourceRequestV4": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Data source name."
          },
          "Description": {
            "type": "string",
            "description": "Data source description."
          }
        },
        "description": "Data Source details."
      },
      "WebAPItemResponse": {
        "required": [
          "ApiStatus",
          "Data",
          "Status",
          "StatusMessage"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "Data": {
            "properties": {
              "ScheduleId": {
                "type": "string",
                "description": "Returns the Schedule ID."
              },
              "PublishedId": {
                "type": "string",
                "description": "Returns the Published ID."
              }
            },
            "description": "Return the details of ScheduleId and PublishedID."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          }
        },
        "description": "Response details of the datasource item."
      },
      "ApiDataSourceAttribute": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Data source name."
          },
          "Type": {
            "type": "string",
            "description": "Data source type allowed values are <code>Web Live</code>, <code>MongoDB</code>, <code>amazonathena</code>, <code>amazonauroramysql</code>, <code>amazonaurorapostgresql</code>, <code>amazonrdsmysql</code>, <code>amazonrdsmariadb</code>, <code>amazonrdsamazonauroramysql</code>, <code>amazonrdsamazonaurorapostgresql</code>, <code>amazonrdspostgresql</code>, <code>amazonrdssqlserver</code>, <code>amazonrdsoracle</code>, <code>awsopensearch</code>, <code>redshift</code>, <code>azuresynapseanalytics</code>, <code>cdata</code>, <code>clickhouse</code>, <code>elasticsearch</code>, <code>googlecloudmysql</code>, <code>googlecloudpostgresql</code>, <code>influxdb</code>, <code>mariadb</code>, <code>ssas</code>, <code>mysql</code>, <code>oracle</code>, <code>postgresql</code>, <code>presto</code>, <code>singlestore</code>, <code>sqlserver</code>, <code>snowflake</code>, <code>sparksql</code>, <code>odbc</code>, <code>rockset</code>."
          },
          "Description": {
            "type": "string",
            "description": "Description of data source."
          },
          "Connection": {
            "type": "object",
            "description": "You need to send the connection object for each data source based on its type. Please refer its relative documentation for the connection details as follows [Web Live](/working-with-data-sources/data-connectors/live-web/#connecting-bold-bi-to-web-live-data-source-via-rest-api), [MongoDB](/working-with-data-sources/data-connectors/mongodb/#connecting-bold-bi-to-mongodb-data-source-via-rest-api), [amazonathena](/working-with-data-sources/data-connectors/amazon-athena/#connecting-bold-bi-to-amazon-athena-data-source-via-rest-api), [amazonauroramysql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmariadb](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonauroramysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonrdspostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdssqlserver](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsoracle](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [awsopensearch](/working-with-data-sources/data-connectors/aws-opensearch/#connecting-bold-bi-to-aws-open-search-data-source-via-rest-api), [redshift](/working-with-data-sources/data-connectors/amazon-redshift/#connecting-bold-bi-to-amazon-redshift-data-source-via-rest-api), [azuresynapseanalytics](/working-with-data-sources/data-connectors/azure-synapse-analytics/#connecting-bold-bi-to-azure-synapse-analytics-data-source-via-rest-api), [cdata](/working-with-data-sources/data-connectors/cdata/#connecting-bold-bi-to-cdata-data-source-via-rest-api), [clickhouse](/working-with-data-sources/data-connectors/clickhouse/#connecting-bold-bi-to-clickhouse-data-source-via-rest-api), [elasticsearch](/working-with-data-sources/data-connectors/elastic-search/#connecting-bold-bi-to-elastic-search-data-source-via-rest-api), [googlecloudmysql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [googlecloudpostgresql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [influxdb](/working-with-data-sources/data-connectors/influxdb/#connecting-bold-bi-to-influxdb-data-source-via-rest-api), [mariadb](/working-with-data-sources/data-connectors/mariadb/#connecting-bold-bi-to-mariadb-data-source-via-rest-api), [ssas](/working-with-data-sources/data-connectors/ssas/#connecting-bold-bi-to-microsoft-sql-server-analysis-servicesssas-via-rest-api), [mysql](/working-with-data-sources/data-connectors/mysql/#connecting-bold-bi-to-mysql-data-source-via-rest-api), [oracle](/working-with-data-sources/data-connectors/oracle/#connecting-bold-bi-to-oracle-data-source-via-rest-api), [postgresql](/working-with-data-sources/data-connectors/postgresql/#connecting-bold-bi-to-postgresql-data-source-via-rest-api), [presto](/working-with-data-sources/data-connectors/presto/#connecting-bold-bi-to-presto-data-source-via-rest-api), [singlestore](/working-with-data-sources/data-connectors/single-store/#connecting-bold-bi-to-singlestore-data-source-via-rest-api), [sqlserver](/working-with-data-sources/data-connectors/ms-sql-server/#connecting-bold-bi-to-microsoft-sql-server-data-source-via-rest-api), [snowflake](/working-with-data-sources/data-connectors/snowflake/#connecting-bold-bi-to-snowflake-data-source-via-rest-api), [sparksql](/working-with-data-sources/data-connectors/sparksql/#connecting-bold-bi-to-sparksql-data-source-via-rest-api), [odbc](/working-with-data-sources/data-connectors/odbc/#connecting-bold-bi-to-odbc-data-source-via-rest-api), [rockset](/working-with-data-sources/data-connectors/rockset/#connecting-bold-bi-to-rockset-data-source-via-rest-api)."
          },
          "RefreshSettings": {
            "properties": {
              "StartTime": {
                "type": "string",
                "description": "Start time of the schedule.<br> The format should be ISO 8601 <br> i.e. yyyy-MM-ddTHH:mm:ssZ. E.g. 2022-02-15T06:55:00Z."
              },
              "NeverEnd": {
                "type": "boolean",
                "description": "When set to true, it creates a schedule that never ends.<br><div style=margin-left:15px;>**Note**: The NeverEnd is true by default. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise, it remains empty.</strong>"
              },
              "EndAfterOccurrence": {
                "type": "integer",
                "description": "The number of occurrences after which the schedule will be completed.<br>• For Example: If you provide empty 5, the schedule will end after the completion of 5 occurrences."
              },
              "EndTime": {
                "type": "string",
                "description": "End time after which the schedule should stop. The format should be ISO 8601 i.e. yyyy-MM-ddTHH:mm:ssZ.<br>• For Example: If you provide empty an end date-time, the schedule will end when the end date-time is reached.<br>• E.g. 2022-02-15T06:55:00Z."
              },
              "ScheduleType": {
                "type": "string",
                "description": "Schedule frequency.<br>• Values allowed Weekly only."
              },
              "WeeklySchedule": {
                "properties": {
                  "RecurrenceWeeks": {
                    "type": "integer",
                    "description": "Enter the Recurrence week By default 1."
                  },
                  "RecurrenceDays": {
                    "type": "array",
                    "description": "Enter the day from the list.<br>(Values allowed are <code>Monday, Tuesday, Wednesday, Thursday, Friday</code>).<br> For Example: Monday.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "IsEnabled": {
                    "type": "boolean",
                    "description": "By default it is true."
                  },
                  "FailureNotificationToOwner": {
                    "type": "boolean",
                    "description": "By default it is true."
                  }
                }
              }
            },
            "description": "Refer to the JSON syntax below to configure Refresh settings.\n\n **Note**: Refresh settings is only applicable for the web extract type data source. It will not work for live connection mode data sources."
          }
        },
        "description": "Data Source details."
      },
      "ApiUpdateDataSourceAttribute": {
        "required": [
          "Name",
          "DataSourceId"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Data source name."
          },
          "Type": {
            "type": "string",
            "description": "Data source type allowed values are <code>amazonathena</code>, <code>amazonauroramysql</code>, <code>amazonaurorapostgresql</code>, <code>amazonrdsmysql</code>, <code>amazonrdsmariadb</code>, <code>amazonrdsamazonauroramysql</code>, <code>amazonrdsamazonaurorapostgresql</code>, <code>amazonrdspostgresql</code>, <code>amazonrdssqlserver</code>, <code>amazonrdsoracle</code>, <code>awsopensearch</code>, <code>redshift</code>, <code>azuresynapseanalytics</code>, <code>cdata</code>, <code>clickhouse</code>, <code>elasticsearch</code>, <code>googlecloudmysql</code>, <code>googlecloudpostgresql</code>, <code>influxdb</code>, <code>mariadb</code>, <code>ssas</code>, <code>mysql</code>, <code>oracle</code>, <code>postgresql</code>, <code>presto</code>, <code>singlestore</code>, <code>sqlserver</code>, <code>snowflake</code>, <code>sparksql</code>, <code>odbc</code>, <code>rockset</code>."
          },
          "DataSourceId": {
            "type": "string",
            "description": "Data source ID"
          },
          "Description": {
            "type": "string",
            "description": "Description of data source."
          },
          "Connection": {
            "type": "object",
            "description": "You need to send the connection object for each data source based on its type. Please refer its relative documentation for the connection details as follows [amazonathena](/working-with-data-sources/data-connectors/amazon-athena/#connecting-bold-bi-to-amazon-athena-data-source-via-rest-api), [amazonauroramysql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmariadb](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonauroramysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonrdspostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdssqlserver](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsoracle](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [awsopensearch](/working-with-data-sources/data-connectors/aws-opensearch/#connecting-bold-bi-to-aws-open-search-data-source-via-rest-api), [redshift](/working-with-data-sources/data-connectors/amazon-redshift/#connecting-bold-bi-to-amazon-redshift-data-source-via-rest-api), [azuresynapseanalytics](/working-with-data-sources/data-connectors/azure-synapse-analytics/#connecting-bold-bi-to-azure-synapse-analytics-data-source-via-rest-api), [cdata](/working-with-data-sources/data-connectors/cdata/#connecting-bold-bi-to-cdata-data-source-via-rest-api), [clickhouse](/working-with-data-sources/data-connectors/clickhouse/#connecting-bold-bi-to-clickhouse-data-source-via-rest-api), [elasticsearch](/working-with-data-sources/data-connectors/elastic-search/#connecting-bold-bi-to-elastic-search-data-source-via-rest-api), [googlecloudmysql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [googlecloudpostgresql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [influxdb](/working-with-data-sources/data-connectors/influxdb/#connecting-bold-bi-to-influxdb-data-source-via-rest-api), [mariadb](/working-with-data-sources/data-connectors/mariadb/#connecting-bold-bi-to-mariadb-data-source-via-rest-api), [ssas](/working-with-data-sources/data-connectors/ssas/#connecting-bold-bi-to-microsoft-sql-server-analysis-servicesssas-via-rest-api), [mysql](/working-with-data-sources/data-connectors/mysql/#connecting-bold-bi-to-mysql-data-source-via-rest-api), [oracle](/working-with-data-sources/data-connectors/oracle/#connecting-bold-bi-to-oracle-data-source-via-rest-api), [postgresql](/working-with-data-sources/data-connectors/postgresql/#connecting-bold-bi-to-postgresql-data-source-via-rest-api), [presto](/working-with-data-sources/data-connectors/presto/#connecting-bold-bi-to-presto-data-source-via-rest-api), [singlestore](/working-with-data-sources/data-connectors/single-store/#connecting-bold-bi-to-singlestore-data-source-via-rest-api), [sqlserver](/working-with-data-sources/data-connectors/ms-sql-server/#connecting-bold-bi-to-microsoft-sql-server-data-source-via-rest-api), [snowflake](/working-with-data-sources/data-connectors/snowflake/#connecting-bold-bi-to-snowflake-data-source-via-rest-api), [sparksql](/working-with-data-sources/data-connectors/sparksql/#connecting-bold-bi-to-sparksql-data-source-via-rest-api), [odbc](/working-with-data-sources/data-connectors/odbc/#connecting-bold-bi-to-odbc-data-source-via-rest-api), [rockset](/working-with-data-sources/data-connectors/rockset/#connecting-bold-bi-to-rockset-data-source-via-rest-api)."
          }
        },
        "description": "Data Source details."
      },
      "ApiSiteAddAttribute": {
        "required": [
          "Name",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Attribute Name"
          },
          "Value": {
            "type": "string",
            "description": "Attribute Value"
          },
          "Description": {
            "type": "string",
            "description": "Attribute Description"
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Encrypt Attribute Value"
          }
        }
      },
      "ApiSiteUpdateAttribute": {
        "required": [
          "Id",
          "Name",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Attribute Id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Attribute Name"
          },
          "Value": {
            "type": "string",
            "description": "Attribute Value"
          },
          "Description": {
            "type": "string",
            "description": "Attribute Description"
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Encrypt Attribute Value"
          }
        }
      },
      "ApiValidateItemName": {
        "required": [
          "ItemName",
          "ItemType"
        ],
        "type": "object",
        "properties": {
          "ItemName": {
            "type": "string",
            "description": "Item name.<br />Values allowed are <code>Category name, Dashboard name, Data source name, Schedule name, Slideshow name</code>"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name should be provided if the item type is <code>Dashboard</code>"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Datasource, Schedule, Slideshow</code>"
          }
        }
      },
      "ApiValidatePinboardName": {
        "required": [
          "ItemName"
        ],
        "type": "object",
        "properties": {
          "ItemName": {
            "type": "string",
            "description": "Pinboard name."
          }
        }
      },
      "ApiUserAddAttribute": {
        "required": [
          "Name",
          "UserId",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Attribute Name"
          },
          "Value": {
            "type": "string",
            "description": "Attribute Value"
          },
          "Description": {
            "type": "string",
            "description": "Attribute Description"
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Encrypt Attribute Value"
          },
          "UserId": {
            "type": "integer",
            "description": "User Id",
            "format": "int32"
          }
        }
      },
      "ApiGroupAddAttribute": {
        "required": [
          "GroupId",
          "Name",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Attribute Name"
          },
          "Value": {
            "type": "string",
            "description": "Attribute Value"
          },
          "Description": {
            "type": "string",
            "description": "Attribute Description"
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Encrypt Attribute Value"
          },
          "GroupId": {
            "type": "integer",
            "description": "Group Id",
            "format": "int32"
          }
        }
      },
      "ApiUserUpdateAttribute": {
        "required": [
          "Id",
          "Name",
          "UserId",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Attribute Id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Attribute Name"
          },
          "Value": {
            "type": "string",
            "description": "Attribute Value"
          },
          "Description": {
            "type": "string",
            "description": "Attribute Description"
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Encrypt Attribute Value"
          },
          "UserId": {
            "type": "integer",
            "description": "User Id",
            "format": "int32"
          }
        }
      },
      "ApiGroupUpdateAttribute": {
        "required": [
          "GroupId",
          "Id",
          "Name",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Attribute Id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Attribute Name"
          },
          "Value": {
            "type": "string",
            "description": "Attribute Value"
          },
          "Description": {
            "type": "string",
            "description": "Attribute Description"
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Encrypt Attribute Value"
          },
          "GroupId": {
            "type": "integer",
            "description": "Group Id",
            "format": "int32"
          }
        }
      },
      "ApiUserAdd": {
        "required": [
          "Email",
          "FirstName",
          "Username"
        ],
        "type": "object",
        "properties": {
          "Username": {
            "type": "string",
            "description": "Username of the user. \n\n<B>If you are using a cloud analytics server, then the username field is not required to be used</B>."
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user (Email required only in [Email required](/site-administration/account-settings/#email-required) mode)."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user"
          },
          "Password": {
            "type": "string",
            "description": "Password of the user (Password accepted only in [Automatic activation](/site-administration/account-settings/#automatic-activation) mode)."
          }
        },
        "description": "User detail"
      },
      "ApiUserEdit": {
        "type": "object",
        "properties": {
          "Username": {
            "type": "string",
            "description": "Username of the user"
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user"
          },
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user"
          }
        },
        "description": "User detail"
      },
      "ApiUserDetailV4": {
        "type": "object",
        "properties": {
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user"
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user"
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user"
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user"
          },
          "UserStatus": {
            "description": "Returns the status of the user",
            "$ref": "#/components/schemas/UserStatus"
          },
          "UserId": {
            "type": "integer",
            "description": "ID of the user",
            "format": "int32"
          },
          "Username": {
            "type": "string",
            "description": "Username of the user"
          },
          "DirectoryType": {
            "$ref": "#/components/schemas/DirectoryType"
          },
		  "ExternalProviderId": {
            "type": "string",
            "description": "User Id of the external providers OAuth2 and OpenIDConnect"
          },
          "Avatar": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Profile picture of the user",
            "format": "byte"
          }
        },
        "description": "Detail of the User"
      },
      "UserStatus": {
        "type": "string",
        "enum": [
          "Active",
          "InActive"
        ],
        "x-enumNames": [
          "Active",
          "InActive"
        ]
      },
      "DirectoryType": {
        "type": "string",
        "enum": [
          "All",
          "Local",
          "AzureAD",
          "ExternalDatabase",
		  "OAuth2",
          "OpenIDConnect"
        ],
        "x-enumNames": [
          "All",
          "Local",
          "AzureAD",
          "ExternalDatabase",
		  "OAuth2",
          "OpenIDConnect"
        ]
      },
        "ApiSiteSettingList": {
        "type": "array",
        "description": "Site settings details.",
        "items": {
          "$ref": "#/components/schemas/ApiSiteSettings"
        }
      },
      "ApiSiteSettings": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "description": "Site settings name.<br /><br />Valid keys: <code>OrganizationName, SiteUrl, LoginScreenLogo, EmailLogo, HeaderLogo, FooterLogo, FavIcon, ShowCopyrightInformation, ShowPoweredBySyncfusion, CopyrightInformation, Use24HourFormat, DisableUserPreference, ApplicationLanguage, DataLanguage, DateFormat, TimeZone</code>"
          },
          "Value": {
            "type": "string",
            "description": "Site settings value.<br /><br />Values of, <br />1. <code>OrganizationName, SiteUrl, TimeZone, CopyrightInformation</code> are in `string`<br /><br />2. <code>LoginScreenLogo, EmailLogo, HeaderLogo, FooterLogo, FavIcon</code> are in `Base64EncodedString`<br /><br />3. <code>ShowCopyrightInformation, ShowPoweredBySyncfusion, Use24HourFormat, DisableUserPreference</code> are in `true` or `false`<br /><br />4. <code>DateFormat</code> is in `MM/dd/yyyy` `dd/MM/yyyy` `d MMM, yyyy` `MMM d, yyyy`<br /><br />5. <code>ApplicationLanguage, DataLanguage</code> has language code in the following [link](https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a)<br /><br />6. <code>TimeZone</code> has Timezone value from the following [link](https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11#time-zones)<br /><br />`"
          },
          "FileFormat": {
            "type": "string",
            "description": "Image format type.<br />Values allowed are <code>svg, png, jpg, jpeg</code>"
          }
        }
      },
      "UpdateApiSiteSettingList": {
        "type": "array",
        "description": "Site settings details.",
        "items": {
          "$ref": "#/components/schemas/UpdateApiSiteSettings"
        }
      },
      "UpdateApiSiteSettings": {
        "required": [
          "Key",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "description": "Site settings name.<br /><br />Valid keys: <code>OrganizationName, SiteUrl, LoginScreenLogo, EmailLogo, HeaderLogo, FooterLogo, FavIcon, ShowCopyrightInformation, ShowPoweredBySyncfusion, CopyrightInformation, Use24HourFormat, DisableUserPreference, ApplicationLanguage, DataLanguage, DateFormat, TimeZone</code>"
          },
          "Value": {
            "type": "string",
            "description": "Site settings value.<br /><br />Values of, <br />1. <code>OrganizationName, SiteUrl, CopyrightInformation</code> should be `string`<br /><br />2. <code>LoginScreenLogo, EmailLogo, HeaderLogo, FooterLogo, FavIcon</code> should be `Base64EncodedString`<br /><br />3. <code>ShowCopyrightInformation, ShowPoweredBySyncfusion, Use24HourFormat, DisableUserPreference</code> should be `true` or `false`<br /><br />4. <code>DateFormat</code> should be `MM/dd/yyyy` `dd/MM/yyyy` `d MMM, yyyy` `MMM d, yyyy`<br /><br />5. <code>ApplicationLanguage, DataLanguage</code> should be any language code in the following [link](https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a)<br /><br />6. <code>TimeZone</code> should be any Timezone from the following [link](https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11#time-zones)"
          },
          "FileFormat": {
            "type": "string",
            "description": "Image format type. It must required when update image in site settings.<br />Values allowed are <code>svg, png, jpg, jpeg</code>"
          }
        }
      },
      "ApiUpdateSiteSettingsResponse": {
        "required": [
          "ApiStatus",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          }
        }
      },
      "ApiEmbedSecretSettings": {
        "type": "object",
        "required": [
          "ApiStatus",
          "Status"
        ],
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API"
          },
          "Data": {
            "type": "string",
            "description": "Returns the generated embed secret key."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns the status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          }
        }
      },
      "ApiDashboardSettings": {
        "type": "object",
        "properties": {
          "MakePublicEnabled": {
            "type": "boolean",
            "description": "Returns true, if the public dashboard setting is enabled."
          },
          "DefaultViewsEnabled": {
            "type": "boolean",
            "description": "Returns true, if the default views setting is enabled."
          },
          "AutoSaveEnabled": {
            "type": "boolean",
            "description": "Returns true, if the autosave filter setting is enabled."
          },
          "ThemingEnabled": {
            "type": "boolean",
            "description": "Returns true, if the dashboard theming setting is enabled."
          },
          "UsageAnaylticsEnabled": {
            "type": "boolean",
            "description": "Returns true, if the usage analytics dashboard setting is enabled."
          }
        }
      },
      "ApiUpdateDashboardSettings": {
        "type": "object",
        "properties": {
          "MakePublicEnabled": {
            "type": "boolean",
            "description": "Specify true to enable public dashboard setting.",
            "nullable": true
          },
          "DefaultViewsEnabled": {
            "type": "boolean",
            "description": "Specify true to enable default views setting.",
            "nullable": true
          },
          "AutoSaveEnabled": {
            "type": "boolean",
            "description": "Specify true to enable autosave filter setting.",
            "nullable": true
          },
          "ThemingEnabled": {
            "type": "boolean",
            "description": "Specify true to enable dashboard theming setting.",
            "nullable": true
          },
          "UsageAnaylticsEnabled": {
            "type": "boolean",
            "description": "Specify true to enable usage analytics dashboard setting.",
            "nullable": true
          }
        }
      },
      "ApiUpdateEmailSettings": {
        "required": [
          "SMTPServer",
          "SMTPPort",
          "SenderName",
          "SenderEmailAddress",
          "AuthenticationType",
          "EnableSSL"
        ],
        "type": "object",
        "properties": {
          "SMTPServer": {
            "type": "string",
            "description": "Specify the SMTP server name."
          },
          "SMTPPort": {
            "type": "string",
            "description": "Specify the SMTP port number."
          },
          "SenderName": {
            "type": "string",
            "description": "Specify the Sender name for the email."
          },
          "SenderEmailAddress": {
            "type": "string",
            "description": "Specify the Sender email address."
          },
          "AuthenticationType": {
            "type": "string",
            "description": "Specify the Authentication type of the email.<br />Values allowed are <code>Basic, Anonymous.</code>"
          },
          "Username": {
            "type": "string",
            "description": "Specify the Username for Basic Authentication type."
          },
          "Password": {
            "type": "string",
            "description": "Specify the Password for Basic Authentication type."
          },
          "EnableSSL": {
            "type": "boolean",
            "description": "Specify true to enable SSL to connect with SMTP server.",
            "nullable": true
          }
        }
      },
      "ApiUpdateAzureADSettings": {
        "required": [
          "TenantId",
          "ClientId",
          "ClientSecret"
        ],
        "type": "object",
        "properties": {
          "TenantId": {
            "type": "string",
            "description": "Specify the Tenant name."
          },
          "ClientId": {
            "type": "string",
            "description": "Specify the Client id."
          },
          "ClientSecret": {
            "type": "string",
            "description": "Specify the Client secret."
          },
          "EnableGroupUserImport": {
            "type": "boolean",
            "description": "Specify true to enable import users from the group.\n\n**Note:** By default, the value is true."
          }
        }
      },
      "ApiUpdateAzureAdScheduleSynchronizationSettings": {
        "required": [
          "StartTime",
          "ScheduleType"
        ],
        "type": "object",
        "properties": {
          "EnableSchedule": {
            "type": "boolean",
            "description": "Specify true to enable Azure AD schedule.\n\n**Note:** By default, the value is true."
          },
          "StartTime": {
            "type": "string",
            "description": "Specifies the UTC start date-time of schedule.<br />The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
          },
          "ScheduleType": {
            "type": "string",
            "description": "Specifies the schedule type.<br />Values allowed are <code>Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
          },
          "DailySchedule": {
            "type": "object",
            "description": "Runs the schedules on a daily basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiDailySchedule"
              }
            ]
          },
          "WeeklySchedule": {
            "type": "object",
            "description": "Runs the schedule on a weekly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiWeeklySchedule"
              }
            ]
          },
          "MonthlySchedule": {
            "type": "object",
            "description": "Runs the schedule on a monthly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlySchedule"
              }
            ]
          },
          "YearlySchedule": {
            "type": "object",
            "description": "Runs the schedules on a yearly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlySchedule"
              }
            ]
          }
        }
      },
      "ApiUpdateAzureAdScheduleSynchronizationSettingsResponse": {
        "type": "object",
        "properties": {
          "ScheduleType": {
            "type": "string",
            "description": "Returns the schedule type."
          },
          "NextScheduleDate": {
            "type": "string",
            "description": "Returns the schedule’s next run."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          }
        },
        "description": "Response details of created schedules."
      },
      "ApiAccountSettings": {
        "type": "object",
        "properties": {
          "ActivationType": {
            "type": "string",
            "description": "Returns activation type.<br />Values allowed are <code>AutomaticActivation, EmailActivation.</code>"
          },
          "UserEmailRequired": {
            "type": "boolean",
            "description": "Returns true, if a user email address is required while creating new users."
          }
        }
      },
      "ApiUpdateAccountSettings": {
        "required": [
          "ActivationType"
        ],
        "type": "object",
        "properties": {
          "ActivationType": {
            "type": "string",
            "description": "Specifies the activation type.<br />Values allowed are <code>AutomaticActivation, EmailActivation.</code>."
          },
          "UserEmailRequired": {
            "type": "boolean",
            "description": "Specify true to set the user email address field is required while creating new users in Bold BI server.\n\n**Note:** By default, the value is true."
          }
        }
      },
      "ApiUpdateCorsSettings": {
        "type": "object",
        "properties": {
          "EnableCors": {
            "type": "boolean",
            "description": "Specify true to enable Cors setting.",
            "nullable": true
          },
          "AllowAnyOrigin": {
            "type": "boolean",
            "description": "Specify true to allow all origins in Cors setting."
          },
          "AllowedOrigins": {
            "type": "string",
            "description": "Specified origins will be able to access the resource.\n\n**Note:** Multiple origins are allowed using a comma separator.",
            "example": "https://www.boldbi.com/,https://onpremise-demo.boldbi.com/"
          },
          "AllowCredentials": {
            "type": "boolean",
            "description": "Specify true to allow credentials in Cors setting."
          },
          "AllowedHeaders": {
            "type": "string",
            "description": "Specified HTTP header values will be used when making an actual request.\n\n**Note:** Multiple headers are allowed using comma separator.",
            "example": "Content-Type,Content-Length"
          },
          "AllowedMethods": {
            "type": "string",
            "description": "Specified methods will be able to access the resource.<br />Values allowed are <code>GET, HEAD, POST, PUT, DELETE.</code>\n\n**Note:** Multiple headers are allowed using comma separator .",
            "example": "POST,PUT"
          },
          "ExposeHeaders": {
            "type": "string",
            "description": "Specify header values are exposed to browser based scripts.\n\n**Note:** Multiple headers are allowed using comma separator .",
            "example": "Content-Language, Content-Length, Content-Type"
          },
          "PreflightMaxAge": {
            "type": "integer",
            "format": "int32",
            "description": "Specifies the maximum time a preflight request's results can be cached."
          }
        }
      },
      "ApiAddEmbedPinboard": {
        "required": [
          "HomepageName",
          "Pininfo"
        ],
        "type": "object",
        "properties": {
          "HomepageName": {
            "type": "string",
            "description": "Specify the name of the pinboard"
          },
          "Pininfo": {
            "type": "array",
            "description": "Provide the list of Widget IDs, Widget Names, and Dashboard IDs to add the pinboard.",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiAddPininfo"
                }
              ]
            }
          }
        },
        "description": "Add pinboard request details."
      },
      "ApiUpdateEmbedPinboard": {
        "type": "object",
        "required": [
          "Pininfo"
        ],
        "properties": {
          "SetDefault": {
            "type": "boolean",
            "description": "Specify whether the pinboard should be set as default or removed from default.\n\n **Note**: If your pinboard is not a default pinboard, use null or true instead of false."
          },
          "Pininfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAddPininfo"
            },
            "description": "Provide the list of Widget IDs, Widget Names, and Dashboard IDs to update the pinboard."
          }
        },
        "description": "Update pinboard request details."
      },
      "ApiAddPininfo": {
        "required": [
          "DashboardId",
          "WidgetId",
          "WidgetName"
        ],
        "type": "object",
        "properties": {
          "WidgetName": {
            "type": "string",
            "description": "Specify the Widget Name to add within the pinboard."
          },
          "WidgetId": {
            "type": "string",
            "description": "Specify the Widget ID to add within the pinboard.",
            "format": "guid"
          },
          "DashboardId": {
            "type": "string",
            "description": "Specify the Dashboard ID where the widget exists.",
            "format": "guid"
          }
        }
      },
      "ApiSiteCopyPinboard": {
        "required": [
          "HomepageName",
          "TargetHomepageName",
          "TargetUserEmail"
        ],
        "type": "object",
        "properties": {
          "HomepageName": {
            "type": "string",
            "description": "Specify the name of the copy pinboard."
          },
          "TargetHomepageName": {
            "type": "string",
            "description": "Specify the name of the pinboard which is needed to copy."
          },
          "TargetUserEmail": {
            "type": "string",
            "description": "Specify the mail id of the user from where the pinboard is to be copied."
          }
        },
        "description": "Copy the pinboard request details."
      },
      "ApiAddPinboardResponse": {
        "required": [
          "ApiStatus",
          "Data",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "string",
            "description": "Returns the pinboard id from the API.",
            "format": "guid"
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          }
        },
        "description": "Response details of the pinboard."
      },
      "ApiPublishItemDetail": {
        "required": [
          "ItemId",
          "TargetSiteDetails"
        ],
        "type": "object",
        "properties": {
          "ItemId": {
            "type": "string",
            "description": "Item Id",
            "format": "guid"
          },
          "TargetSiteDetails": {
            "type": "array",
            "description": "Target Site Details",
            "items": {
              "$ref": "#/components/schemas/TargetSiteDetails"
            }
          }
        }
      },
      "TargetSiteDetails": {
        "required": [
          "CategoryName",
          "ClientId",
          "PublishType"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "type": "string",
            "description": "Client Id",
            "format": "guid"
          },
          "SiteIdentifier": {
            "type": "string",
            "description": "Site Identifier (Not required for external publish type)"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category Name"
          },
          "Description": {
            "type": "string",
            "description": "Description"
          },
          "LockDashboard": {
            "type": "boolean",
            "description": "Lock Dashboard"
          },
          "LockDatasource": {
            "type": "boolean",
            "description": "Lock Datasource"
          },
          "Datasources": {
            "type": "array",
            "description": "Data sources",
            "items": {
              "$ref": "#/components/schemas/DataSources"
            }
          },
          "PublishType": {
            "type": "string",
            "enum": [
              "Internal",
              "External"
            ]
          }
        }
      },
      "DataSources": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Datasource Id"
          },
          "IsLocked": {
            "type": "boolean",
            "description": "Is Datasource Locked"
          }
        }
      },
      "ExternalSites": {
        "required": [
          "ClientId",
          "ClientSecret",
          "Name",
          "SiteURL"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name"
          },
          "ClientId": {
            "type": "string",
            "description": "Client Id"
          },
          "ClientSecret": {
            "type": "string",
            "description": "Client Secret"
          },
          "SiteURL": {
            "type": "string",
            "description": "Site URL"
          }
        }
      },
      "DraftItemDetail": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Item ID of the dashboard.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Name of the dashboard."
          }
        },
        "description": "Dashboard item detail."
      },
      "ApiItemsV4": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Item ID of the dashboard.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Name of the dashboard."
          },
          "Description": {
            "type": "string",
            "description": "Description of the dashboard."
          },
          "ItemType": {
            "type": "string",
            "description": "Type of the Item."
          },
          "ItemLocation": {
            "type": "string",
            "description": "Item location."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Specifies the display name of the user who created the item."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Specifies the full name of the user who modified the item."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of the item in string format.",
            "format": "datetime"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of the item in string format.",
            "format": "datetime"
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of the item in date format.",
            "format": "datetime"
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of the item in date format.",
            "format": "datetime"
          },
          "IsMultiDashboard": {
            "type": "boolean",
            "description": "Returns true, if the dashboard is multi-dashboard."
          },
          "IsFavorite": {
            "type": "boolean",
            "description": "Returns true, if it is a favorite item."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true, if the item is public."
          },
          "IsDraft": {
            "type": "boolean",
            "description": "Returns true, if the item is draft."
          },
          "CanRead": {
            "type": "boolean",
            "description": "Specifies the read permission of the item."
          },
          "CanWrite": {
            "type": "boolean",
            "description": "Specifies the write permission of the item."
          },
          "CanDelete": {
            "type": "boolean",
            "description": "Specifies the delete permission of the item."
          },
          "CanDownload": {
            "type": "boolean",
            "description": "Specifies the download permission of the item."
          },
          "CanSchedule": {
            "type": "boolean",
            "description": "Specifies the schedule permission of the item."
          },
          "CanOpen": {
            "type": "boolean",
            "description": "Specifies the open permission of the item."
          },
          "CanMove": {
            "type": "boolean",
            "description": "Specifies the move permission of the item."
          },
          "CanCopy": {
            "type": "boolean",
            "description": "Specifies the copy permission of the item."
          },
          "CanClone": {
            "type": "boolean",
            "description": "Specifies the clone permission of the item."
          },
          "CanCreateItem": {
            "type": "boolean",
            "description": "Specifies the create permission of the item."
          },
          "WidgetInfo": {
            "type": "string",
            "description": "Returns WidgetInfo for the specified dashboard."
          },
          "TabDetail": {
            "type": "array",
            "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
            "items": {
              "$ref": "#/components/schemas/ApiTabDetail"
            }
          }
        },
        "description": "Draft Dashboard item details."
      },
      "UpdateDraftItemDetail": {
        "type": "object",
        "properties": {
          "ItemName": {
            "type": "string",
            "description": "Name of the dashboard."
          },
          "Description": {
            "type": "string",
            "description": "Description of the dashboard."
          }
        },
        "description": "Dashboard item detail."
      },
      "ApiTabDetail": {
        "type": "object",
        "properties": {
          "MultiTabDashboardId": {
            "type": "string",
            "description": "Specifies the dashboard ID of the multi-tabbed dashboard.",
            "format": "guid"
          },
          "DashboardId": {
            "type": "string",
            "description": "Specifies the dashboard ID of the tab.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Specifies the name of the tab."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of the item in string format.",
            "format": "datetime"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of the item in string format.",
            "format": "datetime"
          }
        },
        "description": "Multitab dashboard item detail."
      },
      "ApiUserListV3": {
        "type": "object",
        "properties": {
          "UserList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUserV3"
            }
          }
        },
        "description": "List of users"
      },
      "ApiFailedUsers": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "description": "Username of the user."
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user."
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the user."
          },
          "Message": {
            "type": "array",
            "description": "List of error messages",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiUserV3": {
        "type": "object",
        "properties": {
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user."
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user."
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user."
          },
          "DirectoryType": {
            "$ref": "#/components/schemas/DirectoryType"
          },
		  "ExternalProviderId": {
            "type": "string",
            "description": "User Id of the external providers OAuth2 and OpenIDConnect"
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user."
          },
          "UserId": {
            "type": "integer",
            "description": "ID of the user.",
            "format": "int32"
          },
          "Username": {
            "type": "string",
            "description": "Username of the user."
          },
          "UserStatus": {
            "description": "Returns the status of the user.",
            "$ref": "#/components/schemas/UserStatus"
          }
        },
        "description": "User detail"
      },
      "ApiGroupList": {
        "type": "object",
        "properties": {
          "GroupList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiGroup"
            }
          }
        }
      },
      "ApiGroup": {
        "required": [
          "Id",
          "IsAzureADGroup"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID of the group.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the group."
          },
          "Description": {
            "type": "string",
            "description": "Description of the group."
          },
          "IsAzureADGroup": {
            "type": "boolean",
            "description": "Returns true, if the group is added from Azure Active Directory."
          }
        },
        "description": "Group detail"
      },
       "ApiDownloadCsvTemplate": {
        "required": [
          "ApiStatus",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "FileContent": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Returns CSV file in array of bytes.",
            "format": "byte"
          }
        },
        "description": "Contains response of downloaded CSV template file."
      },
      "ApiCsvUserImportRequest": {
        "required": [
          "CsvFileContent"
        ],
        "type": "object",
        "properties": {
          "CsvFileContent": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Provides the CSV file in an array of bytes.",
            "format": "byte"
          }
        },
        "description": "Contains CSV user import request."
      },
      "ApiCsvUserImportResponse": {
        "required": [
          "ApiStatus",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "CsvErrorContent": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Returns CSV file in array of bytes if the importing users find errors.",
            "format": "byte"
          }
        },
        "description": "Contains response of Csv user import"
      },
      "ApiGroupListV3": {
        "type": "object",
        "properties": {
          "GroupList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiGroupV3"
            }
          }
        }
      },
      "ApiGroupV3": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of the group."
          },
          "Id": {
            "type": "integer",
            "description": "ID of the group.",
            "format": "int32"
          },
          "DirectoryType": {
            "$ref": "#/components/schemas/DirectoryType"
          },
          "Name": {
            "type": "string",
            "description": "Name of the group."
          },
          "UserCount": {
            "type": "integer",
            "description": "User(s) count",
            "format": "int32"
          }
        }
      },
      "ApiUserList": {
        "type": "object",
        "properties": {
          "UserList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUser"
            }
          }
        },
        "description": "List of users"
      },
      "ApiUser": {
        "type": "object",
        "properties": {
          "ContactNumber": {
            "type": "string",
            "description": "Phone number of the user."
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user."
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user."
          },
          "IsAzureAdUser": {
            "type": "boolean",
            "description": "Returns true, if the user is added from Azure Active Directory."
          },
          "Lastname": {
            "type": "string",
            "description": "Last name of the user."
          },
          "UserId": {
            "type": "integer",
            "description": "ID of the user.",
            "format": "int32"
          },
          "Username": {
            "type": "string",
            "description": "Username of the user."
          },
          "UserStatus": {
            "description": "Returns the status of the user.",
            "$ref": "#/components/schemas/UserStatus"
          }
        },
        "description": "User detail"
      },
      "ApiUserPermissionDetail": {
        "type": "object",
        "properties": {
          "PermissionEntity": {
            "type": "string",
            "description": "Specifies an entity of item for permission.<br />Available permission entities are: <code>AllCategories, AllDashboards, AllDataSources, AllSchedules, AllSlideshow, DashboardsInCategory, SpecificCategory, SpecificDashboard, SpecificDataSource, SpecificSchedule, SpecificSlideshow, AllGroups, AllPermissions, AllSettings, SpecificGroup, SpecificPermissions, SpecificSettings, UsersandGroups</code>"
          },
          "PermissionAccess": {
            "type": "string",
            "description": "Specifies an access type for item.<br />Permission access values available for the permission entities: <br />1. <code>AllCategories, AllDataSources, AllSchedules, AllSlideshow</code> has <code>Create, Read, ReadWrite, ReadWriteDelete</code><br /><br />2. <code>AllDashboards, DashboardsInCategory</code> has <code>Create, Read, ReadWrite, ReadWriteDelete, Download</code><br /><br />3. <code>SpecificCategory, SpecificDataSource, SpecificSchedule, SpecificSlideshow</code> has <code>Read, ReadWrite, ReadWriteDelete</code><br /><br />4. <code>SpecificDashboard</code> has <code>Read, ReadWrite, ReadWriteDelete, Download</code><br /><br />5. <code>AllGroups</code> has <code>Create</code><br /><br />6. <code>AllPermissions, AllSettings, SpecificGroup, SpecificPermissions, SpecificSettings, UsersandGroups</code> has <code>Manage</code>"
          },
          "UserId": {
            "type": "integer",
            "description": "Specifies the User ID to whom the permission has been added.",
            "format": "int32"
          },
          "GroupId": {
            "type": "integer",
            "description": "Specifies the Group ID if this permission is inherited from the group where the user is associated; otherwise, its value will be 0.",
            "format": "int32"
          },
          "InheritedFromGroup": {
            "type": "boolean",
            "description": "Specifies the values as <code>true</code> if it is group permission where the user is associated; otherwise, the value will be <code>false</code>."
          },
          "ItemName": {
            "type": "string",
            "description": "Specifies the Item name with respective to its permission entity.<br />Item name available for permission entities: <br />1. <code>SpecificSettings</code> has <code>Dashboard Settings, Embed Settings, Integrations, Look and Feel, Notification Settings, Security, Site Settings, User Directory Settings, Authentication Settings, CORS Settings, SiteCredentials, Accounts Settings, Connectors, Data Process, Email Settings, Widgets</code><br /><br />2. <code>SpecificPermissions</code> has <code>Category, Dashboard, Datasource, Schedule, Slideshow</code><br /><br />3. <code>DashboardsInCategory, SpecificCategory</code> has the Name of <code>Category</code><br /><code>SpecificDashboard</code> has the Name of <code>Dashboard</code><br /><code>SpecificSchedule</code> has the Name of <code>Schedule</code><br /><code>SpecificDataSource</code> has the Name of <code>DataSource</code><br /><code>SpecificSlideshow</code> has the Name of <code>Slideshow</code><br /><br />4. <code>SpecificGroup</code> has group Name."
          },
          "PermissionId": {
            "type": "integer",
            "description": "Specifies the Permission ID.",
            "format": "int32"
          },
          "ItemId": {
            "type": "string",
            "description": "Specifies the item ID of particular item like Category, Dashboard, Datasource,Schedule, Slideshow.<br />Item Id will be available for the following permission entities: <code>SpecificCategory, SpecificDashboard, SpecificDataSource, SpecificSchedule, SpecificSlideshow, DashboardsInCategory</code>",
            "format": "guid",
            "nullable": true
          }
        },
        "description": "User permission details."
      }, 
      "ApiGroupPermissionDetail": {
        "type": "object",
        "properties": {
          "PermissionEntity": {
            "type": "string",
            "description": "Specifies an entity of item for permission.<br />Available permission entities are: <code>AllCategories, AllDashboards, AllDataSources, AllSchedules, AllSlideshow, DashboardsInCategory, SpecificCategory, SpecificDashboard, SpecificDataSource, SpecificSchedule, SpecificSlideshow, AllGroups, AllPermissions, AllSettings, SpecificGroup, SpecificPermissions, SpecificSettings, UsersandGroups</code>"
          },
          "PermissionAccess": {
            "type": "string",
            "description": "Specifies an access type for item.<br />Permission access values available for the permission entities: <br />1. <code>AllCategories, AllDataSources, AllSchedules, AllSlideshow</code> has <code>Create, Read, ReadWrite, ReadWriteDelete</code><br /><br />2. <code>AllDashboards, DashboardsInCategory</code> has <code>Create, Read, ReadWrite, ReadWriteDelete, Download</code><br /><br />3. <code>SpecificCategory, SpecificDataSource, SpecificSchedule, SpecificSlideshow</code> has <code>Read, ReadWrite, ReadWriteDelete</code><br /><br />4. <code>SpecificDashboard</code> has <code>Read, ReadWrite, ReadWriteDelete, Download</code><br /><br />5. <code>AllGroups</code> has <code>Create</code><br /><br />6. <code>AllPermissions, AllSettings, SpecificGroup, SpecificPermissions, SpecificSettings, UsersandGroups</code> has <code>Manage</code>"
          },
          "GroupId": {
            "type": "integer",
            "description": "Specifies the Group ID to which the permission has been added.",
            "format": "int32"
          },
          "ItemName": {
            "type": "string",
            "description": "Specifies the Item name with respective to its permission entity.<br />Item name available for permission entities: <br />1. <code>SpecificSettings</code> has <code>Dashboard Settings, Embed Settings, Integrations, Look and Feel, Notification Settings, Security, Site Settings, User Directory Settings, Authentication Settings, CORS Settings, SiteCredentials, Accounts Settings, Connectors, Data Process, Email Settings, Widgets</code><br /><br />2. <code>SpecificPermissions</code> has <code>Category, Dashboard, Datasource, Schedule, Slideshow</code><br /><br />3. <code>DashboardsInCategory, SpecificCategory</code> has the Name of <code>Category</code><br /><code>SpecificDashboard</code> has the Name of <code>Dashboard</code><br /><code>SpecificSchedule</code> has the Name of <code>Schedule</code><br /><code>SpecificDataSource</code> has the Name of <code>DataSource</code><br /><code>SpecificSlideshow</code> has the Name of <code>Slideshow</code><br />4. <code>SpecificGroup</code> has group Name."
          },
          "PermissionId": {
            "type": "integer",
            "description": "Specifies the Permission ID.",
            "format": "int32"
          },
          "ItemId": {
            "type": "string",
            "description": "Specifies the item ID of particular item like Category, Dashboard, Datasource,Schedule, Slideshow.<br />Item Id will be available for the following permission entities: <code>SpecificCategory, SpecificDashboard, SpecificDataSource, SpecificSchedule, SpecificSlideshow, DashboardsInCategory</code>",
            "format": "guid",
            "nullable": true
          }
        },
        "description": "Group Permission details."
      },
      "ApiUserPermissionAdd": {
        "required": [
          "PermissionAccess",
          "UserId",
          "PermissionEntity"
        ],
        "type": "object",
        "properties": {
          "PermissionEntity": {
            "type": "string",
            "description": "Specify an entity of item for permission.</br> Allowed permission entities are: <code>AllCategories, AllDashboards, AllDataSources, AllSchedules, AllSlideshow, DashboardsInCategory, SpecificCategory, SpecificDashboard, SpecificDataSource, SpecificSchedule, SpecificSlideshow, AllGroups, AllPermissions, AllSettings, SpecificGroup, SpecificPermissions, SpecificSettings, UsersandGroups</code>"
          },
		  "PermissionAccess": {
            "type": "string",
            "description": "Specify an access type for item.<br />Allowed permission access values for the permission entities: <br />1. <code>AllCategories, AllDataSources, AllSchedules, AllSlideshow</code> accepts <code>Create, Read, ReadWrite, ReadWriteDelete</code><br /><br />2. <code>AllDashboards, DashboardsInCategory</code> accepts <code>Create, Read, ReadWrite, ReadWriteDelete, Download</code><br /><br />3. <code>SpecificCategory, SpecificDataSource, SpecificSchedule, SpecificSlideshow</code> accepts <code>Read, ReadWrite, ReadWriteDelete</code><br /><br />4. <code>SpecificDashboard</code> accepts <code>Read, ReadWrite, ReadWriteDelete, Download</code><br /><br />5. <code>AllGroups</code> accepts <code>Create</code><br /><br />6. <code>AllPermissions, AllSettings, SpecificGroup, SpecificPermissions, SpecificSettings, UsersandGroups</code> accepts <code>Manage</code>"
          },
          "UserId": {
            "type": "integer",
            "description": "Specify the User ID to whom the permission needs to be added.",
            "format": "int32"
          },
          "ItemId": {
            "type": "string",
            "description": "Specify the item ID of particular item like Category, Dashboard, Datasource,Schedule, Slideshow.<br />Item Id is required for the following permission entities: <code>SpecificCategory, SpecificDashboard, SpecificDataSource, SpecificSchedule, SpecificSlideshow, DashboardsInCategory</code>",
            "format": "guid",
            "nullable": true
          },
		  "ScopeId": {
            "type": "string",
            "description": "Specify the name or Id of specific item based on the permission entities.<br />Allowed Scope Id for permission entities: <br />1. <code>SpecificPermissions</code> accepts <code>Category, Dashboard, Datasource, Schedule, Slideshow</code><br /><br />2. <code>SpecificGroup</code> accepts Group Id<br /><br />3. <code>SpecificSettings</code> accepts <code>AuthenticationSettings, CORSPolicySettings, DashboardSettings, EmbedSettings, Integrations, LookAndFeel, NotificationSettings, Security, SiteSettings, UserDirectorySettings, SiteCredentials, Accounts, Connectors, DataStoreSettings, Email, Widgets</code>",
            "nullable": true
          }
        },
        "description": "Permission details."
      },
      "ApiGroupPermissionAdd": {
        "required": [
          "PermissionAccess",
          "GroupId",
          "PermissionEntity"
        ],
        "type": "object",
        "properties": {
          "PermissionEntity": {
            "type": "string",
            "description": "Specify an entity of item for permission.<br />Allowed permission entities are: <code>AllCategories, AllDashboards, AllDataSources, AllSchedules, AllSlideshow, DashboardsInCategory, SpecificCategory, SpecificDashboard, SpecificDataSource, SpecificSchedule, SpecificSlideshow, AllGroups, AllPermissions, AllSettings, SpecificGroup, SpecificPermissions, SpecificSettings, UsersandGroups</code>"
          },
          "PermissionAccess": {
            "type": "string",
            "description": "Specify an access type for item.<br />Allowed permission access values for the permission entities: <br />1. <code>AllCategories, AllDataSources, AllSchedules, AllSlideshow</code> accepts <code>Create, Read, ReadWrite, ReadWriteDelete</code><br /><br />2. <code>AllDashboards, DashboardsInCategory</code> accepts <code>Create, Read, ReadWrite, ReadWriteDelete, Download</code><br /><br />3. <code>SpecificCategory, SpecificDataSource, SpecificSchedule, SpecificSlideshow</code> accepts <code>Read, ReadWrite, ReadWriteDelete</code><br /><br />4. <code>SpecificDashboard</code> accepts <code>Read, ReadWrite, ReadWriteDelete, Download</code><br /><br />5. <code>AllGroups</code> accepts <code>Create</code><br /><br />6. <code>AllPermissions, AllSettings, SpecificGroup, SpecificPermissions, SpecificSettings, UsersandGroups</code> accepts <code>Manage</code>"
          },
          "GroupId": {
            "type": "integer",
            "description": "Specifies the Group ID to which the permission needs to be added.",
            "format": "int32"
          },
          "ItemId": {
            "type": "string",
            "description": "Specify the item ID of particular item like Category, Dashboard, Datasource,Schedule, Slideshow.<br />Item Id is required for the following permission entities: <code>SpecificCategory, SpecificDashboard, SpecificDataSource, SpecificSchedule, SpecificSlideshow, DashboardsInCategory</code>",
            "format": "guid",
            "nullable": true
			 },
          "ScopeId": {
            "type": "string",
            "description": "Specify the name or Id of specific item based on the permission entities.<br />Allowed Scope Id for permission entities: <br />1. <code>SpecificPermissions</code> accepts <code>Category, Dashboard, Datasource, Schedule, Slideshow</code><br /><br />2. <code>SpecificGroup</code> accepts Group Id<br /><br />3. <code>SpecificSettings</code> accepts <code>AuthenticationSettings, CORSPolicySettings, DashboardSettings, EmbedSettings, Integrations, LookAndFeel, NotificationSettings, Security, SiteSettings, UserDirectorySettings, SiteCredentials, Accounts, Connectors, DataStoreSettings, Email, Widgets</code>",
            "nullable": true
          }
        },
        "description": "Permission details."
      },
      "ApiCategoryAdd": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Category name."
          },
          "Description": {
            "type": "string",
            "description": "Category description."
          }
        },
        "description": "Category details."
      },
      "ApiCategoryUpdate": {
        "required": [
          "CategoryId"
        ],
        "type": "object",
        "properties": {
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Category name."
          },
          "Description": {
            "type": "string",
            "description": "Category description."
          }
        },
        "description": "Category details."
      },
      "ApiScheduleRequest": {
        "required": [
          "ExportType",
          "ItemId",
          "Name",
          "NeverEnd",
          "ScheduleType",
          "StartTime",
          "UserList",
          "GroupList",
          "ExternalRecipientsList"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Schedule name."
          },
          "Description": {
            "type": "string",
            "description": "Schedule description."
          },
          "ItemId": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "ExportType": {
            "type": "string",
            "description": "Specifies the export type to schedule the dashboard.<br />Values allowed are <code>Excel, Pdf, Image</code>"
          },
          "StartTime": {
            "type": "string",
            "description": "Specifies the UTC start date-time of schedule.<br />The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
          },
          "NeverEnd": {
            "type": "boolean",
            "description": "When set to true, it creates a schedule with no end.\n\n**Note:** By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
          },
          "EndAfterOccurrence": {
            "type": "integer",
            "description": "Specifies the number of occurrences after which the schedule will be completed.\n\n**For example:** If you provide 5, the schedule will end after the completion of 5 occurrences.",
            "format": "int32"
          },
          "EndDate": {
            "type": "string",
            "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.\n\n**For example:** If you provide an end date-time, the schedule will end when the end date-time is reached."
          },
          "UserList": {
            "type": "array",
            "description": "Provides a list of email addresses or user IDs to the recipients who will get the schedules.",
            "items": {
              "type": "string"
            }
          },
          "GroupList": {
            "type": "array",
            "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ExternalRecipientsList": {
            "type": "array",
            "description": "Provides a list of email addresses to the email recipients who will get the schedules. ",
            "items": {
              "type": "string"
            }
          },
          "ScheduleType": {
            "type": "string",
            "description": "Specifies the schedule type to schedule the dashboard.<br />Values allowed are <code>Hourly, Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
          },
          "IsEnabled": {
            "type": "boolean",
            "description": "Returns true, if the schedule is enabled."
          },
          "FailureNotificationToOwner": {
            "type": "boolean",
            "description": "Returns true, if the failure notification to an owner is enabled."
          },
          "FailureNotificationToRecipient": {
            "type": "boolean",
            "description": "Returns true, if the failure notification to the recipient is enabled."
          },
          "FailureOccurrence": {
            "type": "integer",
            "description": "Failure occurrence count.",
            "format": "int32"
          },
          "ExportFormatInfo": {
            "description": "Schedule export format information.",
            "$ref": "#/components/schemas/ScheduleExportFormat"
          },
          "ScheduleExportLocation": {
            "description": "Schedule export location information.",
            "$ref": "#/components/schemas/ScheduleExportLocation"
          },
          "Email": {
            "description": "Schedule mail information.",
            "$ref": "#/components/schemas/ApiScheduleEmail"
          },
          "HourlySchedule": {
            "type": "object",
            "description": "Runs the schedules on an hourly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiHourlySchedule"
              }
            ]
          },
          "DailySchedule": {
            "type": "object",
            "description": "Runs the schedules on a daily basis. ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiDailySchedule"
              }
            ]
          },
          "WeeklySchedule": {
            "type": "object",
            "description": "Runs the schedule on a weekly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiWeeklySchedule"
              }
            ]
          },
          "MonthlySchedule": {
            "type": "object",
            "description": "Runs the schedule on a monthly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlySchedule"
              }
            ]
          },
          "YearlySchedule": {
            "type": "object",
            "description": "Runs the schedules on a yearly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlySchedule"
              }
            ]
          }
        },
        "description": "Details about the schedule that was passed will be added."
      },
      "ScheduleExportFormat": {
        "type": "object",
        "properties": {
          "Size": {
            "type": "string",
            "description": "PDF page size.<br />Values allowed are <code>A3, A4, A5, Letter</code>",
            "default": "A4"
          },
          "Orientation": {
            "type": "string",
            "description": "PDF page orientation.<br />Values allowed are <code>Landscape, Portrait</code>",
            "default": "Landscape"
          },
          "Extension": {
            "type": "string",
            "description": "Excel or Image extension.<br />Values allowed for Excel file are <code>xlsx, xls</code><br />Values allowed for Image file are <code>jpg, png</code>",
            "default": "xlsx for Excel and jpg for image"
          },
          "Resolution": {
            "type": "integer",
            "description": "Image file resolution.",
            "format": "int32",
            "default": 100
          }
        },
        "description": "Schedule export format information."
      },
      "ScheduleExportLocation": {
        "type": "object",
        "properties": {
          "FtpURL": {
            "type": "string",
            "description": "Use the FTP URL to save the exported file."
          },
          "FtpUsername": {
            "type": "string",
            "description": "FTP username."
          },
          "FtpPassword": {
            "type": "string",
            "description": "FTP password."
          }
        },
        "description": "Schedule export location information."
      },
      "ApiScheduleEmail": {
        "type": "object",
        "properties": {
          "Subject": {
            "type": "string",
            "description": "Specifies Schedule Email subject."
          },
          "Body": {
            "type": "string",
            "description": "Specifies Schedule Email body."
          }
        },
        "description": "Schedule mail information."
      },
      "ScheduleExportLocationResponse": {
        "type": "object",
        "properties": {
          "FtpURL": {
            "type": "string",
            "description": "Use the FTP URL to save the exported file."
          },
          "FtpUsername": {
            "type": "string",
            "description": "FTP username."
          }
        },
        "description": "Schedule export location information."
      },
      "ApiHourlySchedule": {
        "required": [
          "ScheduleInterval"
        ],
        "type": "object",
        "properties": {
          "ScheduleInterval": {
            "type": "string",
            "description": "Specifies the hour interval. Based on this interval, the schedule will run continuously until the end time. The format should be `HH:mm`"
          }
        },
        "description": "Runs the schedules on an hourly basis."
      },
      "ApiDailySchedule": {
        "required": [
          "EveryNdays",
          "EveryWeekday",
          "RecurrenceType"
        ],
        "type": "object",
        "properties": {
          "RecurrenceType": {
            "type": "string",
            "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.<br />Values allowed are <code>EveryNdays, EveryWeekday</code>\n\n**Note:** If you choose the recurrence type as EveryNdays, provide a value to the EveryNdays property, and leave the (EveryWeekday) property empty."
          },
          "EveryNdays": {
            "type": "integer",
            "description": "Specifies the day interval the schedule recurs.\n\n**For example:** If you provide 2, the schedule recurs every 2 days.",
            "format": "int32"
          },
          "EveryWeekday": {
            "type": "boolean",
            "description": "For the schedule to recur every working day, set to true."
          }
        },
        "description": "Runs the schedules on a daily basis."
      },
      "ApiWeeklySchedule": {
        "required": [
          "RecurrenceDays",
          "RecurrenceWeeks"
        ],
        "type": "object",
        "properties": {
          "RecurrenceWeeks": {
            "type": "integer",
            "description": "Specifies the week interval the schedule recurs.\n\n**For example:** If you provide 2, the schedule will recur every 2 weeks.  ",
            "format": "int32"
          },
          "RecurrenceDays": {
            "type": "array",
            "description": "Specifies the list of days the schedule recurs.<br />Values allowed are <code>Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</code>\n\n**For example:** If you provide `Sunday`, the schedule will recur sunday's of every 2 weeks.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Runs the schedule on a weekly basis."
      },
      "ApiMonthlySchedule": {
        "required": [
          "RecurrenceType"
        ],
        "type": "object",
        "properties": {
          "RecurrenceType": {
            "type": "string",
            "description": "Specifies the recurrence type, whether the schedule recurs on a day basis or on the customized day basis.<br />Values allowed are <code>DayRecurrence, CustomRecurrence</code>\n\n**Note:** If you choose the recurrence type as DayRecurrence, provide a value to the `DayRecurrence` property and leave the (CustomRecurrence) property empty."
          },
          "DayRecurrence": {
            "type": "object",
            "description": "The schedule recurs on the day specified on the month interval.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlyScheduleDayRecurrence"
              }
            ]
          },
          "CustomRecurrence": {
            "type": "object",
            "description": "The schedule recurs on the customized day of the specified month interval.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlyScheduleCustomRecurrence"
              }
            ]
          }
        },
        "description": "Runs the schedule on a monthly basis."
      },
      "ApiMonthlyScheduleDayRecurrence": {
        "required": [
          "DayInterval",
          "MonthInterval"
        ],
        "type": "object",
        "properties": {
          "DayInterval": {
            "type": "integer",
            "description": "Specifies the number of day interval the schedule recurs.\n\n**For example:** If you provide 10, the schedule will recur every 10th day. ",
            "format": "int32"
          },
          "MonthInterval": {
            "type": "integer",
            "description": "Specifies the number of month interval the schedule recurs.\n\n**For example:** If you provide 3, the schedule will recur 10th day of every 3 months.",
            "format": "int32"
          }
        },
        "description": "The schedule recurs on the day specified on the month interval."
      },
      "ApiMonthlyScheduleCustomRecurrence": {
        "required": [
          "DayOfWeek",
          "MonthInterval",
          "WeekOfMonth"
        ],
        "type": "object",
        "properties": {
          "WeekOfMonth": {
            "type": "string",
            "description": "Specifies the week of the month the schedule recurs.<br />Values allowed are <code>first, second, third, fourth, last</code>\n\n**For example:** If you provide second, the schedule will recur on the second week."
          },
          "DayOfWeek": {
            "type": "string",
            "description": "Specifies the day of the week the schedule recurs.<br />Values allowed are <code>day, weekday, weekendday, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</code>\n\n**For example:** If you provide Sunday, the schedule will recur on the second week of sunday."
          },
          "MonthInterval": {
            "type": "integer",
            "description": "Specifies the number of month interval the schedule recurs.\n\n**For example:** If you provide 5, the schedule will recur second week of sunday's of every 5 months.",
            "format": "int32"
          }
        },
        "description": "The schedule recurs on the customized day of the specified month interval."
      },
      "ApiYearlySchedule": {
        "required": [
          "RecurrenceType",
          "YearInterval"
        ],
        "type": "object",
        "properties": {
          "YearInterval": {
            "type": "integer",
            "description": "Specifies the number of years the schedule recurs.\n\n**For example:** If you provide 5, the schedule will recur every 5 years.",
            "format": "int32"
          },
          "RecurrenceType": {
            "type": "string",
            "description": "Specifies the recurrence type, whether the schedule recurs on a month basis or on the customized month basis.<br />Values allowed are <code>MonthRecurrence, CustomRecurrence</code>\n\n**Note:** If you choose the recurrence type as MonthRecurrence, provide a value to the `MonthRecurrence` property, and leave the (CustomRecurrence) property empty."
          },
          "MonthRecurrence": {
            "type": "object",
            "description": "The schedule recurs on the month and number of years specified in `YearInterval` property.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlyScheduleMonthRecurrence"
              }
            ]
          },
          "CustomRecurrence": {
            "type": "object",
            "description": "The schedule recurs in the customized month based on the number of years provided in the `YearInterval` property.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlyScheduleCustomRecurrence"
              }
            ]
          }
        },
        "description": "Runs the schedules on a yearly basis."
      },
      "ApiYearlyScheduleMonthRecurrence": {
        "required": [
          "DayOfMonth",
          "MonthOfYear"
        ],
        "type": "object",
        "properties": {
          "MonthOfYear": {
            "type": "string",
            "description": "Specifies the month the schedule recurs.<br />Values allowed are <code>January, February, March, April, May, June, July, August, September, October, November, December</code>\n\n**For example:** If you provide April, the schedule will recur in April of every year. Here, the (year) is the value provided in the `YearInterval` property."
          },
          "DayOfMonth": {
            "type": "integer",
            "description": "Specifies the day of the month the schedule recurs.\n\n**For example:** If you provide 20, the schedule will recur 20th April of every year.  Here, the (year) is the value provided in the `YearInterval` property.",
            "format": "int32"
          }
        },
        "description": "The schedule recurs on the month and number of years specified in `YearInterval` property."
      },
      "ApiYearlyScheduleCustomRecurrence": {
        "required": [
          "DayOfWeek",
          "MonthOfYear",
          "WeekOfMonth"
        ],
        "type": "object",
        "properties": {
          "WeekOfMonth": {
            "type": "string",
            "description": "Specifies the week of the month the schedule recurs.<br />Values allowed are <code>first, second, third, fourth, last</code>\n\n**For example:** If you provide second, the schedule will recur on the second week."
          },
          "DayOfWeek": {
            "type": "string",
            "description": "Specifies the day of week the schedule recurs.<br />Values allowed are <code>day, weekday, weekendday, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</code>\n\n**For example:** If you provide Sunday, the schedule will recur on every sunday's of the second week."
          },
          "MonthOfYear": {
            "type": "string",
            "description": "Specifies the month the schedule recurs.<br />Values allowed are <code>January, February, March, April, May, June, July, August, September, October, November, December</code>\n\n**For example:** If you provide March, the schedule will recur on the sunday's of the second week of March every year. Here, the (year) is the value provided in the `YearInterval` property."
          }
        },
        "description": "The schedule recurs in the customized month based on the number of years provided in the `YearInterval` property."
      },
      "ApiScheduleResponse": {
        "type": "object",
        "properties": {
          "ScheduleName": {
            "type": "string",
            "description": "Returns the schedule name."
          },
          "ScheduleId": {
            "type": "string",
            "description": "Returns the schedule ID.",
            "format": "guid"
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "ScheduleType": {
            "type": "string",
            "description": "Returns the schedule type."
          },
          "NextRun": {
            "type": "string",
            "description": "Returns the schedule’s next run."
          }
        },
        "description": "Response details of created schedules."
      },
      "ApiUpdateScheduleRequest": {
        "required": [
          "ItemId",
          "Name",
          "ExportType",
          "ScheduleType",
          "StartTime",
          "NeverEnd"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Schedule name."
          },
          "ItemId": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "ExportType": {
            "type": "string",
            "description": "Specifies the export type to schedule the dashboard.<br />Values allowed are <code>Excel, Pdf, Image</code>"
          },
          "Description": {
            "type": "string",
            "description": "File description"
          },
          "StartTime": {
            "type": "string",
            "description": "Specifies the UTC start date-time of schedule.<br />The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
          },
          "NeverEnd": {
            "type": "boolean",
            "description": "When set to true, it creates a schedule with no end.\n\n**Note:** By default, the NeverEnd is set to true. To set the end time for schedule, fill in the EndAfterOccurrence or EndDate properties; otherwise they remains empty."
          },
          "EndAfterOccurrence": {
            "type": "integer",
            "description": "Specifies the number of occurrences after which the schedule will be completed.\n\n**For example:** If you provide 5, the schedule will end after the completion of 5 occurrences.",
            "format": "int32"
          },
          "EndDate": {
            "type": "string",
            "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.\n\n**For example:** If you provide an end date-time, the schedule will end when the end date-time is reached."
          },
          "ScheduleType": {
            "type": "string",
            "description": "Specifies the schedule type to schedule the dashboard.<br />Values allowed are <code>Hourly, Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) property empty."
          },
          "IsEnabled": {
            "type": "boolean",
            "description": "Returns true, if the schedule is enabled."
          },
          "FailureNotificationToOwner": {
            "type": "boolean",
            "description": "Returns true, if the failure notification to an owner is enabled."
          },
          "FailureNotificationToRecipient": {
            "type": "boolean",
            "description": "Returns true, if the failure notification to the recipient is enabled."
          },
          "FailureOccurrence": {
            "type": "integer",
            "description": "Failure occurrence count.",
            "format": "int32"
          },
          "UserList": {
            "type": "array",
            "description": "Provides a list of email addresses or user IDs to the recipients who will get the schedules.",
            "items": {
              "type": "string"
            }
          },
          "GroupList": {
            "type": "array",
            "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ExternalRecipientsList": {
            "type": "array",
            "description": "Provides a list of email addresses to the email recipients who will get the schedules. ",
            "items": {
              "type": "string"
            }
          },
          "RemoveUserList": {
            "type": "array",
            "description": "Provides a list of email addresses or user IDs to remove recipients from the schedule subscriptions.",
            "items": {
              "type": "string"
            }
          },
          "RemoveGroupList": {
            "type": "array",
            "description": "Provides a list of group IDs to remove groups from the schedule subscriptions.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "RemoveExternalRecipientsList": {
            "type": "array",
            "description": "Provides a list of email addresses for removing email recipients from the schedule subscriptions.",
            "items": {
              "type": "string"
            }
          },
          "ExportFormatInfo": {
            "description": "Schedule export format information.",
            "$ref": "#/components/schemas/ScheduleExportFormat"
          },
          "ScheduleExportLocation": {
            "description": "Schedule export location information.",
            "$ref": "#/components/schemas/ScheduleExportLocation"
          },
          "Email": {
            "description": "Schedule mail information.",
            "$ref": "#/components/schemas/ApiScheduleEmail"
          },
          "HourlySchedule": {
            "type": "object",
            "description": "Runs the schedules on an hourly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiHourlySchedule"
              }
            ]
          },
          "DailySchedule": {
            "type": "object",
            "description": "Runs the schedules on a daily basis. ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiDailySchedule"
              }
            ]
          },
          "WeeklySchedule": {
            "type": "object",
            "description": "Runs the schedule on a weekly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiWeeklySchedule"
              }
            ]
          },
          "MonthlySchedule": {
            "type": "object",
            "description": "Runs the schedule on a monthly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlySchedule"
              }
            ]
          },
          "YearlySchedule": {
            "type": "object",
            "description": "Runs the schedules on a yearly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlySchedule"
              }
            ]
          }
        },
        "description": "Details about the schedule that was passed will be updated."
      },
      "ApiPublicItems": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Value allowed is <code>Dashboard</code>"
          },
          "Name": {
            "type": "string",
            "description": "Item name."
          },
          "Description": {
            "type": "string",
            "description": "Item description."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "CategoryDescription": {
            "type": "string",
            "description": "Category description."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Specifies the display name of the user who created the item."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Specifies the full name of the user who modified the item."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "IsMultiTabbedDashboard": {
            "type": "boolean",
            "description": "Returns true, if the dashboard is a multi-tabbed dashboard."
          },
          "TabDetail": {
            "type": "array",
            "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
            "items": {
              "$ref": "#/components/schemas/ApiTabDetail"
            }
          },
          "IsFavorite": {
            "type": "boolean",
            "description": "Returns true, if it is a favorite item."
          }
        },
        "description": "Details of public items."
      },
      "ApiUpdateDashboardPublicV4": {
        "type" : "object",
        "properties": {
            "DashboardId": {
                "type" : "string",
                "description" : "Specifies the dashboard ID.",
                "format": "guid"
            },
            "Public": {
                "type" : "boolean",
                "description" : "Specify true to update the dashboard as public."
            },
            "Unlisted": {
                "type": "boolean",
                "description" : "Specify true to update the dashboard as unlisted."
            }
        },
        "description" : "Details of the public or private dashboards item."
      },
      "ApiFavoriteitems": {
        "type": "object",
        "properties": {
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Dashboard name."
          },
          "Description": {
            "type": "string",
            "description": "Dashboard description."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "CategoryDescription": {
            "type": "string",
            "description": "Category description."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Specifies the display name of the user who created the item."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Specifies the full name of the user who modified the item."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "IsMultiTabbedDashboard": {
            "type": "boolean",
            "description": "Returns true, if the dashboard is a multi-tabbed dashboard."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true, if the dashboard is public to access anonymously, otherwise returns false."
          }
        },
        "description": "Details of favorite items."
      },
      "ApiUpdateFavorite": {
        "required": [
          "DashboardId",
          "Favorite"
        ],
        "type": "object",
        "properties": {
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "Favorite": {
            "type": "boolean",
            "description": "Specify true to set the item as a favorite item."
          }
        },
        "description": "Details about the favorite item."
      },
      "ApiDownloadDashboard": {
        "required": [
          "DashboardId"
        ],
        "type": "object",
        "properties": {
          "DashboardId": {
            "type": "array",
            "description": "List of dashboard IDs",
            "items": {
              "type": "string",
              "format": "guid"
            }
          },
          "CanIncludeSensitiveInformation": {
            "type": "boolean",
            "description": "Include sensitive information for data sources based on this value."
          }
        },
        "description": "Details about the dashboard to download."
      },
      "DownloadUploadProgressJson": {
        "type": "object",
        "description": "Download/Upload Progress Details.",
        "properties": {
          "Stage": {
            "type": "integer",
            "description": "Download/Upload process stage.",
            "format": "int32"
          },
          "Label": {
            "type": "string",
            "description": "Label of the stage."
          },
          "Status": {
            "type": "string",
            "description": "Download stage status."
          },
          "ErrorMessage": {
            "type": "string",
            "description": "Error message of the failed stage."
          }
        }
      },
      "ApiDownloadFailedResponse": {
        "type": "object",
        "properties": {
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "ProgressJson": {
            "type": "array",
            "description": "Download Progress Details.",
            "items": {
              "$ref": "#/components/schemas/DownloadUploadProgressJson"
            }
          }
        },
        "description": "Download dashboard failed response."
      },
      "ApiDownloadDashboardResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "properties": {
              "JobStatus": {
                "type": "string",
                "description": "Status of the download job."
              },
              "ItemContent": {
                "type": "string",
                "description": "File content of the dashboard(s).",
                "format": "base64"
              },
              "ItemExtension": {
                "type": "string",
                "description": "Extension of the file.",
                "format": "base64"
              },
              "FailedDownload": {
                "type": "array",
                "description": "Details of failed download stages.",
                "items": {
                  "$ref": "#/components/schemas/ApiDownloadFailedResponse"
                }
              }
            },
            "description": "Download job process response."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          }
        }
      },
      "ApiGetMetaInfo": {
        "required": [
          "FileContent",
          "FileExtension"
        ],
        "type": "object",
        "properties": {
          "FileContent": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Dashboard files in an array of bytes.",
            "format": "byte"
          },
          "FileExtension": {
            "type": "string",
            "description": "Extension of the dashboard file.<br />Values allowed are <code>.zip, .bbix.</code>."
          }
        },
        "description": "Details about the dashboard file content."
      },
      "ApiMetaInfo": {
        "properties": {
          "Name": {
            "type": "string",
            "description": "Dashboard name."
          },
          "Description": {
            "type": "string",
            "description": "Dashboard description."
          },
          "Id": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "ShouldValidateSchema": {
            "type": "boolean",
            "description": "Specify <i>false</i> to avoid the schema validation. Default value is <i>true</i>"
          },
          "DataSources": {
            "properties": {
              "Name": {
                "type": "string",
                "description": "Data source name."
              },
              "Description": {
                "type": "string",
                "description": "Data source description."
              },
              "Type": {
                "type": "string",
                "description": "Data source type."
              },
              "Id": {
                "type": "string",
                "description": "Data source ID.",
                "format": "guid"
              },
              "Connector": {
                "type": "string",
                "description": "Connector information"
              },
              "Connection": {
                "type": "object",
                "description": "Connection object for the data source."
              }
            }
          }
        },
        "description": "Details about the data sources."
      },
      "ApiGetMetaInfoResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "array",
            "description": "Returns data from the API.",
            "items": {
              "$ref": "#/components/schemas/ApiMetaInfo"
            }
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          }
        },
        "description": "Meta info details."
      },
      "ApiUploadDashboard": {
        "required": [
          "ItemContent",
          "ItemExtension"
        ],
        "type": "object",
        "properties": {
          "ItemContent": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Dashboard files in an array of bytes.",
            "format": "byte"
          },
          "ItemExtension": {
            "type": "string",
            "description": "Extension of the dashboard file.<br />Values allowed are <code>.zip, .bbix.</code>."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "ItemMetaInfo": {
            "type": "array",
            "description": "Meta information of the item content.",
            "items": {
              "$ref": "#/components/schemas/ApiMetaInfo"
            }
          }
        },
        "description": "Details about the dashboard for upload."
      },
      "ApiUploadJobResponse": {
        "type": "object",
        "properties": {
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "UploadStatus": {
            "type": "string",
            "description": "Upload job status."
          },
          "Details": {
            "type": "array",
            "description": "Details of upload job.",
            "items": {
              "$ref": "#/components/schemas/DownloadUploadProgressJson"
            }
          }
        },
        "description": "Upload dashboard job response details."
      },
      "ApiUploadStatusResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "array",
            "description": "Returns data from the API.",
            "items": {
              "$ref": "#/components/schemas/ApiUploadJobResponse"
            }
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          }
        },
        "description": "Upload dashboard job status details."
      },
      "ApiExportDashboard": {
        "required": [
          "DashboardId",
          "ExportType"
        ],
        "type": "object",
        "properties": {
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "ServerPath": {
            "type": "string",
            "description": "Specifies the category name of the dashboard."
          },
          "ExportType": {
            "type": "string",
            "description": "Export type.<br />Values allowed are <code>Excel, Pdf, Image</code>"
          },
          "FilterParameter": {
            "type": "string",
            "description": "Specify the filter parameter. \n\n**Note:**  To know more about supported operators and funtions in filter parameter, refer to [this](/working-with-dashboards/preview-dashboard/urlparameters/#supported-operators/).",
            "example": "Department= Cardiology & Year(Date)=2021"
          }
        },
        "description": "Details about the dashboard to be exported."
      },
      "ApiExportDashboardResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "FileContent": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Returns the exported dashboard in an array of bytes.",
            "format": "byte"
          }
        }
      },
      "ApiGetWidget": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Widget ID.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Widget name."
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Value allowed is <code>Widget</code>"
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Specifies the display name of the widget creator."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the widget creator.",
            "format": "int32"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of widget in string format."
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Specifies the full name of the widget modifier."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the widget modifier.",
            "format": "int32"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of widget in string format."
          },
          "WidgetInfo": {
            "properties": {
              "Id": {
                "type": "string",
                "description": "Specifies the widget ID.",
                "format": "guid"
              },
              "Name": {
                "type": "string",
                "description": "Specifies the widget name."
              },
              "DisplayName": {
                "type": "string",
                "description": "Specifies the display name of the widget."
              },
              "Type": {
                "type": "string",
                "description": "Specifies the type of the widget."
              },
              "SubType": {
                "type": "string",
                "description": "Specifies the sub-type of the widget."
              }
            },
            "description": "Return the details of widget Id, Name, DisplayName, Type and SubType."
          }
        }
      },
      "ApiWidgetInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Specifies the widget ID.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Specifies the widget name."
          },
          "DisplayName": {
            "type": "string",
            "description": "Specifies the display name of the widget."
          },
          "Type": {
            "type": "string",
            "description": "Specifies the type of the widget."
          },
          "SubType": {
            "type": "string",
            "description": "Specifies the sub-type of the widget."
          }
        }
      },
      "ItemType": {
        "type": "string",
        "description": "Item type"
      },
      "ApiItems": {
        "type": "object",
        "properties": {
          "CanRead": {
            "type": "boolean",
            "description": "Specifies the read permission of the item."
          },
          "CanWrite": {
            "type": "boolean",
            "description": "Specifies the write permission of the item."
          },
          "CanDelete": {
            "type": "boolean",
            "description": "Specifies the delete permission of the item."
          },
          "CanDownload": {
            "type": "boolean",
            "description": "Specifies the download permission of the item."
          },
          "CanSchedule": {
            "type": "boolean",
            "description": "Specifies the schedule permission of the item."
          },
          "CanOpen": {
            "type": "boolean",
            "description": "Specifies the open permission of the item."
          },
          "CanMove": {
            "type": "boolean",
            "description": "Specifies the move permission of the item."
          },
          "CanCopy": {
            "type": "boolean",
            "description": "Specifies the copy permission of the item."
          },
          "CanClone": {
            "type": "boolean",
            "description": "Specifies the clone permission of the item."
          },
          "CanCreateItem": {
            "type": "boolean",
            "description": "Specifies the create permission of the item."
          },
          "Id": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Datasource, Schedule</code>"
          },
          "Name": {
            "type": "string",
            "description": "Item name."
          },
          "Description": {
            "type": "string",
            "description": "Item description."
          },
          "ItemLocation": {
            "type": "string",
            "description": "Item location."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Specifies the display name of the user who created the item."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Specifies the full name of the user who modified the item."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "IsMultiDashboard": {
            "type": "boolean",
            "description": "Returns true, if the dashboard is multi-dashboard."
          },
          "IsFavorite": {
            "type": "boolean",
            "description": "Returns true, if it is a favorite item."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true, if the item is public."
          },
          "TabDetail": {
            "type": "array",
            "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
            "items": {
              "$ref": "#/components/schemas/ApiTabDetail"
            }
          }
        },
        "description": "Details of items."
      },
      "ApiSpecifiedItemDetail": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Datasource, Schedule</code>"
          },
          "Name": {
            "type": "string",
            "description": "Item name."
          },
          "Description": {
            "type": "string",
            "description": "Item description."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item creator.",
            "format": "int32"
          },
          "CloneOf": {
            "type": "string",
            "description": "Item ID from where the item was cloned.",
            "format": "guid"
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Specifies the user ID of the item modifier.",
            "format": "int32"
          },
          "Extension": {
            "type": "string",
            "description": "Item extension."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Returns true, if the item is public."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the item is active."
          }
        },
        "description": "Item Details."
      },
      "ApiSlideshowAdd": {
        "required": [
          "Duration",
          "Name",
          "Slides"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Slideshow name."
          },
          "Duration": {
            "type": "integer",
            "description": "The time interval between slides.",
            "format": "int32",
            "minimum": 5,
            "maximum": 300
          },
          "Slides": {
            "type": "array",
            "description": "Slides’ list.",
            "items": {
              "$ref": "#/components/schemas/Slide"
            }
          }
        },
        "description": "Slideshow details."
      },
      "Slide": {
        "type": "object",
        "properties": {
          "OrderNumber": {
            "type": "integer",
            "description": "Slide order.",
            "format": "int32"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Widget</code>"
          },
          "ItemInfo": {
            "type": "object",
            "description": "Slide item details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SlideInfo"
              }
            ]
          }
        },
        "description": "Slide details."
      },
      "SlideInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Item ID.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Item Name."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category Name."
          },
          "TabId": {
            "type": "string",
            "description": "Tab ID.",
            "format": "guid"
          },
          "TabName": {
            "type": "string",
            "description": "Tab Name."
          },
          "ViewId": {
            "type": "string",
            "description": "View ID.",
            "format": "guid"
          },
          "ViewName": {
            "type": "string",
            "description": "View Name."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user"
          }
        },
        "description": "Slide item details."
      },
      "PaginatedSlideshowApiResponse": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "array",
            "description": "Returns data from the API.",
            "items": {
              "$ref": "#/components/schemas/SlideshowResponse"
            }
          },
          "TotalResults": {
            "type": "integer",
            "description": "Returns items count of the API request.",
            "format": "int32"
          },
          "Links": {
            "type": "array",
            "description": "Returns pagination links.",
            "items": {
              "$ref": "#/components/schemas/Links"
            }
          }
        }
      },
      "SlideshowResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Slideshow ID.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Slideshow Name."
          },
          "Duration": {
            "type": "integer",
            "description": "Time interval between slides.",
            "format": "int32"
          },
          "CreatedBy": {
            "type": "object",
            "description": "Created user detail.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemUser"
              }
            ]
          },
          "ModifiedBy": {
            "type": "object",
            "description": "Modified user detail.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemUser"
              }
            ]
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "Slides": {
            "type": "array",
            "description": "Slides’ list.",
            "items": {
              "$ref": "#/components/schemas/Slide"
            }
          },
          "Permissions": {
            "type": "object",
            "description": "Permission detail.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Permissions"
              }
            ]
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the user is an active user"
          }
        },
        "description": "Slide details."
      },
      "Permissions": {
        "type": "object",
        "properties": {
          "CanRead": {
            "type": "boolean",
            "description": "Returns true, if the user has read permission for the slideshow."
          },
          "CanWrite": {
            "type": "boolean",
            "description": "Returns true, if the user has write permission for the slideshow."
          },
          "CanDelete": {
            "type": "boolean",
            "description": "Returns true, if the user has delete permission for the slideshow."
          }
        },
        "description": "Permission details."
      },
      "ApiSlideshowEdit": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Slideshow name."
          },
          "Duration": {
            "type": "integer",
            "description": "Time interval between slides.",
            "format": "int32"
          },
          "Slides": {
            "type": "array",
            "description": "Slides’ list.",
            "items": {
              "$ref": "#/components/schemas/Slide"
            }
          }
        },
        "description": "Slideshow details."
      },
      "ItemUser": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "User ID.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "User name."
          }
        },
        "description": "Slideshow details."
      },
      "PaginatedScheduleApiResponse": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "array",
            "description": "Returns data from the API.",
            "items": {
              "$ref": "#/components/schemas/ApiScheduleItemDetail"
            }
          },
          "TotalResults": {
            "type": "integer",
            "description": "Returns items count of the API request.",
            "format": "int32"
          },
          "Links": {
            "type": "array",
            "description": "Returns pagination links.",
            "items": {
              "$ref": "#/components/schemas/Links"
            }
          }
        }
      },
      "ApiScheduleItemDetail": {
        "type": "object",
        "properties": {
          "CanRead": {
            "type": "boolean",
            "description": "Returns true, if the user has read permission for the schedule."
          },
          "CanWrite": {
            "type": "boolean",
            "description": "Returns true, if the user has write permission for the schedule."
          },
          "CanOpen": {
            "type": "boolean",
            "description": "Returns true, if the user has read permission for the schedule."
          },
          "CanSchedule": {
            "type": "boolean",
            "description": "Returns true, if the user has create permission for the schedule."
          },
          "CanMove": {
            "type": "boolean",
            "description": "Returns true, if the user has move permission for the schedule."
          },
          "CanClone": {
            "type": "boolean",
            "description": "Returns true, if the user has clone permission for the schedule."
          },
          "CanCopy": {
            "type": "boolean",
            "description": "Returns true, if the user has copy permission for the schedule."
          },
          "CanCreateItem": {
            "type": "boolean",
            "description": "Returns true, if the user has create permission for the schedule."
          },
          "CanDelete": {
            "type": "boolean",
            "description": "Returns true, if the user has delete permission for the schedule."
          },
          "CanDownload": {
            "type": "boolean",
            "description": "Returns true, if the user has download permission for the schedule."
          },
          "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category Name."
          },
          "CreatedByDisplayName": {
            "type": "string",
            "description": "Schedule created user name."
          },
          "CreatedById": {
            "type": "integer",
            "description": "Created user ID.",
            "format": "int32"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created of item in string format."
          },
          "Description": {
            "type": "string",
            "description": "Schedule description."
          },
          "ScheduleId": {
            "type": "string",
            "description": "Schedule ID.",
            "format": "guid"
          },
          "ScheduleName": {
            "type": "string",
            "description": "Schedule Name."
          },
          "ItemLocation": {
            "type": "string",
            "description": "Schedule item location."
          },
          "ItemCreatedDate": {
            "type": "string",
            "description": "Date created of item in date format.",
            "format": "date-time"
          },
          "ItemModifiedDate": {
            "type": "string",
            "description": "Date modified of item in date format.",
            "format": "date-time"
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />Value allowed is <code>Schedule</code>"
          },
          "ModifiedByFullName": {
            "type": "string",
            "description": "Schedule modified user name."
          },
          "ModifiedById": {
            "type": "integer",
            "description": "Modified user ID.",
            "format": "int32"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "ExportType": {
            "type": "string",
            "description": "Specifies the export type to schedule the dashboard. Values allowed are <code>Excel, Image, Pdf</code>."
          },
          "DashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
          },
          "DashboardName": {
            "type": "string",
            "description": "Dashboard Name."
          },
          "IsEnabled": {
            "type": "boolean",
            "description": "Returns true, if the schedule is enabled."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Returns true, if the schedule is active."
          },
          "FailureNotificationToOwner": {
            "type": "boolean",
            "description": "Returns true, if the failure notification to an owner is enabled."
          },
          "FailureNotificationToRecipient": {
            "type": "boolean",
            "description": "Returns true, if the failure notification to the recipient is enabled."
          },
          "FailureOccurrence": {
            "type": "integer",
            "description": "Failure occurrence count.",
            "format": "int32"
          },
          "ExportFormatInfo": {
            "description": "Schedule export format information.",
            "$ref": "#/components/schemas/ScheduleExportFormat"
          },
          "ScheduleExportLocation": {
            "description": "Schedule export location information.",
            "$ref": "#/components/schemas/ScheduleExportLocationResponse"
          },
          "StartDate": {
            "type": "string",
            "description": "Specifies the UTC start date-time of schedule.",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed.",
            "format": "date-time"
          },
          "NextSchedule": {
            "type": "string",
            "description": "Specifies the UTC date-time of the upcoming schedule.",
            "format": "date-time"
          },
          "NeverEnd": {
            "type": "boolean",
            "description": "When set to true, it creates a schedule with no end.\n\n **Note**: By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
          },
          "EndAfterOccurrence": {
            "type": "integer",
            "description": "Specifies the number of occurrences after which the schedule will be completed. \n\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
            "format": "int32"
          },
          "UserList": {
            "type": "array",
            "description": "Provides a list of user IDs to the recipients who will get the schedules.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "GroupList": {
            "type": "array",
            "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ExternalRecipientsList": {
            "type": "array",
            "description": "Provides a list of email addresses to the email recipients who will get the schedules. ",
            "items": {
              "type": "string"
            }
          },
          "HourlySchedule": {
            "description": "Runs the schedules on an hourly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiHourlySchedule"
              }
            ]
          },
          "DailySchedule": {
            "description": "Runs the schedules on a daily basis. ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiDailySchedule"
              }
            ]
          },
          "WeeklySchedule": {
            "description": "Runs the schedule on a weekly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiWeeklySchedule"
              }
            ]
          },
          "MonthlySchedule": {
            "description": "Runs the schedule on a monthly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMonthlySchedule"
              }
            ]
          },
          "YearlySchedule": {
            "description": "Runs the schedules on a yearly basis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiYearlySchedule"
              }
            ]
          },
          "RecurrenceTypeId": {
            "type": "string",
            "description": "Specifies the schedule type to schedule the dashboard.<br />Values allowed are <code>Hourly, Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
          },
          "RecurrenceType": {
            "type": "string",
            "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.<br />Values allowed are <code>EveryNdays, EveryWeekday</code>\n\n**Note:** If you choose the recurrence type as EveryNdays, provide a value to the `EveryNdays` property, and leave the (EveryWeekday) property empty."
          }
        },
        "description": "Schedule item detail."
      },
      "PasswordAuth": {
        "required": [
          "grant_type",
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Email address of the user.",
            "nullable": false
          },
          "password": {
            "type": "string",
            "description": "Password of the user",
            "nullable": false
          },
          "grant_type": {
            "type": "string",
            "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>password</code>",
            "nullable": false
          }
        }
      },
      "EmbedSecretAuth": {
        "required": [
          "embed_secret",
          "grant_type",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Email address of the user.",
            "nullable": false
          },
          "embed_secret": {
            "type": "string",
            "description": "Embed secret of the site",
            "nullable": false
          },
          "grant_type": {
            "type": "string",
            "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>embed_secret</code>",
            "nullable": false
          }
        }
      },
      "ApiGroupAdd": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the group."
          },
          "Description": {
            "type": "string",
            "description": "Description of the group."
          }
        },
        "description": "Group detail"
      },
      "ApiGroupEdit": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the group."
          },
          "Description": {
            "type": "string",
            "description": "Description of the group."
          }
        },
        "description": "Group detail"
      },
      "ApiAzureADGroup": {
        "required": [
          "GroupName"
        ],
        "type": "object",
        "properties": {
          "GroupName": {
            "type": "array",
            "description": "List of group names",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiAzureGroupImportResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "ImportStatus": {
            "type": "array",
            "description": "Returns Azure AD group import status.",
            "items": {
              "$ref": "#/components/schemas/ApiAzureGroupImportStatus"
            }
          }
        }
      },
      "ApiAzureGroupImportStatus": {
        "type": "object",
        "properties": {
          "FailedUsers": {
            "type": "integer",
            "format": "int32",
            "description": "Failed users count ."
          },
          "GroupName": {
            "type": "string",
            "description": "Name of the Azure AD group."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Status message of the imported group."
          },
          "ImportedUsers": {
            "type": "integer",
            "format": "int32",
            "description": "Imported users count ."
          },
          "Status": {
            "type": "boolean",
            "description": "Status of the group import."
          }
        }
      },
      "ApiGroupUsers": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "array",
            "description": "List of user IDs",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "description": "User(s) added/removed from the group."
      },
      "PublishedItemsResponse": {
        "type": "object",
        "properties": {
          "PublishId": {
            "type": "string",
            "description": "Published Item ID.",
            "format": "guid"
          },
          "ItemId": {
            "type": "string",
            "description": "Specifies the ID of the dashboard.",
            "format": "guid"
          },
          "ItemName": {
            "type": "string",
            "description": "Name of the dashboard."
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name."
          },
          "ItemType": {
            "type": "string",
            "description": "Item type."
          },
          "SiteDetails": {
            "type": "array",
            "description": "Site details list.",
            "items": {
              "$ref": "#/components/schemas/SiteDetails"
            }
          }
        },
        "description": "Published Items details."
      },
      "SiteDetails": {
        "type": "object",
        "properties": {
          "PublishedItemName": {
            "type": "string",
            "description": "Returns destination site item name."
          },
          "PublishedItemDescription": {
            "type": "string",
            "description": "Returns destination site item description."
          },
          "PublishedItemCategoryName": {
            "type": "string",
            "description": "Returns destination site item category name."
          },
          "PublishedItemId": {
            "type": "string",
            "description": "Returns destination site item ID.",
            "format": "guid"
          },
          "TenantId": {
            "type": "string",
            "description": "Tenant ID.",
            "format": "guid"
          },
          "TenantName": {
            "type": "string",
            "description": "Tenant Name."
          },
          "TenantURL": {
            "type": "string",
            "description": "Tenant URL."
          },
          "IsLocked": {
            "type": "boolean",
            "description": "Is published item Locked."
          },
          "PublishedById": {
            "type": "integer",
            "description": "User ID who published the item."
          },
          "PublishedOn": {
            "type": "string",
            "description": "Date published of the item in string format.",
            "format": "datetime"
          },
          "LastSynchronizedOn": {
            "type": "string",
            "description": "Date of last sychronization in string format.",
            "format": "datetime"
          },
          "LastSynchronizedById": {
            "type": "integer",
            "description": "User ID who sychronized at last."
          },
          "LastSynchronizedStatus": {
            "type": "string",
            "description": "Last Synchronization status."
          }
        },
        "description": "Published items site details."
      }
    },
    "securitySchemes": {
      "bearer <token>": {
        "type": "http",
        "description": "JWT token Authentication",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}