{
  "swagger": "2.0",
  "info": {
    "title": "API Reference",
    "version": "5.0"
  },
  "host": "onpremise-demo.boldbi.com",
  "basePath": "/bi/api/site/site1/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Authentication"
    }
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate User",
        "description": "Please authenticate with a user password.",
        "operationId": "Authentication",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "grant_type",
            "in": "formData",
            "required": true,
            "x-nullable": false,
            "description": "The type of credentials used to authorize the request for an access token. (Use \"password\")"
          },
          {
            "type": "string",
            "name": "username",
            "in": "formData",
            "required": true,
            "x-nullable": false,
            "description": "Email address of the user. (Use guest@boldbi.com for this demo API)"
          },
          {
            "type": "string",
            "name": "password",
            "in": "formData",
            "required": true,
            "x-nullable": false,
            "description": "Password of the user. (Use Demo759! for this demo API)"
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully.",
            "schema": {
              "$ref": "#/definitions/Response"
            },
            "x-nullable": true
          },
          "400": {
            "description": "Email address is empty"
          },
          "404": {
            "description": "User detail not found."
          },
          "405": {
            "description": "Request type was not POST"
          }
        }
      }
    },
    "/v5.0/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add User",
        "description": "Adds the new user.",
        "operationId": "Users_AddUser",
        "parameters": [
          {
            "name": "userDetail",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiUserAdd"
            },
            "description": "Detail of the user",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The user was created successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Email address already exists."
          },
          "405": {
            "description": "Request type was not POST"
          },
          "417": {
            "description": "Failed to add user"
          }
        }
      }, 
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Users",
        "description": "Retrieve the list of user details.",
        "operationId": "Users_GetUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search Keyword<br />Keyword searched in <code>DisplayName, Email</code>",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sorting type. Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of user details was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/GetUsersPaginatedApiResponse"
            }
          },
          "400": {
            "description": "Page does not exists.",
            "content": {}
          },
          "401": {
            "description": "Access denied"
          },
          "204": {
            "description": "User list is empty."
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      }
    },
    "/v5.0/users/{user}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "Update the specific user details.",
        "operationId": "Users_EditUser",
        "parameters": [
          {
            "type": "string",
            "name": "user",
            "in": "path",
            "required": true,
            "description": "Username or email address of the user",
            "x-nullable": false
          },
          {
            "name": "userDetail",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiUserEdit"
            },
            "description": "Detail of the user",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The user was modified successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "User detail not found."
          },
          "405": {
            "description": "Request type was not PUT."
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "500": {
            "description": "Failed to update user profile detail."
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "Delete the specific user.",
        "operationId": "Users_DeleteUser",
        "parameters": [
          {
            "type": "string",
            "name": "user",
            "in": "path",
            "required": true,
            "description": "Username or email address of the user",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Email address is empty"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "User detail not found."
          },
          "405": {
            "description": "Request type was not DELETE"
          },
          "417": {
            "description": "Failed to delete user."
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a User by Email or Username",
        "description": "Retrieve the specific user detail.",
        "operationId": "Users_GetUserDetail",
        "parameters": [
          {
            "type": "string",
            "name": "user",
            "in": "path",
            "required": true,
            "description": "Username or email address of the user",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "User detail was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiUserDetailV4"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "User detail not found."
          },
          "405": {
            "description": "Request type was not GET"
          },
          "417": {
            "description": "Failed to retrieve user detail"
          }
        }
      }
    },
    "/v5.0/users/{user}/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Groups",
        "description": "Retrieve the list of group details for the specific user.",
        "operationId": "Users_GetGroupsOfUser",
        "parameters": [
          {
            "type": "string",
            "name": "user",
            "in": "path",
            "required": true,
            "description": "User ID or Email address of the user.",
            "x-nullable": false
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "<br />\nPage number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  1 ",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "<br />\nPage size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  10 ",
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Id , Name </code>",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of user's groups was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/GetUserGroupsPaginatedApiResponse"
            }
          },
          "204": {
            "description": "Group list empty"
          },
          "400": {
            "description": "Page does not exists.",
            "content": {}
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "User detail not found."
          },
          "405": {
            "description": "Request type was not GET"
          },
          "417": {
            "description": "Failed to get group details"
          }
        }
      }
    },
    "/v5.0/csv-users/download-template": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Download CSV Template",
        "description": "Download the CSV template in order to import the CSV users.",
        "operationId": "Users_DownloadCsvTemplate",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "CSV template was downloaded successfully.",
            "schema": {
              "$ref": "#/definitions/ApiDownloadCsvTemplate"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "417": {
            "description": "Failed to download CSV template file"
          }
        }
      }
    },
    "/v5.0/csv-users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add CSV User",
        "description": "Please add the list of users using the CSV file.",
        "operationId": "Users_CsvUserImport",
        "parameters": [
          {
            "name": "apiCsvUserImportRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiCsvUserImportRequest"
            },
            "description": "Details passed to add the CSV of users.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "User(s) created successfully.",
            "schema": {
              "$ref": "#/definitions/ApiCsvUserImportResponse"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "417": {
            "description": "Failed to add CSV users"
          }
        }
      }
    },
    "/v5.0/user/import/job/{jobId}": {
      "get": {
        "tags": [ "Users" ],
        "summary": "Get Bulk import job Details",
        "description": "Retrieve the bulk import job details of the specified job id.",
        "operationId": "Users_GetBulkImportJobDetail",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "job Id of bulk import result",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job detail retrieved created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ApiBulkImportJobDetailsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get csv import job details.",
            "content": {}
          }
        }
      }
    },
    "/v5.0/user/import/job/{jobId}/failed-import": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get failed import users list of specific job id",
        "description": "Retrieve all the import users who have failed for the specified job id.",
        "operationId": "Users_GetFailedImportUsersList",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "job Id of bulk import result",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Failed import users detail retrieved created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ApiFailedImportUsersDetailResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          },
          "417": {
            "description": "Failed to get csv failed import user details.",
            "content": {}
          }
        }
      }
    },
    "/v5.0/groups": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add Groups",
        "description": "Add the new group to group the users.",
        "operationId": "Groups_AddGroup",
        "parameters": [
          {
            "name": "groupDetail",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiGroupAdd"
            },
            "description": "Detail of the group.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Group was created successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Group name already exists."
          },
          "417": {
            "description": "Failed to add group"
          }
        }
      }, 
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Groups",
        "description": "Retrieve the list of group details.",
        "operationId": "Groups_GetGroups",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search Keyword<br />Keyword searched in <code>Id , Name</code>",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sorting type. Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of groups has been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/GetGroupsPaginatedApiResponse"
            }
          },
          "204": {
            "description": "Group list is empty."
          },
          "400": {
            "description": "Page does not exists."
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      }
    },
    "/v5.0/groups/{id}": {
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete Group",
        "description": "Remove the specific group.",
        "operationId": "Groups_DeleteGroup",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the group.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not DELETE"
          },
          "406": {
            "description": "Invalid Group ID"
          },
          "417": {
            "description": "Failed to delete the group"
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update Group",
        "description": "Update the specific group details.",
        "operationId": "Groups_EditGroup",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the group.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "groupDetail",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiGroupEdit"
            },
            "description": "Detail of the group.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Group was modified successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Group detail was not found."
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Group name already exists."
          },
          "417": {
            "description": "Failed to update group "
          }
        }
      },
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group by Id",
        "description": "Retrieve the specific group details.",
        "operationId": "Groups_GetGroupDetail",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the group.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Group detail was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiGroup"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Group detail was not found."
          },
          "405": {
            "description": "Request type was not GET"
          },
          "417": {
            "description": "Failed to get group detail"
          }
        }
      }
    },
    "/v5.0/groups/azure-active-directory/import": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add Azure AD Groups",
        "description": "Import the group(s) from Azure Active Directory.",
        "operationId": "Groups_AddAzureADGroup",
        "parameters": [
          {
            "name": "groupName",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiAzureADGroup"
            },
            "description": "Name of the group.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Group has been imported successfully.",
            "schema": {
              "$ref": "#/definitions/ApiAzureGroupImportResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "412": {
            "description": "Azure AD details are not configured"
          }
        }
      }
    },
    "/v5.0/groups/{id}/users": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add User(s) to Group",
        "description": "Add the list of users to the specific group.",
        "operationId": "Groups_AddUserToGroup",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Group ID",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "apiGroupUsers",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiGroupUsers"
            },
            "description": "User(s) added/removed from the group",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "User(s) added to the group successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "417": {
            "description": "Failed to add user in to group"
          },
          "404": {
            "description": "Group detail was not found."
          },
          "405": {
            "description": "Request type was not POST"
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete Group User",
        "description": "Delete the list of users from the specific group.",
        "operationId": "Groups_DeleteUserFromGroup",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Group ID",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "apiGroupUsers",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiGroupUsers"
            },
            "description": "User(s) added/removed from the group",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Access denied"
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "417": {
            "description": "Failed to delete user from group"
          },
          "404": {
            "description": "Group detail was not found."
          },
          "405": {
            "description": "Request type was not DELETE"
          },
          "406": {
            "description": "Invalid group ID."
          }
        }
      },
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group Users",
        "description": "Retrieve the list of user details for the specific group.",
        "operationId": "Groups_GetUsersFromGroup",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the group.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "<br />\nPage number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  1 ",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "<br />\nPage size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "  10 ",
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Email, DisplayName </code>",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of group's users has been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/GetGroupUsersPaginatedApiResponse"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "204": {
            "description": "User list is empty."
          },
          "400": {
            "description": "Page does not exists."
          },
          "404": {
            "description": "Group detail was not found."
          },
          "417": {
            "description": "Failed to check whether the group is active or not."
          },
          "406": {
            "description": "Invalid Group ID"
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      }
    },
    "/v5.0/permissions/users": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Add User Permission",
        "description": "Administrators can add a new permission to a specific user by providing the permission details.",
        "operationId": "Permission_AddUserPermission",
        "parameters": [
          {
            "name": "apiUserPermissionAdd",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiUserPermissionAdd"
            },
            "description": "Details about the permissions that were passed will be added to the specified user id.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "User permission has been added successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "User detail  not found"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Permission already exists."
          },
          "417": {
            "description": "Failed to add user permission"
          }
        }
      }
    },
    "/v5.0/permissions/users/{id}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get User Permissions",
        "description": "Administrators can obtain the list of permissions for the specific user.",
        "operationId": "Permission_GetUserPermission",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sorting type. Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of user permissions has been retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetUsersPermissionPaginatedApiResponse"
              }
            }
          },
          "204": {
            "description": "Permission list is empty"
          },
          "401": {
            "description": "Access denied"
          },
          "400": {
            "description": "Invalid user ID."
          },
          "404": {
            "description": "User detail not found."
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      },
      "delete": {
        "tags": [
          "Permission"
        ],
        "summary": "Delete User Permission",
        "description": "Administrators have the ability to delete a specific user's permission.",
        "operationId": "Permission_DeleteUserPermission",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User permission ID.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Permission id is empty"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not DELETE"
          },
          "417": {
            "description": "Failed to remove permission."
          }
        }
      }
    },
    "/v5.0/permissions/groups": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Add Group Permission",
        "description": "Administrators can add a new permission to the specific group by providing permission details.",
        "operationId": "Permission_AddGroupPermission",
        "parameters": [
          {
            "name": "apiGroupPermissionAdd",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
                "items": {
                  "$ref": "#/definitions/ApiGroupPermissionAdd"
                }
            },
            "description": "Details about the permissions that were passed will be added to the specified group ID.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Group permission was created successfully.",
            "schema": {
              "$ref": "#/definitions/BulkGroupPermission"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Group  detail  not found"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Permission already exists"
          },
          "417": {
            "description": "Failed to add group permission"
          }
        }
      }
    },
    "/v5.0/permissions/groups/{id}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get Group Permissions",
        "description": "Administrators can obtain the list of permissions for the specific group.",
        "operationId": "Permission_GetGroupPermission",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Group ID.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sorting type. Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of group permissions has been retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetGroupsPermissionPaginatedApiResponse"
              }
            }
          },
          "204": {
            "description": "Permission list is empty"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Group detail was not found."
          },
          "405": {
            "description": "Request type was not GET"
          },
          "406": {
            "description": "Invalid group ID."
          }
        }
      },
      "delete": {
        "tags": [
          "Permission"
        ],
        "summary": "Delete Group Permission",
        "description": "Administrators have the ability to delete specific group permissions.",
        "operationId": "Permission_DeleteGroupPermission",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Group permission ID.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Permission id is empty"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not DELETE"
          },
          "417": {
            "description": "Failed to delete group permission"
          }
        }
      }
    }, 
    "/v5.0/categories": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Add Category",
        "description": "Users who have create access for categories can add a new category.",
        "operationId": "Category_AddCategory",
        "parameters": [
          {
            "name": "apiCategoryAdd",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiCategoryAdd"
            },
            "description": "Details about the passed category will be added.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The category was created successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Item name already exists"
          },
          "417": {
            "description": "Failed to add category"
          }
        }
      },
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get Categories",
        "description": "Users who have created the categories are able to view the lists of categories.",
        "operationId": "Category_GetCategories",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search Keyword<br />Keyword searched in <code>Name, Description, CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sorting type. Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          }
        ],
        "responses": {
          "200": {
            "type": "array",
            "description": "The list of categories was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/PaginatedApiResponse"
            }
          },
          "204": {
            "description": "Items not found"
          },
          "400": {
            "description": "Page does not exists."
          },
          "401": {
            "description": "Access denied"
          },
          "403": {
            "description": "Access denied for the item"
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Update Category",
        "description": "Users who have write access to categories can update an existing category.",
        "operationId": "Category_UpdateCategory",
        "parameters": [
          {
            "name": "apiCategoryUpdate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiCategoryUpdate"
            },
            "description": "Details about the category that has been passed will be updated to the specified category ID.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The category was modified successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Item name already exists"
          },
          "417": {
            "description": "Failed to update category"
          }
        }
      }
    },
    "/v5.0/categories/{categoryId}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get Category by Id",
        "description": "Users who created the category are able to view the category details.",
        "operationId": "Category_GetCategory",
        "parameters": [
          {
            "type": "string",
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "Category ID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Category detail was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiSpecifiedItemDetail"
            }
          },
          "400": {
            "description": "Invalid item ID."
          },
          "401": {
            "description": "Access denied."
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not GET."
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Delete Category",
        "description": "Users who have delete access to the item type category can delete the item by providing the Category Id.",
        "operationId": "Category_DeleteCategory",
        "parameters": [
          {
            "type": "string",
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "Category ID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Item ID is empty."
          },
          "401": {
            "description": "Access denied."
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not DELETE."
          },
          "412": {
            "description": "Failed to delete because the category contains dashboards."
          },
          "417": {
            "description": "Failed to delete item."
          }
        }
      }
    },
    "/v5.0/dashboards": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Dashboards",
        "description": "Users who have created the dashboards are able to view the lists of dashboards.",
        "operationId": "Dashboards_GetDashboards",
        "parameters": [
          {
            "type": "string",
            "name": "serverPath",
            "in": "query",
            "required": false,
            "description": "`\"/\"` + `\"Category name\"`",
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search Keyword<br />Keyword searched in <code>Name, Description, CategoryName, CreatedByDisplayName</code>",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sorting type. Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true
          },
          {
            "name": "exclude_multitabdashboard",
            "in": "query",
            "required": false,
            "description": "Exclude Multitab dashboards. Values allowed are <code>True/true, False/false</code>",
            "x-nullable": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "type": "integer",
            "name": "createdBy",
            "in": "query",
            "required": false,
            "description": "<br />\nSpecifies the User ID to filter the dashboards based on the user who created them.<br />",
            "x-nullable": true,
            "schema": {
                "type": "integer",
                "format": "int32"
            }
          },
          {
            "type": "string",
            "name": "groupName",
            "in": "query",
            "required": false,
            "description": "<br />\nSpecifies the Group name to filter the dashboards.<br />",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "type": "array",
            "description": "List of dashboards was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/PaginatedApiResponse"
            }
          },
          "204": {
            "description": "Items not found"
          },
          "400": {
            "description": "Page does not exists."
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      }
    },
    "/v5.0/dashboards/{dashboardId}": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Dashboard by Id",
        "description": "Users who have created the dashboard are able to view the detailed information on the dashboard.",
        "operationId": "Dashboards_GetDashboard",
        "parameters": [
          {
            "type": "string",
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "Dashboard ID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard detail was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiDashboardSpecifiedItemDetail"
            }
          },
          "400": {
            "description": "Item id invalid."
          },
          "401": {
            "description": "Access denied for the item."
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not GET."
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Delete Dashboard",
        "description": "Users who have deletion access to the item type dashboard can delete the item by providing the Dashboard Id.",
        "operationId": "Dashboards_DeleteDashboard",
        "parameters": [
          {
            "type": "string",
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "Dashboard ID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Item ID is empty."
          },
          "401": {
            "description": "Access denied."
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not DELETE."
          },
          "417": {
            "description": "Failed to delete item."
          }
        }
      }
    },
    "/v5.0/dashboards/{itemId}/copy": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Copy Dashboard",
        "description": "Users who have access to create on the dashboard can copy it.",
        "operationId": "Dashboards_CopyDashboard",
        "parameters": [
          {
            "type": "string",
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "ItemId of the dashboard will be copied.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "apiCopyDashboard",
            "in": "body",
            "required": true,
            "description": "The details of the dashboard that were passed will be copied.",
            "schema": {
              "$ref": "#/definitions/ApiCopyDashboardRequestV4"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The dashboard has been copied successfully.",
            "schema": {
              "$ref": "#/definitions/ApiCopyItemResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied. You do not have permission to copy the dashboard."
          },
          "403": {
            "description": "Mark as public has been restricted."
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Item name already exists."
          },
          "417": {
            "description": "Failed to copy the dashboard"
          }
        }
      }
    },
    "/v5.0/dashboards/public": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Public Dashboards",
        "description": "Retrieve the list of public dashboards for the current user.",
        "operationId": "Dashboards_GetPublicItems",
        "parameters": [
          {
            "type": "string",
            "name": "itemType",
            "in": "query",
            "required": true,
            "description": "Item type. Valid values: `\"Dashboard\"`",
            "x-schema": {
              "$ref": "#/definitions/ItemType"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of public dashboards was retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiPublicItems"
              }
            }
          },
          "204": {
            "description": "Public item list empty"
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "417": {
            "description": "Failed to get public items"
          }
        }
      }
    },
    "/v5.0/dashboards/{dashboardId}/public":{
      "put": {
          "tags" : [
              "Dashboard"
          ],
          "summary" : "Update Public Dashboard",
          "description": "Users who have access to the dashboard and its settings can update the dashboard to be public.",
          "operationId": "Dashboards_UpdatePublicDashboard",
          "parameters":[
              {
                "name": "dashboardId",
                "in": "path",
                "description": "Dashboard ID.",
                "required" : true,
                "style": "simple",
                "explode": false,
                "schema": {
                    "type": "string",
                    "format": "guid",
                    "nullable": false
                 },
                 "x-nullable": true
              },
              {
                "name": "ApiUpdateDashboardPublicV5",
                "in": "body",
                "required": true,
                "description": "The public value that is passed will be updated on the specified dashboard.",
               "schema":{
                "$ref": "#/definitions/ApiUpdateDashboardPublicV5"
               }
              }
          ],
          "responses": {
              "200": {
                  "description": "Dashboard marked public successfully.",
                  "schema":{
                    "$ref": "#/definitions/ApiResponse"
                  }
              },
              "400": {
                  "description" : "The content of the request body is missing or incomplete."
              },
              "401": {
                  "description": "Access denied"
              },
              "412" : {
                  "description": "Mark as public has been restricted."
              },
              "417": {
                  "description": "Failed to mark dashboard as public."
              }
          }
      }
    },
    "/v5.0/dashboards/favorite": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Favorite Dashboards",
        "description": "Retrieve a list of favorite dashboards for the current user.",
        "operationId": "Dashboards_GetFavoriteItems",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of favorite dashboards was retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiFavoriteitems"
              }
            }
          },
          "204": {
            "description": "No favorite items."
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "417": {
            "description": "Failed to get favorite items"
          }
        }
      },
      "put": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Update Favorite Dashboard",
        "description": "Users who have read access to the dashboard can update the dashboard as a favorite or non-favorite.",
        "operationId": "Dashboards_UpdateFavoriteItem",
        "parameters": [
          {
            "name": "apiUpdateFavorite",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiUpdateFavorite"
            },
            "description": "Favorite value passed will be updated to the specified dashboard id.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Favorite dashboard was modified successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "417": {
            "description": "Failed to favorite item"
          }
        }
      }
    },
    "/v5.0/dashboards/export": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Export Dashboard",
        "description": "Users who have read access to the dashboard can export it to various formats (Excel, PDF, and Image) and receive the exported dashboard as an array of bytes in response.<br /><br />When exporting a multi-tabbed dashboard in image format, the response bytes must be saved in ZIP format.",
        "operationId": "Dashboards_ExportDashboard",
        "parameters": [
          {
            "name": "apiExportDashboard",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiExportDashboard"
            },
            "description": "Details about the passed dashboard will be exported.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Dashboard exported successfully.",
            "schema": {
              "$ref": "#/definitions/ApiExportDashboardResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "417": {
            "description": "Failed to Export item"
          }
        }
      }
    },
    "/v5.0/dashboards/by-group-permissions": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Groups Dashboard Details By Group Names",
        "description": "Administrators can obtain the list of dashboard details for the specific groups.",
        "operationId": "Dashboards_DashboardsDetailsByGroupPermissions",
        "parameters": [
          {
            "type": "string",
            "name": "GroupName",
            "in": "query",
            "required": false,
            "description": "One or more group names, separated by commas (,).",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of dashbaord details has been retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiGetDashboardDetailsByGroupnamesApiResponse"
              }
            }
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      }
    },
    "/v5.0/dashboards/download/job": {
      "post": {
        "tags": [
          "Download Dashboard"
        ],
        "summary": "Prepare Dashboard For Download",
        "description": "Initiates the download of the dashboard for users with read and download access.",
        "operationId": "Dashboards_DownloadDashboard",
        "parameters": [
          {
            "name": "apiDownloadDashboard",
            "in": "body",
            "required": true,
            "description": "Details of the dashboard passed will be downloaded.",
            "schema": {
              "$ref": "#/definitions/ApiDownloadDashboard"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Download job has been initiated for the given dashboards.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Dashboard list is empty.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "409": {
            "description": "The maximum number of dashboards that can be downloaded at a time is 15. Please list 15 or fewer dashboards and try again.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiDownloadDashboard"
      }
    },
    "/v5.0/dashboards/download/job/{jobId}": {
      "get": {
        "tags": [
          "Download Dashboard"
        ],
        "summary": "Download Dashboard",
        "description": "Please download the content of the dashboard file.",
        "operationId": "Dashboard_DownloadDashboardFile",
        "parameters": [
          {
            "type": "string",
            "name": "jobId",
            "in": "path",
            "required": true,
            "description": "Download Job ID",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard files downloaded successfully.",
            "schema": {
              "$ref": "#/definitions/ApiDownloadDashboardResponse"
            }
          },
          "400": {
            "description": "Invalid job ID",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v5.0/dashboards/upload/meta": {
      "post": {
        "tags": [
          "Upload Dashboard"
        ],
        "summary": "Get Meta Info For Dashboard",
        "description": "Retrieve metadata for the downloaded dashboard files.",
        "operationId": "Dashboards_GetMetaInfo",
        "parameters": [
          {
            "name": "apiGetMetaInfo",
            "in": "body",
            "required": true,
            "description": "Dashboard Information",
            "schema": {
              "$ref": "#/definitions/ApiGetMetaInfo"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata for the given dashboard file has been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiGetMetaInfoResponse"
            }
          },
          "400": {
            "description": "File content is empty.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiGetMetaInfo"
      }
    },
    "/v5.0/dashboards/upload": {
      "post": {
        "tags": [
          "Upload Dashboard"
        ],
        "summary": "Upload Dashboard",
        "description": "Users who have created access to the dashboard can upload the dashboard.",
        "operationId": "Dashboards_UploadDashboard",
        "parameters": [
          {
            "name": "apiUploadDashboard",
            "in": "body",
            "required": true,
            "description": "The downloaded dashboard file content and meta information.",
            "schema": {
              "$ref": "#/definitions/ApiUploadDashboard"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard upload started.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "File content is empty.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiUploadDashboard"
      },
      "put": {
        "tags": [
          "Upload Dashboard"
        ],
        "summary": "Update upload Dashboard",
        "description": "Users who have write access to the dashboard can update it.",
        "operationId": "Dashboards_UpdateUploadDashboard",
        "parameters": [
          {
            "name": "ApiUpdateUploadDashboard",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiUpdateUploadDashboard"
            },
            "description": "The details of the dashboard that was passed will be updated.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Dashboard update started.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete."
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not PUT"
          }
        }
      }
    },
    "/v5.0/dashboards/upload/job/{jobId}": {
      "get": {
        "tags": [
          "Upload Dashboard"
        ],
        "summary": "Upload Dashboard Status",
        "description": "Retrieve the status of an upload dashboard job.",
        "operationId": "Dashboard_GetUploadDashboardJobStatus",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Upload Job ID",
            "required": true,
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Upload job status retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiUploadStatusResponse"
            }
          },
          "400": {
            "description": "Invalid job ID",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v5.0/dashboards/{itemId}/move": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Move Dashboard",
        "description": "Move the Dashboard from one category to another category.",
        "operationId": "Dashboards_MoveDashboard",
        "parameters": [
          {
            "type": "string",
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "ID of the dashboard will be moved.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "apiMoveDashboard",
            "in": "body",
            "required": true,
            "description": "The provided dashboard will be moved to another category.",
            "schema": {
              "$ref": "#/definitions/ApiMoveDashboard"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The dashboard has been moved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiMoveDashboardResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied. You don't have permission to move the dashboard.",
            "content": {}
          },
          "404": {
            "description": "Item details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "417": {
            "description": "Failed to move the dashboard.",
            "content": {}
          }
        }
      }
    },
    "/v5.0/dashboard/rename/{dashboardId}":{
      "put": {
          "tags" : [
              "Dashboard"
          ],
          "summary" : "Update Dashboard Name",
          "description": "Users who have write access to the dashboard can update the name of the dashboard.",
          "operationId": "Dashboards_UpdateDashboardName",
          "parameters":[
              {
                "name": "dashboardId",
                "in": "path",
                "description": "Dashboard ID.",
                "required" : true,
                "style": "simple",
                "explode": false,
                "schema": {
                    "type": "string",
                    "format": "guid",
                    "nullable": false
                 },
                 "x-nullable": true
              },
              {
                "name": "ApiUpdateDashboardName",
                "in": "body",
                "required": true,
                "description": "The name details provided will be updated for the specified dashboard.",
               "schema":{
                "$ref": "#/definitions/ApiUpdateDashboardName"
               }
              }
          ],
          "responses": {
              "200": {
                  "description": "DashboardName has been updated successfully.",
                  "schema":{
                    "$ref": "#/definitions/ApiResponse"
                  }
              },
              "400": {
                  "description" : "The content of the request body is missing or incomplete."
              },
              "401": {
                  "description": "Access denied"
              }, 
              "404": {
                "description": "Item details not found"
              },
              "405": {
                "description": "Request type was not PUT"
              },
              "406": {
                "description": "The content of the request body is invalid"
              },
              "409": {
                "description": "Item name already exists."
              }
          }
      }
    },
    "/v5.0/multi-tab": {
      "post": {
          "tags": [
              "Dashboard"
          ],
          "summary": "Add Multi-Tab Dashboard",
          "description": "Only users who have permission to create a dashboard are able to create new multi-tab dashboards within their permitted dashboards.",
          "operationId": "Dashboard_AddmultitabDashboard",
          "parameters": [
              {
                  "name": "apiAddmulti-tabDashboard",
                  "in": "body",
                  "required": true,
                  "schema": {
                      "$ref": "#/definitions/ApiAddmultitabDashboardRequest"
                  },
                  "description": "Details of the dashboards passed will be added.",
                  "x-nullable": true
              }
          ],
          "responses": {
              "200": {
                  "x-nullable": true,
                  "description": "Multi-tab dashboard has been added successfully.",
                  "schema": {
                      "$ref": "#/definitions/ApiResponse"
                  }
              },
              "400": {
                  "description": "The content of the request body is missing or incomplete"
              },
              "401": {
                  "description": "Access denied"
              },
              "404": {
                  "description": "Item details not found.",
                  "content": {}
              },
              "405": {
                  "description": "Request type was not POST"
              },
              "409": {
                  "description": "Item name already exists."
              }
          }
      }
    },
    "/v5.0/dashboards/{dashboardId}/unlist": {
      "put" : {
        "tags": [
          "Dashboard"
        ],
        "summary" : "Update Unlisting Dashboard",
        "description" : "Users with access to the dashboard and permission to manage can update the dashboard as unlisted.",
        "operationId": "Dashboards_UpdateUnlistDashboard",
        "parameters": [
          {
            "type": "string",
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "Dashboard ID.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name" : "ApiUpdateDashboardUnlist",
            "in" : "body",
            "required" : true,
            "description": "Unlisted value passed will be updated to the specified dashboard.",
            "schema" :{
              "$ref" : "#/definitions/ApiUpdateDashboardUnlist"
            },
            "x-nullable" : true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description" : "Dashboard marked unlist successfully.",
            "schema": {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/v5.0/dashboards/drafts": {
      "post": {
        "tags": [
          "Draft Dashboard"
        ],
        "summary": "Add Draft Dashboard",
        "description": "Users who have access to create a dashboard can add the draft dashboard.",
        "operationId": "Dashboards_AddDraftDashboard",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Draft dashboard detail.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Draft Dashboard has been created successfully.",
            "schema": {
              "$ref": "#/definitions/DraftItemDetail"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "403": {
            "description": "Access denied for the item"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Item name already exists."
          }
        }
      },
      "get": {
        "tags": [
          "Draft Dashboard"
        ],
        "summary": "Get Draft Dashboards",
        "description": "Users who have created the draft dashboard can view the lists of draft dashboards.",
        "operationId": "Dashboards_GetDraftDashboard",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of draft dashboards has been retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiItemsV4"
              }
            }
          },
          "204": {
            "description": "Items not found"
          },
          "401": {
            "description": "Access denied"
          },
          "403": {
            "description": "Access denied for the item"
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      }
    },
    "/v5.0/dashboards/drafts/{itemId}": {
      "put": {
        "tags": [
          "Draft Dashboard"
        ],
        "summary": "Update Draft Dashboard",
        "description": "Users who have created the draft dashboard are able to update the dashboard details.",
        "operationId": "Items_UpdateDraftItemDetail",
        "parameters": [
          {
            "type": "string",
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "ItemId of the draft dashboard.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "updateDraftItemDetail",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDraftItemDetail"
            },
            "description": "Details of the draft dashboard item.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Draft dashboard detail has been modified successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found"
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Item name already exists."
          },
          "417": {
            "description": "Failed to update draft item details"
          }
        }
      }
    },
    "/v5.0/dashboards/views": {
      "post": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Add Dashboard View",
        "description": "Users who have access to the dashboard can save a view by providing the proper dashboard filter details.",
        "operationId": "ItemViews_AddItemView",
        "parameters": [
          {
            "name": "apiItemViewsAdd",
            "in": "body",
            "required": true,
            "description": "Information about the dashboard filter for saving the view.",
            "schema": {
              "$ref": "#/definitions/ApiItemViewsAdd"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "A view has been created successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "View name already exists"
          },
          "417": {
            "description": "Failed to add view"
          }
        }
      },
      "put": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Edit Dashboard View",
        "description": "Users who have created a view can edit the view by providing the proper dashboard filter details.",
        "operationId": "ItemViews_UpdateItemView",
        "parameters": [
          {
            "name": "apiItemViewsUpdate",
            "in": "body",
            "required": true,
            "description": "Please provide details about the dashboard filter for editing the view.",
            "schema": {
              "$ref": "#/definitions/ApiItemViewsUpdate"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "A view has been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "View name already exists"
          },
          "417": {
            "description": "Failed to edit view"
          }
        }
      }
    },
    "/v5.0/dashboards/views/{id}": {
      "delete": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Delete Dashboard View",
        "description": "Users who have created a view can delete it.",
        "operationId": "ItemViews_ItemViewDelete",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "View ID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "View ID invalid"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Itemview is not active."
          },
          "405": {
            "description": "Request type was not DELETE"
          },
          "417": {
            "description": "Failed to delete view"
          }
        }
      },
      "get": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Get Dashboard View by Id",
        "description": "Retrieve the detailed view for the current user.",
        "operationId": "ItemViews_ItemViewByViewId",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "View ID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "A view has been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiItemViewResponse"
            }
          },
          "400": {
            "description": "View ID invalid"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "View detail not found"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "417": {
            "description": "Failed to get item view."
          }
        }
      }
    },
    "/v5.0/dashboards/{id}/views": {
      "get": {
        "tags": [
          "Dashboard Views"
        ],
        "summary": "Get Dashboard Views",
        "description": "Retrieve the list of views of the specific dashboard for the current user.",
        "operationId": "ItemViews_ItemViewsByItemId",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Dashboard ID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Views have been retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiItemViewResponse"
              }
            }
          },
          "204": {
            "description": "View list was empty"
          },
          "400": {
            "description": "Dashboard ID invalid"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "417": {
            "description": "Failed to get views"
          }
        }
      }
    },
    "/v5.0/datasources": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "Get Datasources",
        "description": "Users who have created the data source are able to view the lists of data sources.",
        "operationId": "DataSource_GetDataSources",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search Keyword<br />Keyword searched in <code>Name, Description, CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sorting type. Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          }
        ],
        "responses": {
          "200": {
            "type": "array",
            "description": "List of datasources has been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/PaginatedApiResponse"
            }
          },
          "204": {
            "description": "Items not found"
          },
          "400": {
            "description": "Page does not exists."
          },
          "401": {
            "description": "Access denied"
          },
          "403": {
            "description": "Access denied for the item"
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      },
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "Create Data Source",
        "description": "Create a data source.",
        "operationId": "DataSource_CreateDataSource",
        "parameters": [
          {
            "name": "apiDataSourceConnectionAdd",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiDataSourceAttribute"
            },
            "description": "The following documentation explains how a user can create a data source using the API.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "The data source has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/WebAPItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Item name is empty",
            "content": {}
          },
          "401": {
            "description": " Unauthorized.",
            "content": {}
          },
          "404": {
            "description": "Requested resource is not found.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "411": {
            "description": "Content-length is required.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "DataSource"
        ],
        "summary": "Update Data Source",
        "description": "Update an existing data source on a specific site. \n\n **Note**: The Update data source API is only applicable for a live SQL data source.",
        "operationId": "DataSource_UpdateDataSource",
        "parameters": [
          {
            "name": "apiUpdateDataSourceV4",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiUpdateDataSourceAttribute"
            },
            "description": "Details about the passed data source will be updated.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The data source has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/WebAPItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Item name is empty",
            "content": {}
          },
          "401": {
            "description": " Unauthorized.",
            "content": {}
          },
          "404": {
            "description": "Requested resource is not found.",
            "content": {}
          },
          "409": {
            "description": "Item name already exists.",
            "content": {}
          },
          "411": {
            "description": "Content-length is required.",
            "content": {}
          }
        }
      }
    },
    "/v5.0/datasources/{datasourceId}": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "Get Datasource by Id",
        "description": "Users who have created the data source are able to view the details of the data source.",
        "operationId": "DataSource_GetDataSource",
        "parameters": [
          {
            "type": "string",
            "name": "datasourceId",
            "in": "path",
            "required": true,
            "description": "Datasource ID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Data source detail was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiDataSourceSpecifiedItemDetail"
            }
          },
          "400": {
            "description": "Item id invalid."
          },
          "401": {
            "description": "Access denied."
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not GET."
          }
        }
      },
      "delete": {
        "tags": [
          "DataSource"
        ],
        "summary": "Delete Datasource",
        "description": "Users who have delete access to the item type data source can delete the item by providing the Datasource Id.",
        "operationId": "DataSource_DeleteDataSource",
        "parameters": [
          {
            "type": "string",
            "name": "datasourceId",
            "in": "path",
            "required": true,
            "description": "Datasource ID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Item id invalid."
          },
          "401": {
            "description": "Access denied."
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not DELETE."
          },
          "417": {
            "description": "Failed to delete item."
          }
        }
      }
    },
    "/v5.0/datasources/{itemId}/copy": {
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "Copy Datasource",
        "description": "Users who have create access to the data source can copy the data source.",
        "operationId": "DataSource_CopyDataSource",
        "parameters": [
          {
            "type": "string",
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "ItemId of the data source will be copied.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "apiCopyDatasource",
            "in": "body",
            "required": true,
            "description": "Details of the passed data source will be copied.",
            "schema": {
              "$ref": "#/definitions/ApiCopyDataSourceRequestV4"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The datasource has been copied successfully.",
            "schema": {
              "$ref": "#/definitions/ApiCopyItemResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Data source name already exist"
          },
          "417": {
            "description": "Failed to copy the data source"
          }
        }
      }
    },
    "/v5.0/datasource/getcolumns/{datasourceId}": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "Get the Data Source columns by Id.",
        "description": "Users who have read access to the data source can obtain details of the data source columns.",
        "operationId": "DataSource_GetDataSourceColumns",
        "parameters": [
          {
            "type": "string",
            "name": "datasourceId",
            "in": "path",
            "required": true,
            "description": "Data source ID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Data source columns was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/GetDataSourceColumnsApiResponse"
            }
          },
          "401": {
            "description": "Access denied."
          },
          "405": {
            "description": "Request type was not GET."
          }
        }
      }
    },
    "/v5.0/data-sources/{datasourceId}/dashboards": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "Get Linked Dashboards",
        "description": "Users who have read access to the data source can access the list of linked dashboards.",
        "operationId": "DataSource_GetLinkedDataSourceDashboards",
        "parameters": [
          {
            "type": "string",
            "name": "datasourceId",
            "in": "path",
            "required": true,
            "description": "Datasource ID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Linked dashboards retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiGetLinkedDatasourceDashboards"
            }
          },
          "400": {
            "description": "Item id invalid."
          },
          "401": {
            "description": "Access denied."
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not GET."
          }
        }
      }
    },
    "/v5.0/datasource/export": {
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "Export Data Source",
        "description": "Users who have read access to the data source can export it to various formats such as Excel, CSV, and Json. They will receive the exported data source as an array of bytes in response.",
        "operationId": "DataSource_ExportDataSource",
        "parameters": [
          {
            "name": "apiExportDataSource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiExportDataSource"
            },
            "description": "Details about the passed data source will be exported.",
            "x-nullable": true
          },
          {
            "name": "offSet",
            "in": "query",
            "required": false,
            "description": "Specifies the starting point in the dataset from which the export should begin.",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Specifies the maximum number of records to be included in the export.<br /> **Note**: The maximum value is 1000.",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 1000,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data source exported successfully.",
            "schema": {
              "$ref": "#/definitions/ApiExportDataSourceResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "500": {
              "description": "Error while exporting the data source",
              "content": {}
          }
        }
      }
    },
    "/v5.0/create-pipeline":{
      "post": {
        "tags": [
            "Data Hub"
        ],
        "summary": "Create Data Hub pipeline.",
        "description": "This API allows users to create an Data Hub pipeline.",
        "operationId": "DataSource_CreatePipeline",
        "requestBody": {
          "description": "Details about the passed Data Hub pipeline will be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/DataHubPipeline"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Data Hub pipeline has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/AddDataHubPipelineResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          }
        }
      }
    },
    "/v5.0/update-pipeline":{
      "put": {
        "tags": [
            "Data Hub"
        ],
        "summary": "Update Data Hub pipeline.",
        "description": "This API allows users to update an Data Hub pipeline.",
        "operationId": "DataSource_UpdatePipeline",
        "requestBody": {
          "description": "Details about the passed Data Hub pipeline will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/DataHubPipeline"
              }
            }
          },
          "required": true
        },
        "responses": {
            "200": {
              "description": "Data Hub pipeline has been updated successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/UpdateDataHubPipelineResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Access denied.",
              "content": {}
            },
            "405": {
              "description": "Request type was not PUT.",
              "content": {}
            }
        }
      }
    },
    "/v5.0/datasources/columns": {
      "put": {
        "tags": [
          "DataSource"
        ],
        "summary": "Update or Delete Data Source columns",
        "description": "Updating or deleting data source columns.",
        "operationId": "DataSource_UpdateOrDeleteColumns",
        "parameters": [
          {
            "name": "apiUpdateDataSourceV4",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiUpdateOrDeleteDatasourceColumns"
            },
            "description": "Details about the passed data source columns will be updated or deleted.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Bulk editing of dashboard and data source files has been completed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/UpdateOrDeleteDatasourceColumnsResponse"
                }
              }
            }
          },
          "400": {
              "description": "Invalid item ID.",
              "content": {}
          },
          "401": {
            "description": " Access denied..",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT.",
            "content": {}
          },
          "412": {
            "description": "Data source ID is empty.",
            "content": {}
          }
        }
      }
    },
    "/v5.0/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get Items",
        "description": "Retrieve the respective list of items for the item types (Category, Dashboard, Datasource, and Schedule) for the current user.",
        "operationId": "Items_GetItems",
        "parameters": [
          {
            "type": "string",
            "name": "itemType",
            "in": "query",
            "required": true,
            "description": "Item type. Valid values: `\"Category\"` `\"Dashboard\"` `\"Datasource\"` `\"Schedule\"`",
            "x-schema": {
              "$ref": "#/definitions/ItemType"
            },
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "serverPath",
            "in": "query",
            "description": "`\"/\"` + `\"Category name\"`",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "createdBy",
            "in": "query",
            "required": false,
            "description": "<br />\nSpecifies the User ID to filter the items based on the user who created them.<br />",
            "x-nullable": true,
            "schema": {
                "type": "integer",
                "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of items has been retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiItems"
              }
            }
          },
          "204": {
            "description": "Item list is empty"
          },
          "401": {
            "description": "Access denied"
          },
          "400": {
            "description": "Invalid item type"
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      }
    },
    "/v5.0/items/{id}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get Item by Id",
        "description": "Retrieve the respective item details for the current users' item types (Category, Dashboard, Datasource, and Schedule).",
        "operationId": "Items_GetItemDetail",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Item ID. Valid values: `\"CategoryId\"` `\"DashboardId\"` `\"DatasourceId\"` `\"ScheduleId\"`",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Item detail was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiSpecifiedItemDetail"
            }
          },
          "400": {
            "description": "Item id invalid"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete Item",
        "description": "Users who have delete access to the item types Category, Dashboard, Datasource, and Schedule can delete the item by providing the item ID (Category ID, Dashboard ID, Datasource ID, and Schedule ID).",
        "operationId": "Items_DeleteItem",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Item ID. Valid values: `\"CategoryId\"` `\"DashboardId\"` `\"DatasourceId\"` `\"ScheduleId\"`",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Item id invalid"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not DELETE"
          },
          "417": {
            "description": "Failed to delete item"
          }
        }
      }
    },
    "/v5.0/items/is-name-exists": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Check Item name existence",
        "description": "Current user can check whether the item (category, dashboard, datasource, schedule, slideshow) is already exists or not by providing item name (category name, dashboard name, schedule name, datasource name, slideshow name) and itemtype (Category, Dashboard, Data source, Schedule, Slideshow) in the request body.",
        "operationId": "Items_IsItemNameExists",
        "parameters": [
          {
            "name": "apiValidateItemName",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiValidateItemName"
            },
            "description": "Details about the item that was passed will be checked.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Returns an item existence",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "404": {
            "description": "Category details not found."
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "Invalid item type."
          },
          "417": {
            "description": "Failed to validate item name."
          }
        }
      }
    },
    "/v5.0/slideshows": {
      "post": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Add Slideshow",
        "description": "Users who have created access to the slideshow can add a new slideshow.",
        "operationId": "SlideShow_AddSlideshow",
        "parameters": [
          {
            "name": "apiSlideshowAdd",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiSlideshowAdd"
            },
            "description": "Details about the passed slideshow will be added.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "A slideshow was created successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Item name already exists."
          },
          "417": {
            "description": "Failed to add slideshow"
          }
        }
      },
      "get": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Get Slideshows",
        "description": "Retrieve the list of slideshow details.",
        "operationId": "SlideShow_GetSlideshows",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search Keyword<br />Keyword searched in <code>Name, Description, CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sorting type. Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of slideshows was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/PaginatedSlideshowApiResponse"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "204": {
            "description": "Items not found."
          },
          "400": {
            "description": "Page does not exists."
          },
          "417": {
            "description": "Failed to retrieve the slideshows"
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      }
    },
    "/v5.0/slideshows/{slideshowId}": {
      "delete": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Delete Slideshow",
        "description": "Users have the ability to delete the specific slideshow.",
        "operationId": "SlideShow_DeleteSlideshow",
        "parameters": [
          {
            "type": "string",
            "name": "slideshowId",
            "in": "path",
            "required": true,
            "description": "Slideshow ID.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Slideshow id is empty"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not DELETE"
          },
          "417": {
            "description": "Failed to delete slideshow"
          }
        }
      },
      "put": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Update Slideshow",
        "description": "Users who have write access to the slideshow can update the details of the slideshow.",
        "operationId": "SlideShow_EditSlideshow",
        "parameters": [
          {
            "type": "string",
            "name": "slideshowId",
            "in": "path",
            "required": true,
            "description": "Slideshow ID.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "apiSlideshowEdit",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiSlideshowEdit"
            },
            "description": "Details about the passed slideshow will be updated.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "A slideshow was modified successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "417": {
            "description": "Failed to update slideshow"
          }
        }
      },
      "get": {
        "tags": [
          "Slideshow"
        ],
        "summary": "Get Slideshow by Id",
        "description": "Users who have read access to the slideshow can access slideshow details.",
        "operationId": "SlideShow_GetSlideshowDetail",
        "parameters": [
          {
            "type": "string",
            "name": "slideshowId",
            "in": "path",
            "required": true,
            "description": "Slideshow ID.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Slideshow detail was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/SlideshowResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not GET"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "417": {
            "description": "Failed to retrieve the slideshows"
          }
        }
      }
    },
    "/v5.0/dashboards/schedules": {
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Add Dashboard Schedule",
        "description": "Users who have create access to the schedule can add a new dashboard schedule.",
        "operationId": "Dashboards_AddSchedule",
        "parameters": [
          {
            "name": "apiScheduleRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiScheduleRequest"
            },
            "description": "Details about the schedule that was passed will be added.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The schedule was created successfully.",
            "schema": {
              "$ref": "#/definitions/ApiScheduleResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Item name already exists."
          },
          "412": {
            "description": "FTP details invalid."
          },
          "417": {
            "description": "Failed to add schedule"
          }
        }
      },
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get Dashboard Schedules",
        "description": "Users who have read access to the schedule can access the list of dashboard schedules.",
        "operationId": "Dashboards_GetScheduleItems",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 25,
            "minimum": 1,
            "maximum": 100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search Keyword<br />Keyword searched in <code>Name, Description, CreatedByDisplayName</code>",
            "x-nullable": true,
            "example": "  sales "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sorting type. Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Schedule details have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/PaginatedScheduleApiResponse"
            }
          },
          "204": {
            "description": "Item details not found."
          },
          "400": {
            "description": "Page does not exists."
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "417": {
            "description": "Failed to retrieve the schedules"
          }
        }
      }
    },
    "/v5.0/dashboards/schedules/{scheduleId}": {
      "put": {
        "tags": [
          "Schedule"
        ],
        "summary": "Update Dashboard Schedule",
        "description": "Users who have write access to the schedule can update an existing dashboard schedule.",
        "operationId": "Dashboards_UpdateSchedule",
        "parameters": [
          {
            "type": "string",
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "description": "Schedule ID.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "apiUpdateScheduleRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiUpdateScheduleRequest"
            },
            "description": "Details about the schedule that was passed will be updated.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The schedule was modified successfully.",
            "schema": {
              "$ref": "#/definitions/ApiScheduleResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Item name already exists."
          },
          "412": {
            "description": "FTP details invalid."
          },
          "417": {
            "description": "Failed to update schedule"
          },
          "500": {
            "description": "Error in the database while executing the query."
          }
        }
      },
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get Dashboard Schedule by Id",
        "description": "Users who have read access to the schedule can access the specific dashboard schedule.",
        "operationId": "Dashboards_GetSchedule",
        "parameters": [
          {
            "type": "string",
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "description": "Schedule ID.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Schedule detail has been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiScheduleItemDetail"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not GET"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "417": {
            "description": "Failed to retrieve the schedule"
          }
        }
      }
    },
    "/v5.0/schedules/{scheduleId}/run": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Run Schedule",
        "description": "Users who have read access to the schedule can run that specific schedule.",
        "operationId": "Scheduler_RunSchedule",
        "parameters": [
          {
            "type": "string",
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "description": "Schedule ID.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The schedule started successfully. Schedule recipients will receive notification once a schedule has been completed successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not GET"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "417": {
            "description": "Failed to run the schedule"
          }
        }
      }
    },
    "/v5.0/schedules/{scheduleId}": {
      "delete": {
        "tags": [
          "Schedule"
        ],
        "summary": "Delete Schedule",
        "description": "Users who have delete access to the item type schedule can delete the specific dashboard schedule by providing the Schedule Id.",
        "operationId": "Scheduler_DeleteSchedule",
        "parameters": [
          {
            "type": "string",
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "description": "Schedule ID.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Item id invalid."
          },
          "401": {
            "description": "Access denied."
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type was not DELETE."
          },
          "417": {
            "description": "Failed to delete item."
          }
        }
      }
    },
    "/v5.0/pinboard": {
      "post": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Add Pinboard",
        "description": "Add the new pinboard to a specific site.",
        "operationId": "Pinboard_AddEmbedPinBoard",
        "parameters": [
          {
            "name": "apiEmbedPinbaord",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiAddEmbedPinboard"
            },
            "description": "Details about adding pinboard.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Pinboard has been added successfully.",
            "schema": {
              "$ref": "#/definitions/ApiAddPinboardResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Pinboard name already exists."
          },
          "417": {
            "description": "Failed to add pinboard details."
          }
        }
      },
      "get": {
        "tags" : [
          "Pinboard"
        ],
        "summary": "Get Pinboards",
        "description": "Retrieve the list of pinboard details.",
        "operationId": "Pinboard_GetPinboards",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "<br />\nPage number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema" : {
                "type": "integer",
                "format": "int32"
            },
            "example": "  1 ",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "<br />\nPage size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
                "type": "integer",
                "format": "int32"
            },
            "example" : "  10 ",
             "default": 25,
             "minimum":1,
             "Maximum":100
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "required": false,
            "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name</code>",
            "x-nullable": true,
            "example": " Bold "
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
            "x-nullable": true,
            "example": "  + "
          }
        ],
      "responses": {
         "200": {
            "description": "List of pinboards has been retrieved successfully.",
            "content":{
                "application/json": {
                    "schema": {
                        "$ref": "#/definitions/ApiGetPinboardPaginatedResponse"
                    }
                }
            }
          },
          "400": {
            "description": "Pinboard list is empty.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET.",
            "content": {}
          }
        }
      }
    },
    "/v5.0/pinboard/copy": {
      "post": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Copy Pinboard",
        "description": "Copy the pinboard on the specific site.",
        "operationId": "Pinboard_CopyEmbedPinBoard",
        "parameters": [
          {
            "name": "apiEmbedPinbaord",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiSiteCopyPinboard"
            },
            "description": "Details about the copy pinboard.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Pinboard has been copied successfully.",
            "schema": {
              "$ref": "#/definitions/ApiAddPinboardResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Pinboard name already exists."
          },
          "417": {
            "description": "Failed to copy pinboard details."
          }
        }
      }
    },
    "/v5.0/pinboard/{name}": {
      "get": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Get Pinboard by Name",
        "description": "Users who have create access for the dashboard can retrieve pinboard items.",
        "operationId": "Dashboards_GetEmbedPinBoard",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Pinboard name",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Pinboard detail have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "417": {
            "description": "Failed to retrieve the pinboard detail"
          }
        }
      },
      "put": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Update Pinboard",
        "description": "Update an existing pinboard on a specific site.",
        "operationId": "Pinboard_UpdateEmbedPinBoard",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Pinboard name",
            "x-nullable": false
          },
          {
            "name": "apiEmbedPinbaord",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiUpdateEmbedPinboard"
            },
            "description": "Details regarding the passed pinboard will be updated.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Pinboard Updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiAddPinboardResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not PUT."
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Pinboard name already exists."
          },
          "417": {
            "description": "Failed to update pinboard details."
          }
        }
      },
      "delete": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Delete Pinboard",
        "description": "Users who have created a pinboard can delete it.",
        "operationId": "Pinboard_RemoveEmbedPinBoard",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Pinboard name",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Item name is empty"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not DELETE"
          },
          "417": {
            "description": "Failed to delete pinboard item."
          }
        }
      }
    },
    "/v5.0/pinboard/rename/{name}":{
      "put": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Update Rename pinboard",
        "description": "Users who have created the dashboard can update or rename a pinboard.",
        "operationId": "Pinboard_UpdateRenamePinboard",
        "parameters":[
          {
            "type": "string",
            "name": "name",
            "in": "body",
            "required": true,
            "description": "Existing Pinboard name",
            "format": "string",
            "x-nullable": false
          },
          {
            "name": "ApiPinboard",
            "in": "body",
            "required": true,
            "description": "Details about the rename pinboard passed will be updated.",
            "schema": {
              "$ref": "#/definitions/ApiPinboard"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable" : false,
            "description": "Pinboard have been renamed successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400":{
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "405":{
            "description": "Request type was not PUT.",
            "content": {}
          },
          "409":{
            "description": "Item name already exists.",
            "content": {}
          }
        }
      }
    },
    "/v5.0/pinboard/is-name-exists": {
      "post": {
        "tags": [
          "Pinboard"
        ],
        "summary": "Check Pinboard name existence",
        "description": "The current user can check whether the pinboard already exists by providing the name in the request body.",
        "operationId": "Pinboard_IsPinBoardNameExists",
        "parameters": [
          {
            "name": "apiValidatePinboardName",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiValidatePinboardName"
            },
            "description": "Details about the item that was passed will be checked.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Returns an item existence",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "500": {
            "description": "Error in the database while executing the query."
          }
        }
      }
    },
    "/v5.0/publish/item": {
      "post": {
        "tags": [
          "Publish to another site"
        ],
        "summary": "Publish Dashboard",
        "description": "Publish the dashboard from one site to other site(s).\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Publish_Dashboard",
        "parameters": [
          {
            "type": "string",
            "name": "ApiPublishItemDetail",
            "in": "body",
            "required": true,
            "description": "Details about the publish dashboard, which have been sent as a request.",
            "schema": {
              "$ref": "#/definitions/ApiPublishItemDetail"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The dashboard is being published to one or more sites.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or empty"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "404": {
            "description": "Site not found"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not POST"
          }
        }
      }
    },
    "/v5.0/publish/items": {
      "get": {
        "tags": [
          "Publish to another site"
        ],
        "summary": "Get Published Items",
        "description": "Please provide the details of the published items.",
        "operationId": "Publish_GetPublishedItemsDetails",
        "parameters": [
          {
            "type": "string",
            "name": "itemType",
            "in": "query",
            "required": true,
            "description": "Item type. Valid values: `\"Dashboard\"` `\"Datasource\"`",
            "x-schema": {
              "$ref": "#/definitions/ItemType"
            },
            "x-nullable": false
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 1,
            "minimum": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Page size<br /> **Note**: For more details on pagination, refer to this [link](../api-reference/#section/Getting-Started/Pagination)",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "default": 25,
            "minimum": 1,
            "maximum": 100
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Published items details have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/GetItemsPaginatedApiResponse"
            }
          },
          "204": {
            "description": "No content.."
          },
          "405": {
            "description": "Request type is not GET"
          }
        }
      }
    },
    "/v5.0/publish/external-sites/add": {
      "post": {
        "tags": [
          "Publish to another site"
        ],
        "summary": "Add External Site",
        "description": "Please provide the details of the external site.",
        "operationId": "Add_External_Sites",
        "parameters": [
          {
            "type": "string",
            "name": "ExternalSites",
            "in": "body",
            "required": true,
            "description": "Details about the external site that was requested to be added.",
            "schema": {
              "$ref": "#/definitions/ExternalSites"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The external site was created successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or empty"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "409": {
            "description": "External site name is duplicated."
          }
        }
      }
    },
    "/v5.0/external-sites":{
      "get": {
        "tags": [
          "Publish to another site"
        ],
        "summary": "Get External Site Details",
        "description": "Details for the external site are available for the user who is currently logged in.",
        "operationId": "Get_External_Sites",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The External site has been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiExternalSiteDetails"
            }
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET",
            "content": {}
          }
        }
      }
    },
    "/v5.0/external-sites/{id}":{
      "put": {
        "tags": [
          "Publish to another site"
        ],
        "summary": "Update External site details",
        "description": "Please update the corresponding external sites.",
        "operationId": "Edit_External_Sites",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the External site",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "ApiEditExternalSites",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiEditExternalSites"
            },
            "description": "Details about the external site passed will be updated.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "External site has been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "405": {
            "description": "Request type was not PUT",
            "content": {}
          },
          "409": {
            "description": "Name already exists.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Publish to another site"
        ],
        "summary": "Delete External Site",
        "description": "Please remove the additional external sites.",
        "operationId": "Delete_External_Sites",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the External site",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "404": {
            "description": "Site details not found.",
            "content": {}
          },
          "405": {
            "description": "Request type was not DELETE.",
            "content": {}
          }
        }
      }
    },
    "/v5.0/publish/items/{itemId}/synchronize":{
      "post": {
        "tags": [
          "Publish to another site"
        ],
        "summary": "Synchronize Published Dashboard",
        "description": "Users who have been granted access to the item can synchronize.",
        "operationId": "Synchronize_Published_Dashboard",
        "parameters": [
          {
            "type": "string",
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "ID of the item will be Synchronized.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "ApiItemSynchronize",
            "in": "body",
            "required": true,
            "description": "Details of the item passed will be synchronized.",
            "schema": {
              "$ref": "#/definitions/ApiItemSynchronize"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The dashboard is being synchronized to one or more sites.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "403": {
            "description": "Access denied."
          },
          "404": {
            "description": "Item details not found."
          },
          "405": {
            "description": "Request type is not POST."
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "417": {
            "description": "The published dashboard failed to synchronize."
          }
        }
      }
    },
    "/v5.0/attribute/user": {
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Add User Attribute",
        "description": "Add the attribute for a specific user.",
        "operationId": "Attribute_AddUserAttribute",
        "parameters": [
          {
            "name": "attribute",
            "in": "body",
            "required": true,
            "description": "Attribute object, which is sent as request.",
            "schema": {
              "$ref": "#/definitions/ApiUserAddAttribute"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Attribute details created successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Attribute name already exists"
          },
          "417": {
            "description": "Failed to add attribute details"
          }
        }
      },
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Update User Attribute",
        "description": "Updates the specific attribute of a specific user.",
        "operationId": "Attribute_UpdateUserAttribute",
        "parameters": [
          {
            "name": "attribute",
            "in": "body",
            "required": true,
            "description": "Attribute object, which is sent as request.",
            "schema": {
              "$ref": "#/definitions/ApiUserUpdateAttribute"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Attribute details was modified successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Attribute name already exists"
          },
          "417": {
            "description": "Failed to update attribute details"
          }
        }
      }
    },
    "/v5.0/attribute/user/{id}": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Get User Attributes",
        "description": "Retrieve the list of attributes of the specific user.",
        "operationId": "Attribute_GetUserCustomAttribute",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Attribute details has been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "User ID invalid"
          },
          "404": {
            "description": "Attributes not found"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "417": {
            "description": "Failed to get attribute details"
          }
        }
      },
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Delete User Attribute",
        "description": "Delete the attribute of the specific user.",
        "operationId": "Attribute_DeleteUserAttribute",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User attribute ID",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Attribute ID invalid"
          },
          "405": {
            "description": "Request type was not DELETE"
          },
          "417": {
            "description": "Failed to delete attribute details"
          }
        }
      }
    },
    "/v5.0/attribute/group": {
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Add Group Attribute",
        "description": "Add the attribute for a specific group.",
        "operationId": "Attribute_AddGroupAttribute",
        "parameters": [
          {
            "name": "attribute",
            "in": "body",
            "required": true,
            "description": "Attribute object, which is sent as request.",
            "schema": {
              "$ref": "#/definitions/ApiGroupAddAttribute"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Attribute details created successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Attribute name already exists"
          },
          "417": {
            "description": "Failed to add attribute details"
          }
        }
      },
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Update Group Attribute",
        "description": "Retrieve the list of attributes of the specific group.",
        "operationId": "Attribute_UpdateGroupAttribute",
        "parameters": [
          {
            "name": "attribute",
            "in": "body",
            "required": true,
            "description": "Attribute object, which is sent as request.",
            "schema": {
              "$ref": "#/definitions/ApiGroupUpdateAttribute"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Attribute details was modified successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Attribute name already exists"
          },
          "417": {
            "description": "Failed to update attribute details"
          }
        }
      }
    },
    "/v5.0/attribute/group/{id}": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Get Group Attributes",
        "description": "Retrieve the list of attributes of the specific group.",
        "operationId": "Attribute_GetGroupCustomAttribute",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Group ID",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Attribute details has been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Group ID invalid"
          },
          "404": {
            "description": "Attributes not found"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "417": {
            "description": "Failed to get attribute details"
          }
        }
      },
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Delete Group Attribute",
        "description": "Remove the attribute from the specific group.",
        "operationId": "Attribute_DeleteGroupAttribute",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Group attribute ID",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Attribute ID invalid"
          },
          "405": {
            "description": "Request type was not DELETE"
          },
          "417": {
            "description": "Failed to delete attribute details"
          }
        }
      }
    },
    "/v5.0/attribute/site": {
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Add Site Attribute",
        "description": "Add the attribute for a specific site.",
        "operationId": "Attribute_SaveSiteAttribute",
        "parameters": [
          {
            "name": "attribute",
            "in": "body",
            "required": true,
            "description": "Attribute object, which is sent as request.",
            "schema": {
              "$ref": "#/definitions/ApiSiteAddAttribute"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Attribute details created successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "405": {
            "description": "Request type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Attribute name already exists"
          },
          "417": {
            "description": "Failed to add attribute details"
          }
        }
      },
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Update Site Attribute",
        "description": "Update the specific attribute of a particular site.",
        "operationId": "Attribute_UpdateSiteAttributes",
        "parameters": [
          {
            "name": "attribute",
            "in": "body",
            "required": true,
            "description": "Attribute object, which is sent as request.",
            "schema": {
              "$ref": "#/definitions/ApiSiteUpdateAttribute"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Attribute details was modified successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Attribute name already exists"
          },
          "417": {
            "description": "Failed to update attribute details"
          }
        }
      },
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Get Site Attributes",
        "description": "Retrieve the list of attributes for the specific site.",
        "operationId": "Attribute_GetSiteAttributes",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Attribute details has been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Attributes not found"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "417": {
            "description": "Failed to get attribute details"
          }
        }
      }
    },
    "/v5.0/attribute/site/{id}": {
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Delete Site Attribute",
        "description": "Remove the attribute from the specific site.",
        "operationId": "Attribute_DeleteSiteAttributes",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Site attribute ID",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Attribute ID invalid"
          },
          "405": {
            "description": "Request type was not DELETE"
          },
          "417": {
            "description": "Failed to delete attribute details"
          }
        }
      }
    },
    "/v5.0/settings/site": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Site Settings",
        "description": "Retrieve the list of site setting details for the particular site if the user has administrative rights for the site settings.",
        "operationId": "Administration_GetSiteSettings",
        "parameters": [
          {
            "type": "string",
            "name": "key",
            "in": "query",
            "required": false,
            "description": "List of site setting keys separated by `,`",
            "x-nullable": true,
            "default": null
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Site setting details has been retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiSiteSettings"
              }
            }
          },
          "401": {
            "description": "Access denied."
          },
          "405": {
            "description": "Request type was not GET."
          },
          "417": {
            "description": "Failed to retrieve site settings details."
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Site Settings",
        "description": "Users who have administrative rights to the site are able to update the site settings.",
        "operationId": "Administration_UpdateSiteSettings",
        "parameters": [
          {
            "name": "apiUpdateSiteSettings",
            "in": "body",
            "required": true,
            "description": "The details of the site settings that were passed will be updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateApiSiteSettings"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Site settings has been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateSiteSettingsResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "417": {
            "description": "Failed to update site setting details"
          }
        }
      }
    },
    "/v5.0/settings/dashboard-settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Dashboard Settings",
        "description": "Users who have admin rights permissions to dashboard settings can update the dashboard settings.\n\n<B> **Note:** </B> Cannot set true or enable performance metrics/query metrics, when usage analytics is disabled.",
        "operationId": "Administration_GetDashboardSettings",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Dashboard setting details have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiDashboardSettings"
            }
          },
          "401": {
            "description": "Access denied."
          },
          "405": {
            "description": "Request type was not GET."
          },
          "417": {
            "description": "Failed to retrieve dashboard settings."
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Dashboard Settings",
        "description": "Users who have admin rights permissions to dashboard settings can update the dashboard settings.",
        "operationId": "Administration_UpdateDashboardSettings",
        "parameters": [
          {
            "name": "apiDashboardSettings",
            "in": "body",
            "required": true,
            "description": "The details of the dashboard settings that have been passed will be updated.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateDashboardSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Dashboard settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "417": {
            "description": "Failed to update site setting details"
          },
          "500": {
            "description": "Error in the database while executing the query."
          }
        }
      }
    },
    "/v5.0/settings/email": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Email Settings",
        "description": "Retrieve the email setting details of the specific site if the user has administrative rights for the email settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_GetEmailSettings",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Email setting details have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiEmailSettings"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "500": {
            "description": "Failed to retrieve email settings"
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Email Settings",
        "description": "Users who have admin rights permission to email settings are able to update the email settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_UpdateEmailSettings",
        "parameters": [
          {
            "name": "apiEmailSettings",
            "in": "body",
            "required": true,
            "description": "The details of the email settings that have been provided will be updated.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateEmailSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Email settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "412": {
            "description": "Email address is invalid (or) Authentication type is invalid"
          },
          "417": {
            "description": "Failed to update email settings"
          }
        }
      }
    },
    "/v5.0/settings/azure-active-directory": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Azure AD Settings",
        "description": "Retrieve the Azure AD settings details if the user has admin rights for the user directories.",
        "operationId": "Administration_GetAzureADSettings",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Azure AD settings details have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiAzureADSettings"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "500": {
            "description": "Failed to retrieve Azure AD settings"
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Azure AD Settings",
        "description": "Users who have admin rights permissions to user directories can update the Azure AD settings.",
        "operationId": "Administration_UpdateAzureADSettings",
        "parameters": [
          {
            "name": "apiAzureADSettings",
            "in": "body",
            "required": true,
            "description": "The details of the azure active directory settings that have been passed will be updated.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateAzureADSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Azure AD settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "412": {
            "description": "Connection details are invalid"
          },
          "417": {
            "description": "Failed to update azure ad settings"
          }
        }
      }
    },
    "/v5.0/settings/schedule-synchronization/azure-active-directory": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Azure AD Schedule Synchronization Settings",
        "description": "Retrieves the Azure AD Schedule Synchronization Settings details if the user has admin rights for the user directories.",
        "operationId": "Administration_GetAzureADScheduleSettings",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Azure AD Schedule Synchronization settings details have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiAzureAdScheduleSynchronizationSettings"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "500": {
            "description": "Failed to retrieve email settings"
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Azure AD Schedule Synchronization Settings",
        "description": "Users with administrative permissions to user directories can update the Azure AD schedule synchronization settings.",
        "operationId": "Administration_UpdateAzureADScheduleSettings",
        "parameters": [
          {
            "name": "apiAzureADSynchronizationSchedule",
            "in": "body",
            "required": true,
            "description": "The details of the Azure Active Directory schedule synchronization settings that have been provided will be updated.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateAzureAdScheduleSynchronizationSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Azure AD Schedule Synchronization settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateAzureAdScheduleSynchronizationSettingsResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "406": {
            "description": "Schedule type is invalid (or) Recurrence type is invalid"
          },
          "412": {
            "description": "Start time is invalid"
          },
          "417": {
            "description": "Failed to update azure ad synchronization schedule settings"
          }
        }
      }
    },
    "/v5.0/settings/accounts": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Account Settings",
        "description": "Retrieve the account setting details of the specific site if the user has administrative rights for the account settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_GetAccountSettings",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Account setting details have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiAccountSettings"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "500": {
            "description": "Failed to retrieve account settings"
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Account Settings",
        "description": "Users who have admin rights permissions to account settings can update the account settings.",
        "operationId": "Administration_UpdateAccountSettings",
        "parameters": [
          {
            "name": "apiAccountSettings",
            "in": "body",
            "required": true,
            "description": "The details of the account settings that have been passed will be updated.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateAccountSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Account settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "412": {
            "description": "Email settings are not configured (or) user email field is set as false for Email activation type"
          },
          "417": {
            "description": "Failed to update account settings"
          }
        }
      }
    },
    "/v5.0/settings/security/cors": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get CORS Settings",
        "description": "Retrieve the CORS setting details if the user has admin rights for the security settings.",
        "operationId": "Administration_GetCorsSettings",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "CORS settings details have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiCorsSettings"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "500": {
            "description": "Failed to retrieve cors settings"
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Cors Settings",
        "description": "Users who have administrative rights permission to security settings can update the CORS settings.",
        "operationId": "Administration_UpdateCORSSettings",
        "parameters": [
          {
            "name": "apiCorsSettings",
            "in": "body",
            "required": true,
            "description": "The details of the CORS settings that have been passed will be updated.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateCorsSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Cors settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "417": {
            "description": "Failed to update cors settings"
          }
        }
      }
    },
    "/v5.0/settings/datastore": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Datastore settings",
        "description": "Retrieve the datastore setting details of a specific site if the user has administrative rights for the datastore settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_GetDatastoreSettings",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Datastore settings details have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiGetDatastoreSettings"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET."
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Datastore Settings",
        "description": "Users who have administrative rights permission to the datastore settings can update the settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_UpdateDatastoreSettings",
        "parameters": [
          {
            "name": "apiDatastoreSettings",
            "in": "body",
            "required": true,
            "description": "The details of the datastore settings that have been passed will be updated.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateDatastoreSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Datastore settings details have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or empty"
          },
          "401": {
            "description": "Access denied."
          },
          "404": {
            "description": "Database not found"
          },
          "405": {
            "description": "Request type was not PUT."
          },
          "409": {
            "description": "Database already exists"
          }
        }
      }
    },
    "/v5.0/settings/look-and-feel": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Look and Feel Settings",
        "description": "Retrieve the Look and Feel settings details of the particular site if the user has admin rights for the look and feel settings.",
        "operationId": "Administration_GetLookandFeelSettings",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Look and Feel setting details has been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiLookandFeelSettings"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not GET"
          },
          "500": {
            "description": "Failed to get look and feel settings"
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Look and Feel Settings",
        "description": "Users who have administrative rights permissions to the site can update the site's look and feel settings.",
        "operationId": "Administration_UpdateLookandFeelSettings",
        "parameters": [
          {
            "name": "apiUpdateLookAndSettings",
            "in": "body",
            "required": true,
            "description": "The details of the Look and Feel settings that have been passed will be updated.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateLookAndSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Look and Feel settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not PUT"
          },
          "417": {
            "description": "Failed to update Look and Feel settings"
          }
        }
      }
    },
    "/v5.0/deployment-dashboards": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Add Deployment Dashboards",
        "description": "In the master site, the user who has admin rights for the dashboard settings can add deployment dashboards.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_AddDeploymentDashboards",
        "parameters": [
          {
            "name": "Settings",
            "in": "body",
            "required": true,
            "description": "Deployment dashboards details, which is sent as request.",
            "schema": {
              "$ref": "#/definitions/ApiAddDeploymentDashboards"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Deployment dashboard has been added successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete."
          },
          "405": {
            "description": "Request type was not POST."
          },
          "406": {
            "description": "The content of the request body is invalid."
          },
          "409": {
            "description": "Dashboard details already exists."
          }
        }
      },
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Deployment Dashboards",
        "description": "The list of deployment dashboard details will be retrieved from the master site only if the user has administrative rights for the dashboard settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_GetDeploymentDashboards",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The Deployment dashboard has been retrieved successfully",
            "schema": {
              "$ref": "#/definitions/ApiGetDeploymentDashboards"
            }
          },
          "204": {
            "description": "There is no deployment dashboards."
          },
          "401": {
            "description": "Access denied."
          },
          "404": {
            "description": "Request not found(When access the url with slave site)."
          },
          "405": {
            "description": "Request type was not GET."
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete Deployment Dashboard",
        "description": "Delete the deployment dashboards by their respective dashboard IDs.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_DeleteDeploymentDashboards",
        "parameters": [
          {
            "type": "string",
            "name": "itemId",
            "in": "query",
            "required": true,
            "description": "Item ID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "404": {
            "description": "One or more dashboard details not found."
          },
          "405": {
            "description": "Request type was not DELETE."
          }
        }
      }
    },
    "/v5.0/settings/security/x-frame-options": {
      "get" : {
        "tags": [
          "Settings"
        ],
        "summary": "Get X-Frame-Options Settings",
        "description": "Retrieve the X-Frame-Options setting details of the particular site if the user has admin rights for the X-Frame-Options settings.",
        "operationId": "Administartion_GetX-Frame-OptionsSettings",
        "responses": {
          "200": {
            "description": "X-Frame-Options settings details have been retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref" : "#/definitions/ApiXFrameOptionsSettings"
                }
              }
            }
          },
          "401": {
            "description": "Access denied."
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update X-Frame-Options Settings",
        "description": "Users who have admin rights permissions for x-frame-option settings can update the x-frame-option settings.",
        "operationId": "Administartion_UpdateX-Frame-OptionsSettings",
        "parameters": [
          {
            "name": "apiX-Frame-OptionsSettings",
            "in": "body",
            "required": true,
            "description": "The updated x-frame-options settings that have been passed will be updated with the details.",            
            "schema": {
              "$ref": "#/definitions/ApiXFrameOptionsSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "X-Frame-Options settings details have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Access denied."
          }
        }
      }
    },
    "/v5.0/settings/security/networking/ip-whitelist": {
      "get": {
          "tags": [
              "Settings"
          ],
          "summary": "Get IP whitelisting Settings",
          "description": "Retrieve the IP whitelisting setting details.",
          "operationId": "Administartion_GetIPWhitelistingSettings",
          "responses": {
              "200": {
                  "description": "IP whitelisting settings details have been retrieved successfully.",
                  "schema": {
                      "$ref": "#/definitions/ApiIPWhitelistingSettings"
                  }
              },
              "401": {
                  "description": "Access denied",
                  "content": {}
              },
              "405":{
                  "description": "Request type was not get",
                  "content": {}
              }
          }
      },
      "post": {
          "tags": [
              "Settings"
          ],
          "summary": "Update IP whitelisting settings",
          "description": "Users who have admin rights permissions for IP whitelisting settings can update the IP whitelisting settings.",
          "operationId": "Administartion_UpdateIPWhitelistingSettings",

            "parameters": [
              {
                "name": "IPWhitelistingSettings",
                "in": "body",
                "required": true,
                "description": "The updated IP whitelisting settings that have been passed will be updated with the details.",            
                "schema": {
                  "$ref": "#/definitions/IPWhitelistingResponse"
                },
                "x-nullable": false
              }
            ],
            "responses": {
              "200": {
                "description": "IP whitelisting settings details has been updated successfully.",
                "schema": {
                  "$ref": "#/definitions/ApiResponse"
                }
              },
              "401": {
                  "description": "Access denied",
                  "content": {}
              },
              "405":{
                  "description":"Request type was not post",
                  "content": {}
              },
              "404":{
                  "description":"Content of the request is empty or missing",
                  "content": {}
              },
              "417":{
                  "description":"Failed to update IP whitelisting setting",
                   "content": {}
              }
          }
      }
  },
    "/v5.0/settings/security/csp": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Content-Security-Policy settings",
        "description": "Retrieve the Content-Security-Policy settings details of the specific site if the user has administrative rights for the Content-Security-Policy settings.",        
        "operationId": "Administration_GetCSPSecuritysettings",
        "responses": {
          "200": {
            "description": "Content-Security-Policy settings details have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiCSPSecuritySettings"
            }
          },
          "401": {
            "description": "Access denied"
          },
          "404" : {
            "description" : "Item details not found."
          },
          "405": {
            "description": "Request type was not GET."
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Content-Security-Policy settings",
        "description": "Users who have administrative rights permissions for Content-Security-Policy settings are able to update the Content-Security-Policy settings.",      
        "operationId": "Administration_UpdateCSPSecuritysettings",
        "parameters": [
          {
            "name": "apiCSPSecuritySettings",
            "in": "body",
            "required": true,
            "description": "The details of the updated Content-Security-Policy settings that have been passed will be updated.",            
            "schema": {
              "$ref": "#/definitions/ApiCSPSecuritySettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Content-Security-Policy settings details has been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete."
          },
          "401": {
            "description": "Access denied"
          },
          "404" : {
            "description" : "Item details not found."
          },
          "405": {
            "description": "Request type was not PUT."
          }
        }
      }
    },
    "/v5.0/settings/notifications": {
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Notification Settings",
        "description": "Users who have admin rights permission to notification settings can updated the notification settings.",
        "operationId": "Administration_UpdateNotificationSettings",
        "parameters": [
          {
            "name": "apiNotificationSettings",
            "in": "body",
            "required": true,
            "description": "The details of the updated notification settings that have been passed will be updated.",
            "schema": {
              "$ref": "#/definitions/Notification"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Notification settings details have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Access denied."
          },
          "405": {
            "description": "Request type was not PUT."
          }
        }
      }
    },
    "/v5.0/profile/notifications": {
      "get": {
        "tags": [
          "User Profile"
        ],
        "summary": "Get User Notification Settings",
        "description": "Retrieve the user's notification settings details for the specific site.",       
        "operationId": "UserProfile_UserNotificationSettings",
        "responses": {
          "200": {
            "description": "User notifications settings details have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/UserNotificationSettings"
            }
          },
          "401": {
            "description": "Access denied."
          },
          "405": {
            "description": "Request type was not GET."
          }
        }
      },
      "put": {
        "tags": [
          "User Profile"
        ],
        "summary": "Update User Notification Settings",
        "description": "Users are able to update their notification settings.",
        "operationId": "UserProfile_UpdateUserNotificationSettings",
        "parameters": [
          {
            "name": "apiUserNotificationSettings",
            "in": "body",
            "required": true,
            "description": "The details of the user notification settings that have been passed will be updated.",
            "schema": {
              "$ref": "#/definitions/UserNotificationSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "User notification settings details have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Access denied."
          },
          "405": {
            "description": "Request type was not PUT."
          }
        }
      }
    },
    "/v5.0/settings/authentication/oauth": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get OAuth settings",
        "description": "The OAuth settings details of the specific site are retrieved if the user has administrative rights for the authentication settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administartion_GetOAuthSettings",
        "responses": {
          "200": {
            "description": "OAuth settings have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiGetOAuthSettings"
            }
          },
          "401": {
            "description": "Access denied."
          },
          "404":{
            "description":"OAuth settings are not configured."
          },
          "405": {
            "description": "Request type was not GET."
          },
          "500": {
            "description": "Failed to retrieve the OAuth settings."
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update OAuth settings",
        "description": "Users who have administrator rights or permissions for authentication settings are able to update the OAuth settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_ApiUpdateOAuthSettings",
        "parameters": [
          {
            "name": "apiOAuthSettings",
            "in": "body",
            "required": true,
            "description": "Detail of the OAuth settings.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateOAuthSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "OAuth settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete."
          },
          "401": {
            "description": "Access denied."
          },
          "405": {
            "description": "Request type was not PUT."
          },
          "406": {
            "description": "The content of the request body is invalid."
          },
          "500": {
            "description": "Failed to update the OAuth settings."
          }
        }
      }
    },
    "/v5.0/settings/authentication/openid": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get OpenId settings",
        "description": "The OpenID settings details for the specific site are retrieved only if the user has administrative rights for the authentication settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administartion_GetOpenIDSettings",
        "responses": {
          "200": {
            "description": "OpenID settings have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiGetOpenIDSettings"
            }
          },
          "401": {
            "description": "Access denied."
          },
          "404":{
            "description":"OpenID settings are not configured."
          },
          "405": {
            "description": "Request type was not GET."
          },
          "500": {
            "description": "Failed to retrieve the OpenID settings."
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update OpenID settings",
        "description": "Users who have admin rights or permission to access authentication settings are able to update the OpenID settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_UpdateOpenIDSettings",
        "parameters": [
          {
            "name": "apiOpenIDSettings",
            "in": "body",
            "required": true,
            "description": "Detail of the OpenID settings.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateOpenIDSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "OpenID settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete."
          },
          "401": {
            "description": "Access denied."
          },
          "405": {
            "description": "Request type was not PUT."
          },
          "406": {
            "description": "The content of the request body is invalid."
          },
          "500": {
            "description": "Failed to update the OpenID settings."
          }
        }
      }
    },
    "/v5.0/settings/authentication/jwt": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get JWT settings",
        "description": "The JWT settings details of the specific site are retrieved if the user has administrative rights for the authentication settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administartion_GetJWTSettings",
        "responses": {
          "200": {
            "description": "JWT settings have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiGetJWTSettings"
            }
          },
          "401": {
            "description": "Access denied."
          },
          "404":{
            "description":"JWT settings are not configured."
          },
          "405": {
            "description": "Request type was not GET."
          },
          "500": {
            "description": "Failed to retrieve the JWT settings."
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update JWT settings",
        "description": "Users who have administrator rights or permissions for authentication settings are able to update the JWT settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_ApiUpdateJWTSettings",
        "parameters": [
          {
            "name": "apiJWTSettings",
            "in": "body",
            "required": true,
            "description": "Detail of the JWT settings.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateOAuthSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "JWT settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete."
          },
          "401": {
            "description": "Access denied."
          },
          "405": {
            "description": "Request type was not PUT."
          },
          "406": {
            "description": "The content of the request body is invalid."
          },
          "500": {
            "description": "Failed to update the OAuth settings."
          }
        }
      }
    },
    "/v5.0/settings/windows-active-directory": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Windows AD Settings",
        "description": "Retrieve the Windows AD settings details if the user has administrative rights for the user directories.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_GetWindowsADSettings",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Windows AD settings details have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiWindowsADSettings"
            }
          },
          "401": {
            "description": "Access denied."
          },
          "404": {
            "description": "Windows Active Directory details are not configured.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET."
          },
          "500": {
            "description": "Failed to retrieve Windows AD settings."
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Windows AD Settings",
        "description": "Users who have administrative rights permissions to user directories can update the Windows Active Directory settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_UpdateWindowsADSettings",
        "parameters": [
          {
            "name": "apiWindowsADSettings",
            "in": "body",
            "required": true,
            "description": "The details of the windows active directory settings that have been passed will be updated.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateWindowsADSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Windows AD settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete."
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not PUT."
          },
          "412": {
            "description": "Connection details are invalid."
          },
          "417": {
            "description": "Failed to update Windows AD settings."
          }
        }
      }
    },
    "/v5.0/settings/windows-active-directory/schedule-synchronization": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Windows AD Schedule Synchronization Settings",
        "description": "Retrieve the Windows AD Schedule Synchronization Settings details if the user has admin rights for the user directories.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_GetWindowsADScheduleSettings",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Windows AD Schedule Synchronization settings details have been retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApiAzureAdScheduleSynchronizationSettings"
            }
          },
          "401": {
            "description": "Access denied."
          },
          "404": {
            "description": "Windows AD synchronization schedule settings are not configured.",
            "content": {}
          },
          "405": {
            "description": "Request type was not GET"
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Windows AD Schedule Synchronization Settings",
        "description": "Users who have admin rights permission to user directories can update the Windows Active Directory schedule synchronization settings.\n\n<B> **Note:** </B> This API is not available in Syncfusion Managed Cloud Server.",
        "operationId": "Administration_UpdateWindowsADScheduleSettings",
        "parameters": [
          {
            "name": "apiWindowsADSynchronizationSchedule",
            "in": "body",
            "required": true,
            "description": "The details of the Windows Active Directory schedule synchronization settings that have been provided will be updated.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateAzureAdScheduleSynchronizationSettings"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Windows AD Schedule Synchronization settings have been updated successfully.",
            "schema": {
              "$ref": "#/definitions/ApiUpdateAzureAdScheduleSynchronizationSettingsResponse"
            }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete."
          },
          "401": {
            "description": "Access denied"
          },
          "405": {
            "description": "Request type was not PUT."
          },
          "406": {
            "description": "Schedule type is invalid (or) Recurrence type is invalid."
          },
          "412": {
            "description": "Start time is invalid."
          },
          "417": {
            "description": "Failed to update Windows AD schedule synchronization."
          }
        }
      }
    },
    "/v5.0/activity-logs":{
      "get":{
        "tags":[
          "Activity Logs"
        ],
        "summary": "All Activity Logs",
        "description": "With this endpoint, the site administrator can retrieve a list of all activities performed on the site.",
        "operationId": "ActivityLogs_GetAllActivityLogs",
        "parameters": [
          {
            "type": "string",
            "name": "startDate",
            "in": "query",
            "required": false,
            "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
            "format":"date-time",
            "schema": {
                "type": "string",
                "nullable": false
            }
          },
          {
            "type": "string",
            "name": "endDate",
            "in": "query",
            "required": false,
            "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
            "format":"date-time",
            "schema": {
                "type": "string",
                "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of activities retrieved successfully.",
            "schema":{
              "$ref": "#/definitions/ApiGetActivityLogs"
            }
          },
          "204":{
            "description": "Log is empty"
          },
          "400": {
            "description": "Invalid log module"
          },
          "401":{
            "description":"Access denied"
          },
          "405": {
            "description": "Request type was not GET."
          }
        }
      }
    },
    "/v5.0/activity-logs?activitymodule=group":{
      "get":{
          "tags":[
              "Activity Logs"
          ],
          "summary": "Group Activity Logs",
          "description": "With this endpoint, the site administrator can retrieve the list of activities performed in the group module.",
          "operationId": "ActivityLogs_GetGroupActivityLogs",
          "parameters":[
              {
                  "type": "string",
                  "name": "activity",
                  "in": "query",
                  "required": false,
                  "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>Add, Update, Delete, Sychroniztion, Import, Visit, UserAdd, UserRemove</code>",
                  "schema": {
                    "type": "string",
                    "nullable": false
                  }
              },
              {
                "type": "string",
                "name": "startDate",
                "in": "query",
                "required": false,
                "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                "format":"date-time",
                "schema": {
                    "type": "string",
                    "nullable": false
                }
              },
              {
                "type": "string",
                "name": "endDate",
                "in": "query",
                "required": false,
                "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                "format":"date-time",
                "schema": {
                    "type": "string",
                    "nullable": false
                }
              }
          ],
          "responses":{
              "200":{
                  "x-nullable": true,
                  "description": "List of group activities retrieved successfully.",
                  "schema":{
                      "$ref": "#/definitions/ApiGetGroupActivityLogs"
                  }
              },
              "204":{
                "description": "Log is empty"
              },
              "400": {
                "description": "Invalid log module"
              },
              "401":{
                "description":"Access denied"
              },
              "405": {
                "description": "Request type was not GET."
              }
          }
      }
  },
  "/v5.0/activity-logs?activitymodule=grouppermission":{
      "get":{
          "tags":[
              "Activity Logs"
          ],
          "summary": "Group Permission Activity Logs",
          "description": "With this endpoint, the site administrator can retrieve the list of activities performed in the group permission module.",
          "operationId": "ActivityLogs_GetGroupActivityLogs",
          "parameters":[
               {
                  "type": "string",
                  "name": "activity",
                  "in": "query",
                  "required": false,
                  "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>PermissionAdded, PermissionRemoved</code>",
                  "schema": {
                    "type": "string",
                    "nullable": false
                  }
               },
               {
                "type": "string",
                "name": "startDate",
                "in": "query",
                "required": false,
                "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                "format":"date-time",
                "schema": {
                    "type": "string",
                    "nullable": false
                }
              },
              {
                "type": "string",
                "name": "endDate",
                "in": "query",
                "required": false,
                "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                "format":"date-time",
                "schema": {
                    "type": "string",
                    "nullable": false
                }
              }
          ],
          "responses":{
              "200":{
                "x-nullable": true,
                "description": "List of group permission activities retrieved successfully.",
                "schema":{
                      "$ref": "#/definitions/ApiGetGrouppermissionActivityLogs"
                  }
              },
              "204":{
                "description": "Log is empty"
              },
              "400": {
                "description": "Invalid log module"
              },
              "401":{
                "description":"Access denied"
              },
              "405": {
                "description": "Request type was not GET."
              }
           }
        }
  },
  "/v5.0/activity-logs?activitymodule=user":{
      "get":{
          "tags":[
              "Activity Logs"
          ],
          "summary": "User Activity Logs",
          "description": "With this endpoint, the site administrator can retrieve the list of activities performed in the user module.",
          "operationId": "ActivityLogs_GetUserActivityLogs",
          "parameters":[
              {
                  "type": "string",
                  "name": "activity",
                  "in": "query",
                  "required": false,
                  "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>Add, Update, Delete, Sychroniztion, Import, Visit</code>",
                  "schema": {
                    "type": "string",
                    "nullable": false
                  }
              },
              {
                "type": "string",
                "name": "startDate",
                "in": "query",
                "required": false,
                "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                "format":"date-time",
                "schema": {
                    "type": "string",
                    "nullable": false
                }
              },
              {
                "type": "string",
                "name": "endDate",
                "in": "query",
                "required": false,
                "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                "format":"date-time",
                "schema": {
                    "type": "string",
                    "nullable": false
                }
              }
          ],
          "responses":{
              "200":{
                "x-nullable": true,
                "description": "List of user activities retrieved successfully.", 
                "schema":{
                    "$ref": "#/definitions/ApiGetUserActivityLogs"
                }
              },
              "204":{
                "description": "Log is empty"
              },
              "400": {
                "description": "Invalid log module"
              },
              "401":{
                "description":"Access denied"
              },
              "405": {
                "description": "Request type was not GET."
              }
          }
      }
  },
  "/v5.0/activity-logs?activitymodule=userpermission":{
      "get":{
          "tags":[
              "Activity Logs"
          ],
          "summary": "User Permission Activity Logs",
          "description": "With this endpoint, the site administrator can retrieve the list of activities performed in the user permission module.",
          "operationId": "ActivityLogs_GetUserPermissionActivityLogs",
          "parameters":[
              {
                  "type": "string",
                  "name": "activity",
                  "in": "query",
                  "required": false,
                  "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>PermissionAdded, PermissionRemoved</code>",
                  "schema": {
                    "type": "string",
                    "nullable": false
                  }
              },
              {
                "type": "string",
                "name": "startDate",
                "in": "query",
                "required": false,
                "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                "format":"date-time",
                "schema": {
                    "type": "string",
                    "nullable": false
                }
              },
              {
                "type": "string",
                "name": "endDate",
                "in": "query",
                "required": false,
                "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                "format":"date-time",
                "schema": {
                    "type": "string",
                    "nullable": false
                }
              }
          ],
          "responses":{
              "200":{
                "x-nullable": false,
                "description": "List of user activities retrieved successfully.",
                "schema":{
                    "$ref": "#/definitions/ApiGetUserPermissionActivityLogs"
                }
              },
              "204":{
                "description": "Log is empty"
              },
              "400": {
                "description": "Invalid log module"
              },
              "401":{
                "description":"Access denied"
              },
              "405": {
                "description": "Request type was not GET."
              }
          }
      }
  },
  "/v5.0/activity-logs?activitymodule=comment":{
    "get":{
        "tags":[
            "Activity Logs"
        ],
        "summary": "Comment Activity Logs",
        "description": "With this endpoint, the site administrator can retrieve the list of activities performed in the dashboard comment module.",
        "operationId": "ActivityLogs_GetCommentActivityLogs",
        "parameters":[
            {
                "type": "string",
                "name": "activity",
                "in": "query",
                "required": false,
                "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>Added, Edited, Deleted, Replied, UserMention</code>",
                "schema": {
                  "type": "string",
                  "nullable": false
               }
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": false,
              "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
              "format":"date-time",
              "schema": {
                  "type": "string",
                  "nullable": false
              }
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": false,
              "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
              "format":"date-time",
              "schema": {
                  "type": "string",
                  "nullable": false
              }
            }
        ],
        "responses":{
            "200":{
                "description": "List of comment activities retrieved successfully.",
                "schema":{
                    "$ref": "#/definitions/ApiGetCommentActivityLogs"
                 }
            },
            "204":{
              "description": "Log is empty"
            },
            "400": {
              "description": "Invalid log module"
            },
            "401":{
              "description":"Access denied"
            },
            "405": {
              "description": "Request type was not GET."
            }
        }
    }
  },
  "/v5.0/activity-logs?activitymodule=schedule":{
    "get":{
        "tags":[
            "Activity Logs"
        ],
        "summary": "Schedule Activity Logs",
        "description": "With this endpoint, the site administrator can retrieve the list of activities performed in the schedule module.",
        "operationId": "ActivityLogs_GetScheduleActivityLogs",
        "parameters":[
            {
                "type": "string",
                "name": "activity",
                "in": "query",
                "required": false,
                "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>Success, Failure</code>",
                "schema": {
                  "type": "string",
                  "nullable": false
                }
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": false,
              "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
              "format":"date-time",
              "schema": {
                  "type": "string",
                  "nullable": false
              }
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": false,
              "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
              "format":"date-time",
              "schema": {
                  "type": "string",
                  "nullable": false
              }
            }
        ],
        "responses":{
            "200":{
              "x-nullable": true,
              "description": "List of schedule activities retrieved successfully.",
              "schema":{
                   "$ref": "#/definitions/ApiGetScheduleActivityLogs"
              }
            },
            "204":{
              "description": "Log is empty"
            },
            "400": {
              "description": "Invalid log module"
            },
            "401":{
              "description":"Access denied"
            },
            "405": {
              "description": "Request type was not GET."
            }
        }
    }
  },
  "/v5.0/activity-logs?activitymodule=system":{
      "get":{
          "tags":[
              "Activity Logs"
          ],
          "summary": "System Activity Logs",
          "description": "With this endpoint, the site administrator can retrieve the list of activities performed in the system settings module.",
          "operationId": "ActivityLogs_GetSystemActivityLogs",
          "parameters":[
              {
                  "type": "string",
                  "name": "activity",
                  "in": "query",
                  "required": false,
                  "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>Add, Update, Delete, Visit, Enable, Disable</code>",
                  "schema": {
                    "type": "string",
                    "nullable": false
                }
              },
              {
                "type": "string",
                "name": "startDate",
                "in": "query",
                "required": false,
                "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                "format":"date-time",
                "schema": {
                    "type": "string",
                    "nullable": false
                }
              },
              {
                "type": "string",
                "name": "endDate",
                "in": "query",
                "required": false,
                "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                "format":"date-time",
                "schema": {
                    "type": "string",
                    "nullable": false
                }
              }
          ],
          "responses":{
              "200":{
                  "x-nullable": true,
                  "description": "List of system activities retrieved successfully.",
                  "schema":{
                      "$ref": "#/definitions/ApiGetSystemActivityLogs"
                  }
              },
              "204":{
                "description": "Log is empty"
              },
              "400": {
                "description": "Invalid log module"
              },
              "401":{
                "description":"Access denied"
              },
              "405": {
                "description": "Request type was not GET."
              }
          }
      }
  },
  "/v5.0/activity-logs?activitymodule=item":{
      "get":{
          "tags":[
              "Activity Logs"
          ],
          "summary": "Item Activity Logs",
          "description": "With this endpoint, the site administrator can retrieve the list of activities performed in the item module.",
          "operationId": "ActivityLogs_GetItemActivityLogs",
          "parameters":[
              {
                  "type": "string",
                  "name": "activity",
                  "in": "query",
                  "required": false,
                  "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>Added, Edited, Deleted, Moved, Copied, Cloned, Trashed, Restored, Rollbacked, Visited,Downloaded</code>",
                  "schema": {
                    "type": "string",
                    "nullable": false
                }
              },
              {
                  "type": "string",
                  "name": "itemType",
                  "in": "query",
                  "required": false,
                  "description": "Type of the Item. <br/>Values allowed are <code>Category, Dashboard, DataSource, Schedule</code>",
                  "schema": {
                    "type": "string",
                    "nullable": false
                }
              },
              {
                "type": "string",
                "name": "startDate",
                "in": "query",
                "required": false,
                "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                "format":"date-time",
                "schema": {
                    "type": "string",
                    "nullable": false
                }
              },
              {
                "type": "string",
                "name": "endDate",
                "in": "query",
                "required": false,
                "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                "format":"date-time",
                "schema": {
                    "type": "string",
                    "nullable": false
                }
              }
          ],
          "responses":{
              "200":{
                  "x-nullable": true,
                  "description": "List of item activities retrieved successfully.",
                  "schema":{
                      "$ref": "#/definitions/ApiGetitemActivityLogs"
                   }
              },
              "204":{
                "description": "Log is empty"
              },
              "400": {
                "description": "Invalid log module"
              },
              "401":{
                "description":"Access denied"
              },
              "405": {
                "description": "Request type was not GET."
              }
          }
      }
   },
   "/v5.0/settings/webhooks":{
    "get":{
      "tags":[
        "Webhooks"
      ],
      "summary": "Get Webhooks",
      "description": "By using this endpoint, the user can retrieve a list of webhooks.",
      "operationId": "Webhooks_GetWebhooks",
      "responses":{
        "200":{
          "x-nullable": true,
          "description": "Wehbooks details have been retrived successfully.",
           "schema": {
            "$ref": "#/definitions/WehbooksSettings"
          }
        },
        "401": {
          "description": "Access denied"
      },
      "204": {
          "description": "Wehbooks list is empty."
      },
      "405": {
          "description": "Request type was not GET."
      }
      }
    },
    "delete":{
      "tags":[
          "Webhooks"
      ],
      "summary":"Delete Webhook",
      "description":"Please delete the webhook.",
      "operationId":"Delete_Webhooks",
      "parameters":[
          {
              "name": "id",
              "in": "path",
              "description": "Id of the webhook",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema":{
                  "type": "string",
                  "format": "int32",
                  "nullable": false 
              }
          }
      ],
      "responses":{
          "400": {
          "description": "Invalid webhook ID."
          },
          "401":{
              "description":"Access denied"
          },
          "404": {
              "description": "Webhook details not found."
          },
          "405": {
              "description": "Request type was not DELETE."
          },
          "417": {
              "description": "Failed to delete webhook."
          }
      }
    }
   },
   "/v5.0/settings/user-activity-logs":{
    "get": {
      "tags": [
          "Audit Logs"
        ],
        "summary": "Get Audit Logs",
        "description": "This endpoint allows site administrators to retrieve a list of audit logs. Administrators can filter logs based on various parameters such as event category, event type, user email, tenant ID, app source, and date range. This helps in tracking user and administrative activities for security, compliance, and troubleshooting purposes.",
        "operationId": "ActivityLogs_GetAllActivityLogs",
        "parameters": [
          {
            "type": "string",
            "name": "eventCategory",
            "in": "query",
            "required": false,
            "description": "Specify the category of the event. Allowed values are <code>User, Permission, Settings</code>.",
            "schema": {
                "type": "string",
                "nullable": false
            }
        },
        {
            "type": "string",
            "name": "eventType",
            "in": "query",
            "required": false,
            "description": "Specify the type of the event. Allowed values are <code>Added, Updated, Deleted</code>.",
            "schema": {
                "type": "string",
                "nullable": false
            }
        },
        {
            "type": "string",
            "name": "initiatedUserEmail",
            "in": "query",
            "required": false,
            "description": "Specify the email address of the user who initiated the event.",
            "schema": {
                "type": "string",
                "nullable": false
            }
        },
        {
            "type": "string",
            "name": "targetUserEmail",
            "in": "query",
            "required": false,
            "description": "Specify the email address of the user who was targeted by the event.",
            "schema": {
                "type": "string",
                "nullable": false
            }
        },
        {
            "type": "string",
            "name": "tenantId",
            "in": "query",
            "required": false,
            "description": "Specify the Tenant ID.",
            "schema": {
                "type": "string",
                "nullable": false
            }
        },
        {
            "type": "string",
            "name": "appSource",
            "in": "query",
            "required": false,
            "description": "Specify the source application of the event. Allowed values are <code>BI, UMS</code>.",
            "schema": {
                "type": "string",
                "nullable": false
            }
        },
        {
            "type": "string",
            "name": "eventStartDate",
            "in": "query",
            "required": false,
            "description": "Specify the UTC start date to filter logs within a specific date range. The format should be ISO 8601: `yyyy-MM-ddTHH:mm:ssZ`.",
            "format": "date-time",
            "schema": {
                "type": "string",
                "nullable": false
            }
        },
        {
            "type": "string",
            "name": "eventEndDate",
            "in": "query",
            "required": false,
            "description": "Specify the UTC end date to filter logs within a specific date range. The format should be ISO 8601: `yyyy-MM-ddTHH:mm:ssZ`.",
            "format": "date-time",
            "schema": {
                "type": "string",
                "nullable": false
            }
        }
        ],
        "responses":{
            "200":{
                "x-nullable": true,
                "description": "The list of activity logs was retrieved successfully.",
                "schema":{
                    "$ref": "#/definitions/ApiGetAuditlogsPaginatedResponse"
                 }
            },
            "204":{
              "description": "Log is empty"
            },
            "400": {
              "description": "Invalid log module"
            },
            "401":{
              "description":"Access denied"
            },
            "405": {
              "description": "Request type was not GET."
            }
        }
    }
   }
  },
  "definitions": {
    "Response": {
      "type": "object",
      "x-typeName": "Response",
      "additionalProperties": false,
      "properties": {
        "access_token": {
          "type": "string",
          "description": "Authentication token of the user."
        },
        "token_type": {
          "type": "string",
          "description": "Type of token assigned by the authorization server."
        },
        "expires_in": {
          "type": "string",
          "description": "The lifetime in seconds of the access token."
        },
        "Email": {
          "type": "string",
          "description": "Email of the authenticated user."
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "required": [
        "ApiStatus",
        "Status"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "description": "Returns data from the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "ApiGroupAdd": {
      "type": "array",
      "description": "Group detail",
      "items": {
          "$ref": "#/definitions/Group"
      }
    },
    "Group": {
      "type": "object",
      "description": "Group detail",
      "additionalProperties": false,
      "required": [
        "Name"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name of the group."
        },
        "Description": {
          "type": "string",
          "description": "Description of the group."
        }
      }
    },
    "ApiGroupUsers": {
      "type": "object",
      "description": "User(s) added/removed from the group.",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "array",
          "description": "List of user IDs",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "ApiGroupEdit": {
      "type": "object",
      "description": "Group detail",
      "additionalProperties": false,
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name of the group."
        },
        "Description": {
          "type": "string",
          "description": "Description of the group."
        }
      }
    },
    "ApiGroup": {
      "type": "object",
      "description": "Group detail",
      "additionalProperties": false,
      "required": [
        "Id",
        "IsAzureADGroup"
      ],
      "properties": {
        "Id": {
          "type": "integer",
          "description": "ID of the group.",
          "format": "int32"
        },
        "Name": {
          "type": "string",
          "description": "Name of the group."
        },
        "Description": {
          "type": "string",
          "description": "Description of the group."
        },
        "IsAzureADGroup": {
          "type": "boolean",
          "description": "Returns true, if the group is added from Azure Active Directory"
        }
      }
    },
    "ApiAzureADGroup": {
      "type": "object",
      "description": "Group name",
      "additionalProperties": false,
      "required": [
        "GroupName"
      ],
      "properties": {
        "GroupName": {
          "type": "array",
          "description": "List of group names",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "IPWhitelistingResponse": {
      "required": [
        "IsEnabled",
        "IPWhitelistingRules"
      ],
      "type": "object",
      "properties": {
          "IsEnabled": {
              "type": "boolean",
              "description": "Specify true to enable the IP whitelisting settings."
          },
          "IPWhitelistingRules":{
              "type": "array",
              "description": "Specified IP whitelisting rules allows access to the application.",
              "items":
                {
                  "$ref": "#/definitions/IPWhitelistingRulesResponse"
                }
          }
      }
  },

  "IPWhitelistingRulesResponse":{
    "required": [
      "RuleName",
      "IPAddress",
      "IPAddressType"
      ],
      "type":"object",
      "properties":{
          "RuleName":{
              "type": "string",
              "description": "Specify rule name."
          },
          "IPAddress":{
              "type": "string",
              "description": "Specify IP address value."
          },
          "IPAddressType":{
              "type": "string",
              "description": "Specify IP address type."
          }
      }
  },
    "ApiAzureGroupImportResponse": {
      "type": "object",
      "description": "List of groups",
      "additionalProperties": false,
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "ImportStatus": {
          "type": "array",
          "description": "Returns Azure AD group import status.",
          "items": {
            "$ref": "#/definitions/ApiAzureGroupImportStatus"
          }
        }
      }
    },
    "ApiAzureGroupImportStatus": {
      "type": "object",
      "description": "Group Import Status",
      "additionalProperties": false,
      "properties": {
        "FailedUsers": {
          "type": "integer",
          "format": "int32",
          "description": "Failed users count ."
        },
        "GroupName": {
          "type": "string",
          "description": "Name of the Azure AD group."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Status message of the imported group."
        },
        "ImportedUsers": {
          "type": "integer",
          "format": "int32",
          "description": "Imported users count ."
        },
        "Status": {
          "type": "boolean",
          "description": "Status of the group import."
        }
      }
    },
    "DirectoryType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "All",
        "Local",
        "AzureAD",
        "ExternalDatabase"
      ],
      "enum": [
        "All",
        "Local",
        "AzureAD",
        "ExternalDatabase"
      ]
    },
    "UserStatus": {
      "type": "string",
      "enum": [
        "Active",
        "InActive"
      ],
      "x-enumNames": [
        "Active",
        "InActive"
      ]
    },
    "ApiUserAdd": {
      "type": "object",
      "description": "User detail",
      "additionalProperties": false,
      "required": [
        "Username",
        "Email",
        "FirstName"
      ],
      "properties": {
        "Username": {
          "type": "string",
          "description": "Username of the user. \n\n<B>If you are using a cloud analytics server, then the username field is not required to be used</B>."
        },
        "Email": {
          "type": "string",
          "description": "Email address of the user (Email required only in [Email required](/site-administration/account-settings/#email-required) mode)"
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user"
        },
        "Lastname": {
          "type": "string",
          "description": "Last name of the user"
        },
        "Password": {
          "type": "string",
          "description": "Password of the user (Password accepted only in [Automatic activation](/site-administration/account-settings/#automatic-activation) mode)"
        }
      }
    },
    "ApiUserEdit": {
      "type": "object",
      "description": "User detail",
      "additionalProperties": false,
      "properties": {
        "Username": {
          "type": "string",
          "description": "Username of the user"
        },
        "Email": {
          "type": "string",
          "description": "Email address of the user"
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user"
        },
        "Lastname": {
          "type": "string",
          "description": "Last name of the user"
        },
        "ContactNumber": {
          "type": "string",
          "description": "Phone number of the user"
        }
      }
    },
    "ApiUserDetailV4": {
      "type": "object",
      "description": "Detail of the User",
      "additionalProperties": false,
      "properties": {
        "ContactNumber": {
          "type": "string",
          "description": "Phone number of the user"
        },
        "DisplayName": {
          "type": "string",
          "description": "Display name of the user"
        },
        "Email": {
          "type": "string",
          "description": "Email address of the user"
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true, if the user is an active user"
        },
        "Lastname": {
          "type": "string",
          "description": "Last name of the user"
        },
        "UserStatus": {
          "description": "Returns the status of the user",
          "allOf": [
            {
              "$ref": "#/definitions/UserStatus"
            }
          ]
        },
        "UserId": {
          "type": "integer",
          "description": "ID of the user",
          "format": "int32"
        },
        "Username": {
          "type": "string",
          "description": "Username of the user"
        },
        "DirectoryType": {
          "$ref": "#/definitions/DirectoryType"
        },
        "ExternalProviderId": {
          "type": "string",
          "description": "User Id of the external providers OAuth2 and OpenIDConnect"
        },
        "Avatar": {
          "type": "string",
          "description": "Profile picture of the user",
          "format": "byte"
        }
      }
    },
    "ApiDownloadCsvTemplate": {
      "type": "object",
      "description": "Contains response of downloaded CSV template file.",
      "additionalProperties": false,
      "required": [
        "ApiStatus",
        "Status"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "FileContent": {
          "type": "string",
          "description": "Returns CSV file in array of bytes.",
          "format": "byte"
        }
      }
    },
    "ApiCsvUserImportRequest": {
      "type": "object",
      "description": "Contains CSV user import request.",
      "additionalProperties": false,
      "required": [
        "CsvFileContent"
      ],
      "properties": {
        "CsvFileContent": {
          "type": "string",
          "description": "Provides the CSV file in an array of bytes.",
          "format": "byte"
        }
      }
    },
    "ApiCsvUserImportResponse": {
      "required": [
          "ApiStatus",
          "Status"
      ],
      "type": "object",
      "properties": {
          "ApiStatus": {
              "type": "boolean",
              "description": "Returns the status of the API."
          },
          "Status": {
              "type": "boolean",
              "description": "Returns status of the API request."
          },
          "JobId": {
              "type": "integer",
              "description": "Returns job id of current CSV import job."
            },
            "JobStatus": {
              "type": "boolean",
              "description": "Returns job status current CSV import job"
            },
            "CreatedDate": {
              "type": "string",
              "description": "Date created of the job in string format.",
              "format": "datetime"
            },
            "ImportSource": {
              "type": "string",
              "description": "Returns import source of the user import."
            },
          "StatusMessage": {
              "type": "string",
              "description": "Returns the status message from the API."
          }
      }
  },
  "ApiBulkImportJobDetailsResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data":{
          "properties":{
            "JobId": {
              "type": "integer",
              "description": "Returns job id of current CSV import job."
            },
            "ImportSource": {
              "type": "string",
              "description": "Returns import source of the user import."
            },
            "Status": {
              "type": "boolean",
              "description": "Returns job status current CSV import job"
            },
            "CreatedDate": {
              "type": "string",
              "description": "Date created of the job in string format.",
              "format": "datetime"
            },
            "LastUpdatedDate": {
              "type": "string",
              "description": "Date created of the job in string format.",
              "format": "datetime"
            },
            "TotalUser": {
              "type": "integer",
              "description": "Returns total user count of current CSV import job."
            },
            "FailedImport": {
              "type": "integer",
              "description": "Returns failed import users count current CSV import job."
            },
            "ImportUser": {
              "type": "integer",
              "description": "Returns imported user count of current CSV import job."
            },
            "YetToImport": {
              "type": "integer",
              "description": "Returns yet to import user count of current CSV import job."
            }
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      },
      "description": "Contains response of Csv user import"
    },
    "ApiFailedImportUsersDetailResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data":{
          "type": "array",
                "items": {
                  "$ref": "#/definitions/ApiFailedUsers"
                }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      },
      "description": "Contains response of failed import users detail"
    },
    "ApiFailedUsers":{
      "type": "object",
      "properties": {
        "UserName": {
          "type": "string",
          "description": "Username of the user."
        },
        "DisplayName": {
          "type": "string",
          "description": "Display name of the user."
        },
        "Email": {
          "type": "string",
          "description": "Email address of the user."
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "LastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "Message":{
          "type":"array",
          "description": "List of error messages",
          "items": {
            "type": "string"
          }
        }
    }
  },
    "ApiUserPermissionAdd": {
      "type": "object",
      "description": "Permission details.",
      "additionalProperties": false,
      "required": [
        "PermissionAccess",
        "UserId",
        "PermissionEntity"
      ],
      "properties": {
        "PermissionEntity": {
          "type": "string",
          "description": "Specify an entity of item for permission.<br /><br />Allowed permission entities are:<br /><br />`\"AllCategories\"` `\"AllDashboards\"` `\"AllDataSources\"` `\"AllSchedules\"` `\"AllSlideshow\"` `\"DashboardsInCategory\"`<br /><br />`\"SpecificCategory\"` `\"SpecificDashboard\"` `\"SpecificDataSource\"` `\"SpecificSchedule\"` `\"SpecificSlideshow\"`<br /><br />`\"AllGroups\"` `\"AllPermissions\"` `\"AllSettings\"` `\"SpecificGroup\"` `\"SpecificPermissions\"` `\"SpecificSettings\"`<br /><br />`\"UsersandGroups\"`<br /><br />"
        },
        "PermissionAccess": {
          "type": "string",
          "description": "Specify an access type for item.<br /><br />Allowed permission access values for the permission entities: <br /><br />1. `\"AllCategories\"` `\"AllDataSources\"` `\"AllSchedules\"` `\"AllSlideshow\"` accepts `\"Create\"` `\"Read\"` `\"ReadWrite\"`<br /><br />`\"ReadWriteDelete\"` <br /><br />2. `\"AllDashboards\"` `\"DashboardsInCategory\"` accepts `\"Create\"` `\"Read\"` `\"ReadWrite\"` `\"ReadWriteDelete\"` `\"Download\"` <br /><br />3. `\"SpecificCategory\"` `\"SpecificDataSource\"` `\"SpecificSchedule\"` `\"SpecificSlideshow\"` accepts `\"Read\"` `\"ReadWrite\"`<br /><br />`\"ReadWriteDelete\"` <br /><br />4. `\"SpecificDashboard\"` accepts `\"Read\"` `\"ReadWrite\"` `\"ReadWriteDelete\"` `\"Download\"`<br /><br />5. `\"AllGroups\"` accepts `\"Create\"` <br /><br />6. `\"AllPermissions\"` `\"AllSettings\"` `\"SpecificGroup\"` `\"SpecificPermissions\"` `\"SpecificSettings\"` `\"UsersandGroups\"`<br /><br /> accepts `\"Manage\"`<br /><br />"
        },
        "UserId": {
          "type": "integer",
          "description": "Specify the User ID to whom the permission needs to be added.<br /><br />",
          "format": "int32"
        },
        "ItemId": {
          "type": "string",
          "description": "Specify the item ID of particular item like Category, Dashboard, Datasource,Schedule, Slideshow.<br /><br />Item Id is required for the following permission entities:<br /><br />`\"SpecificCategory\"`  `\"SpecificDashboard\"`  `\"SpecificDataSource\"`  `\"SpecificSchedule\"`  `\"SpecificSlideshow\"` <br /><br /> `\"DashboardsInCategory\"`<br /><br />",
          "format": "guid",
          "nullable": true
        },
        "ScopeId": {
          "type": "string",
          "description": "This defines the name or ID of a specific item for managing permissions. It allows administrators and authorized users to delegate permission management, as well as the management of settings and users/groups. This enables users to share access to resources, such as dashboards, with other users, and to manage groups and settings.<br /><br />Allowed Scope Id for permission entities: <br /><br />1. `\"SpecificPermissions\"` accepts `\"Category\"` `\"Dashboard\"` `\"Datasource\"` `\"Schedule\"` `\"Slideshow\"`<br /><br />2. `\"SpecificGroup\"` accepts Group Id<br /><br />3. `\"SpecificSettings\"` accepts `\"AuthenticationSettings\"` `\"CORSPolicySettings\"` `\"DashboardSettings\"` `\"EmbedSettings\"`<br /><br />`\"Integrations\"` `\"LookAndFeel\"` `\"NotificationSettings\"` `\"Security\"` `\"SiteSettings\"`  `\"UserDirectorySettings\"`<br /><br />`\"SiteCredentials\"` `\"Accounts\"` `\"Connectors\"` `\"DataStoreSettings\"` `\"Email\"` `\"Widgets\"`",
          "nullable": true
        }
      }
    },
    "ApiGroupPermissionAdd": {
      "required":[
          "GroupId",
          "Permission"
      ],
      "type": "object",
      "properties": {
        "GroupId": {
          "type": "integer",
          "description": "Specifies the Group ID to which the permission needs to be added.",
          "format": "int32"
        },
        "Permission": {
            "type" : "array",
            "description": "Specify the details of the group permissions.", 
            "items":{
                "$ref":"#/definitions/Permission"
              }
          }
      }
  },
  "Permission": {
        "type": "object",
        "properties":{
          "PermissionEntity": {
            "type": "string",
            "description": "Specify an entity of item for permission.<br /><br />Allowed permission entities are:<br /><br />`\"AllCategories\"` `\"AllDashboards\"` `\"AllDataSources\"` `\"AllSchedules\"` `\"AllSlideshow\"` <br /><br />`\"DashboardsInCategory\"` `\"SpecificCategory\"` `\"SpecificDashboard\"` `\"SpecificDataSource\"` <br /><br /> `\"SpecificSchedule\"` `\"SpecificSlideshow\"` `\"AllGroups\"` `\"AllPermissions\"` `\"AllSettings\"` <br /><br /> `\"SpecificGroup\"` `\"SpecificPermissions\"` `\"SpecificSettings\"` `\"UsersandGroups\"`<br /><br />"
          },
          "PermissionAccess": {
            "type": "string",
            "description": "Specify an access type for item.<br /><br />Allowed permission access values for the permission entities: <br /><br />1. `\"AllCategories\"` `\"AllDataSources\"` `\"AllSchedules\"` `\"AllSlideshow\"` accepts `\"Create\"` <br /><br />`\"Read\"` `\"ReadWrite\"` `\"ReadWriteDelete\"` <br /><br />2. `\"AllDashboards\"` `\"DashboardsInCategory\"` accepts `\"Create\"` `\"Read\"` `\"ReadWrite\"` <br /><br />`\"ReadWriteDelete\"` `\"Download\"` <br /><br />3. `\"SpecificCategory\"` `\"SpecificDataSource\"` `\"SpecificSchedule\"` `\"SpecificSlideshow\"` accepts <br /><br />`\"Read\"` `\"ReadWrite\"` `\"ReadWriteDelete\"` <br /><br />4. `\"SpecificDashboard\"` accepts `\"Read\"` `\"ReadWrite\"` `\"ReadWriteDelete\"` `\"Download\"`<br /><br />5. `\"AllGroups\"` accepts `\"Create\"` <br /><br />6. `\"AllPermissions\"` `\"AllSettings\"` `\"SpecificGroup\"` `\"SpecificPermissions\"` <br /><br />`\"SpecificSettings\"` `\"UsersandGroups\"` accepts `\"Manage\"`<br /><br />"
          },
          "ItemId": {
            "type": "string",
            "description": "Specify the item ID of particular item like Category, Dashboard, Datasource,Schedule, Slideshow.<br /><br />Item Id is required for the following permission entities:<br /><br />`\"SpecificCategory\"`  `\"SpecificDashboard\"`  `\"SpecificDataSource\"`  `\"SpecificSchedule\"`  <br /><br />`\"SpecificSlideshow\"` `\"DashboardsInCategory\"`<br /><br />",
            "format": "guid",
            "nullable": true
          },
          "ScopeId": {
            "type": "string",
            "description": "This defines the name or ID of a specific item for managing permissions. It allows administrators and authorized users to delegate permission management, as well as the management of settings and users/groups. This enables users to share access to resources, such as dashboards, with other users, and to manage groups and settings.<br /><br />Allowed Scope Id for permission entities: <br /><br />1. `\"SpecificPermissions\"` accepts `\"Category\"` `\"Dashboard\"` `\"Datasource\"` `\"Schedule\"` <br /><br />`\"Slideshow\"`<br /><br />2. `\"SpecificGroup\"` accepts Group Id<br /><br /><br />3. `\"SpecificSettings\"` accepts `\"AuthenticationSettings\"` `\"CORSPolicySettings\"` <br /><br />`\"DashboardSettings\"` `\"EmbedSettings\"` `\"Integrations\"` `\"LookAndFeel\"` `\"NotificationSettings\"` <br /><br /> `\"Security\"` `\"SiteSettings\"`  `\"UserDirectorySettings\"` `\"SiteCredentials\"` `\"Accounts\"`<br /><br /> `\"Connectors\"` `\"DataStoreSettings\"` `\"Email\"` `\"Widgets\"`",
            "nullable": true
          }
      }
  },
  "BulkGroupPermission":{
      "type": "object",
      "properties":{
          "AddedPermissions": {
              "type": "array",
              "description": "Specifies the added permission details.",
              "items":{
                  "$ref":"#/definitions/AddedPermission"
              }
          },
          "FailedPermissions":{
              "type": "array",
              "description": "Specifies the failed permission details.",
              "items":{
                  "$ref":"#/definitions/FailedPermission"
              }
          }
      }
  },
  "AddedPermission": {
      "type": "object",
      "properties": {
          "GroupId": {
              "type": "integer",
              "description": "Specifies the group ID."
          },
          "Permission": {
              "type": "array",
              "description": "Specifies the group permission details.",
              "items":{
                  "$ref":"#/definitions/BulkGroupAddPermission"
              }
          }
      }
  },
  "FailedPermission":{
      "type": "object",
      "properties":{
          "GroupId":{
              "type": "integer",
              "description": "Specifies the group ID."
          },
          "FailedGroupPermissions":
          {
              "type": "array",
              "description": "Specifies the group permission details.",
              "items": {
                  "$ref":"#/definitions/BulkGroupFailedPermission"
              }
          }
      }
  },
  "BulkGroupAddPermission":{
      "type":"object",
      "properties": {
        "PermissionAccess": {
          "type": "string",
          "description": "Specifies an access type for item.<br />The possible values are <code>Create, Read, ReadWrite, ReadWriteDelete, Manage</code>"
        },
        "PermissionEntity": {
        "type": "string",
        "description": "Specifies an entity of item for permission.<br />The possible values are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard, AllDataSources, SpecificDataSource, AllSlideshow, SpecificSlideshow, AllPermissions , SpecificPermissions, AllSettings, SpecificSettings, AllGroups, SpecificGroup, UserandGroups</code>"
        },
        "ItemId": {
          "type": "string",
          "description": "Specifies the item ID.",
          "format": "guid"
        },
        "ScopeId": {
          "type": "string",
          "description": "Specifies the Scope ID of the added permission type."
        }
      }
  },
  "BulkGroupFailedPermission":{
      "type":"object",
      "properties": {
        "PermissionAccess": {
          "type": "string",
          "description": "Specify an access type for item.<br />The possible values are <code>Create, Read, ReadWrite, ReadWriteDelete, Manage</code>"
        },
        "PermissionEntity": {
        "type": "string",
        "description": "Specifies an entity of item for permission.<br />The possible values are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard, AllDataSources, SpecificDataSource, AllSlideshow, SpecificSlideshow, AllPermissions , SpecificPermissions, AllSettings, SpecificSettings, AllGroups, SpecificGroup, UserandGroups</code>"
        },
        "ItemId": {
          "type": "string",
          "description": "Specifies the item ID.",
          "format": "guid"
        },
        "ScopeId": {
          "type": "string",
          "description": "Specifies the Scope ID of the added permission type."
        },
        "Message": {
          "type": "string",
          "description": "Specifies the Scope ID of the Permission."
        }
      }
   },

    "PaginatedApiResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "description": "Returns data from the API.",
          "items": {
            "$ref": "#/definitions/ApiItems"
          }
        },
        "TotalResults": {
          "type": "integer",
          "description": "Returns items count of the API request.",
          "format": "int32"
        },
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Links"
          },
          "description": "Returns pagination links."
        }
      }
    },
    "ApiItems": {
      "type": "object",
      "description": "Details of items.",
      "additionalProperties": false,
      "properties": {
        "CanRead": {
          "type": "boolean",
          "description": "Specifies the read permission of the item."
        },
        "CanWrite": {
          "type": "boolean",
          "description": "Specifies the write permission of the item."
        },
        "CanDelete": {
          "type": "boolean",
          "description": "Specifies the delete permission of the item."
        },
        "CanDownload": {
          "type": "boolean",
          "description": "Specifies the download permission of the item."
        },
        "CanSchedule": {
          "type": "boolean",
          "description": "Specifies the schedule permission of the item."
        },
        "CanOpen": {
          "type": "boolean",
          "description": "Specifies the open permission of the item."
        },
        "CanMove": {
          "type": "boolean",
          "description": "Specifies the move permission of the item."
        },
        "CanCopy": {
          "type": "boolean",
          "description": "Specifies the copy permission of the item."
        },
        "CanClone": {
          "type": "boolean",
          "description": "Specifies the clone permission of the item."
        },
        "CanCreateItem": {
          "type": "boolean",
          "description": "Specifies the create permission of the item."
        },
        "Id": {
          "type": "string",
          "description": "Item ID. Valid values: `\"CategoryId\"` `\"DashboardId\"` `\"DatasourceId\"` `\"ScheduleId\"`",
          "format": "guid"
        },
        "ItemType": {
          "type": "string",
          "description": "Item type. Valid values: `\"Category\"` `\"Dashboard\"` `\"Datasource\"` `\"Schedule\"`"
        },
        "Name": {
          "type": "string",
          "description": "Item name. Valid values: `\"Category name\"` `\"Dashboard name\"` `\"Datasource name\"` `\"Schedule name\"`"
        },
        "Description": {
          "type": "string",
          "description": "Item description."
        },
        "ItemLocation": {
          "type": "string",
          "description": "Item location."
        },
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator.",
          "format": "int32"
        },
        "CreatedByDisplayName": {
          "type": "string",
          "description": "Specifies the display name of the user who created the item."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format": "int32"
        },
        "ModifiedByFullName": {
          "type": "string",
          "description": "Specifies the full name of the user who modified the item."
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name."
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in string format."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in string format."
        },
        "ItemModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        },
        "ItemCreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "IsMultiDashboard": {
          "type": "boolean",
          "description": "Returns true, if the dashboard is multi-dashboard."
        },
        "IsFavorite": {
          "type": "boolean",
          "description": "Returns true, if it is a favorite item."
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Returns true, if the item is public."
        },
        "TabDetail": {
          "type": "array",
          "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
          "items": {
            "$ref": "#/definitions/ApiTabDetail"
          }
        }
      }
    },
    "ApiTabDetail": {
      "type": "object",
      "description": "Multitab dashboard item detail.",
      "properties": {
        "DashboardId": {
          "type": "string",
          "description": "Specifies the dashboard ID of the tab.",
          "format": "guid"
        },
        "DashboardName": {
          "type": "string",
          "description": "Specifies the name of the dashboard."
        },
        "TabName": {
          "type": "string",
          "description": "Specifies the name of the tab."
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of the item in string format.",
          "format": "datetime"
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of the item in string format.",
          "format": "datetime"
        }
      }
    },
    "ApiSpecifiedItemDetail": {
      "type": "object",
      "description": "Item Details.",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string",
          "description": "Item ID. Valid values: `\"CategoryId\"` `\"DashboardId\"` `\"DatasourceId\"` `\"ScheduleId\"`",
          "format": "guid"
        },
        "ItemType": {
          "type": "string",
          "description": "Item type. Valid values: `\"Category\"` `\"Dashboard\"` `\"Datasource\"` `\"Schedule\"`"
        },
        "Name": {
          "type": "string",
          "description": "Item name. Valid values: `\"Category name\"` `\"Dashboard name\"` `\"Datasource name\"` `\"Schedule name\"`"
        },
        "Description": {
          "type": "string",
          "description": "Item description."
        },
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator.",
          "format": "int32"
        },
        "CloneOf": {
          "type": "string",
          "description": "Item ID from where the item was cloned.",
          "format": "guid"
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name."
        },
        "ItemCreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "ItemModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in string format."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in string format."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format": "int32"
        },
        "Extension": {
          "type": "string",
          "description": "Item extension."
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Returns true, if the item is public."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true, if the item is active."
        }
      }
    },
    "ApiCopyDashboardRequestV4": {
      "type": "object",
      "description": "Dashboard details.",
      "required": [
        "Name",
        "CategoryId",
        "IsPublic",
        "IsCopyDatasource"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Dashboard name."
        },
        "Description": {
          "type": "string",
          "description": "Dashboard description."
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Specify <i>true</i> to set the item as a public to access dashboard anonymously, otherwise specify <i>false</i>."
        },
        "IsCopyDatasource": {
          "type": "boolean",
          "description": "Specify <i>true</i> to copy the data sources along with dashboard, otherwise specify <i>false<i>."
        }
      }
    },
    "ApiCopyItemResponse": {
      "type": "object",
      "description": "Response details of the copied item.",
      "required": [
        "ApiStatus",
        "Status",
        "PublishedItemId",
        "Version"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "PublishedItemId": {
          "type": "string",
          "description": "Returns the published item id",
          "format": "guid"
        },
        "Version": {
          "type": "integer",
          "description": "Returns the version number of the item",
          "format": "int32"
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      }
    },
    "ItemType": {
      "type": "string",
      "description": "Item type"
    },
    "ApiPublicItems": {
      "type": "object",
      "description": "Details of public items.",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string",
          "description": "Item ID. Valid values: `\"DashboardId\"`",
          "format": "guid"
        },
        "ItemType": {
          "type": "string",
          "description": "Item type. Valid values: `\"Dashboard\"`"
        },
        "Name": {
          "type": "string",
          "description": "Item name. Valid values: `\"Dashboard name\"`"
        },
        "Description": {
          "type": "string",
          "description": "Item description."
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name."
        },
        "CategoryDescription": {
          "type": "string",
          "description": "Category description."
        },
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator.",
          "format": "int32"
        },
        "CreatedByDisplayName": {
          "type": "string",
          "description": "Specifies the display name of the user who created the item."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format": "int32"
        },
        "ModifiedByFullName": {
          "type": "string",
          "description": "Specifies the full name of the user who modified the item."
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in string format."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in string format."
        },
        "ItemCreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "ItemModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        },
        "IsMultiTabbedDashboard": {
          "type": "boolean",
          "description": "Returns true, if the dashboard is a multi-tabbed dashboard."
        },
        "TabDetail": {
          "type": "array",
          "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
          "items": {
            "$ref": "#/definitions/ApiTabDetail"
          }
        },
        "IsFavorite": {
          "type": "boolean",
          "description": "Returns true, if it is a favorite item."
        }
      }
    },
    "ApiUpdateDashboardPublicV5": {
      "required":[
          "Public"
      ],
      "type" : "object",
      "properties": {
          "Public": {
              "type" : "boolean",
              "description" : "Specify true to update the dashboard as public."
          },
          "IsUnlisted": {
              "type": "boolean",
              "description" : "Specify true to update the dashboard as unlisted."
          }
      },
      "description" : "Details of the public or private dashboards item."
    },
    "ApiUpdateDashboardName": {
      "required":[
          "DashboardName"
      ],
      "type" : "object",
      "properties": {
          "DashboardName": {
              "type" : "string",
              "description" : "New dashboard name."
          }
      },
      "description" : "Details of the dashboard name."
    },
    "ApiFavoriteitems": {
      "type": "object",
      "description": "Details of favorite items.",
      "additionalProperties": false,
      "properties": {
        "DashboardId": {
          "type": "string",
          "description": "Dashboard ID.",
          "format": "guid"
        },
        "Name": {
          "type": "string",
          "description": "Dashboard name."
        },
        "Description": {
          "type": "string",
          "description": "Dashboard description."
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name."
        },
        "CategoryDescription": {
          "type": "string",
          "description": "Category description."
        },
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator.",
          "format": "int32"
        },
        "CreatedByDisplayName": {
          "type": "string",
          "description": "Specifies the display name of the user who created the item."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format": "int32"
        },
        "ModifiedByFullName": {
          "type": "string",
          "description": "Specifies the full name of the user who modified the item."
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in string format."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in string format."
        },
        "ItemCreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "ItemModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        },
        "IsMultiTabbedDashboard": {
          "type": "boolean",
          "description": "Returns true, if the dashboard is a multi-tabbed dashboard."
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Returns true, if the dashboard is public to access anonymously, otherwise returns false."
        }
      }
    },
    "ApiUpdateFavorite": {
      "type": "object",
      "description": "Details about the favorite item.",
      "additionalProperties": false,
      "required": [
        "DashboardId",
        "Favorite"
      ],
      "properties": {
        "DashboardId": {
          "type": "string",
          "description": "Dashboard ID.",
          "format": "guid"
        },
        "Favorite": {
          "type": "boolean",
          "description": "Specify true to set the item as a favorite item."
        }
      }
    },
    "ApiExportDashboard": {
      "type": "object",
      "description": "Details about the dashboard to be exported.",
      "additionalProperties": false,
      "required": [
        "DashboardId",
        "ExportType"
      ],
      "properties": {
        "DashboardId": {
          "type": "string",
          "description": "Dashboard ID.",
          "format": "guid"
        },
        "ServerPath": {
          "type": "string",
          "description": "Specifies the relative URL of the dashboard."
        },
        "ExportType": {
          "type": "string",
          "description": "Export type. Valid values: `\"Excel\"` `\"Pdf\"` `\"Image\"`"
        },
        "FilterParameter": {
          "type": "string",
          "description": "Specify the filter parameter. \n\n**Note:**  To know more about supported operators and funtions in filter parameter, refer to [this](/working-with-dashboards/preview-dashboard/urlparameters/#supported-operators/).",
          "example": "Department= Cardiology & Year(Date)=2021"
        }
      }
    },
    "DataHubPipeline": {
      "required": [
        "PipelineName",
        "ConnectionProperties"
      ],
      "type": "object",
      "properties": {
        "PipelineName": {
          "type": "string",
          "description": "Specifies name of the Data Hub pipeline being created or updated."
        },
        "IsDirectTargetImportEnabled": {
          "type": "boolean",
          "description": "Specifies whether data should be directly imported into the target database."
        },
        "IsUnionAllTablesEnabled": {
          "type": "boolean",
          "description": "If true, all tables from different sources will be merged."
        },
        "ShouldAddDbNameColumn": {
          "type": "boolean",
          "description": "If true, adds a database name column to the imported data."
        },
        "ConnectionProperties": {
          "type": "array",
          "description": "Specifies the list of data source connection properties. You need to send the connection object for each data source based on its type. Please refer its relative documentation for the connection details as follows",
          "items": {
              "type": "object"
          }
        }
      }
    },
    "ApiExportDataSource": {
      "type": "object",
      "description": "Details about the data source to be exported.",
      "additionalProperties": false,
      "required": [
        "DataSourceId",
        "FileType",
        "Columns",
        "DashboardParameter"
      ],
      "properties": {
        "DataSourceId": {
          "type": "string",
          "description": "Data source ID.",
          "format": "guid"
        },
        "FileType": {
          "type": "string",
          "description": "Export type. Valid values: `\"Excel\"` `\"Json\"` `\"CSV\"`"
        },
        "Rows": {
          "type": "integer",
          "description": "Specify the number of rows to be exported. Default value is <i>1000</i>",
          "format": "int32"
        },
        "Columns": {
          "type": "array",
          "description": "List of column names.",
          "items": {
            "type": "string"
          }
        },
        "DashboardParameter": {
          "type": "string",
          "description": "Specify the dashboard parameter.\n\n**Note:** To know more about dashboard parameter, refer to [this](/working-with-data-sources/dashboard-parameter/)."
        }
      }
    },
    "UpdateDataHubPipelineResponse": {
      "required": [
        "ApiStatus",
        "Status",
        "StatusMessage"
      ],
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      },
      "description": "Response details of the updated Data Hub pipeline."
    },
    "AddDataHubPipelineResponse": {
      "required": [
        "ApiStatus",
        "Status",
        "StatusMessage"
      ],
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      },
      "description": "Response details of the created Data Hub pipeline."
    },
    "ApiExportDataSourceResponse": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "FileContent": {
          "type": "string",
          "description": "Returns the exported data source in an array of bytes.",
          "format": "byte"
        }
      }
    },
    "ApiExportDashboardResponse": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "FileContent": {
          "type": "string",
          "description": "Returns the exported dashboard in an array of bytes.",
          "format": "byte"
        }
      }
    },
    "DraftItemDetail": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "description": "Item ID of the dashboard.",
          "format": "guid"
        },
        "Name": {
          "type": "string",
          "description": "Name of the dashboard."
        }
      },
      "description": "Dashboard item detail."
    },
    "ApiItemsV4": {
      "type": "object",
      "description": "Draft Dashboard item details.",
      "properties": {
        "Id": {
          "type": "string",
          "description": "Item ID of the dashboard.",
          "format": "guid"
        },
        "Name": {
          "type": "string",
          "description": "Name of the dashboard."
        },
        "Description": {
          "type": "string",
          "description": "Description of the dashboard."
        },
        "ItemType": {
          "type": "string",
          "description": "Type of the Item."
        },
        "ItemLocation": {
          "type": "string",
          "description": "Item location."
        },
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator.",
          "format": "int32"
        },
        "CreatedByDisplayName": {
          "type": "string",
          "description": "Specifies the display name of the user who created the item."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format": "int32"
        },
        "ModifiedByFullName": {
          "type": "string",
          "description": "Specifies the full name of the user who modified the item."
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name."
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of the item in string format.",
          "format": "datetime"
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of the item in string format.",
          "format": "datetime"
        },
        "ItemModifiedDate": {
          "type": "string",
          "description": "Date modified of the item in date format.",
          "format": "datetime"
        },
        "ItemCreatedDate": {
          "type": "string",
          "description": "Date created of the item in date format.",
          "format": "datetime"
        },
        "IsMultiDashboard": {
          "type": "boolean",
          "description": "Returns true, if the dashboard is multi-dashboard."
        },
        "IsFavorite": {
          "type": "boolean",
          "description": "Returns true, if it is a favorite item."
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Returns true, if the item is public."
        },
        "IsDraft": {
          "type": "boolean",
          "description": "Returns true, if the item is draft."
        },
        "CanRead": {
          "type": "boolean",
          "description": "Specifies the read permission of the item."
        },
        "CanWrite": {
          "type": "boolean",
          "description": "Specifies the write permission of the item."
        },
        "CanDelete": {
          "type": "boolean",
          "description": "Specifies the delete permission of the item."
        },
        "CanDownload": {
          "type": "boolean",
          "description": "Specifies the download permission of the item."
        },
        "CanSchedule": {
          "type": "boolean",
          "description": "Specifies the schedule permission of the item."
        },
        "CanOpen": {
          "type": "boolean",
          "description": "Specifies the open permission of the item."
        },
        "CanMove": {
          "type": "boolean",
          "description": "Specifies the move permission of the item."
        },
        "CanCopy": {
          "type": "boolean",
          "description": "Specifies the copy permission of the item."
        },
        "CanClone": {
          "type": "boolean",
          "description": "Specifies the clone permission of the item."
        },
        "CanCreateItem": {
          "type": "boolean",
          "description": "Specifies the create permission of the item."
        },
        "WidgetInfo": {
          "type": "string",
          "description": "Returns WidgetInfo for the specified dashboard."
        },
        "TabDetail": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiTabDetail"
          },
          "description": "Specifies the details of the tab in a multi-tabbed dashboard."
        }
      }
    },
    "UpdateDraftItemDetail": {
      "type": "object",
      "description": "Dashboard item detail.",
      "additionalProperties": false,
      "properties": {
        "ItemName": {
          "type": "string",
          "description": "Name of the dashboard."
        },
        "Description": {
          "type": "string",
          "description": "Description of the dashboard."
        }
      }
    },
    "ApiItemViewsAdd": {
      "type": "object",
      "description": "Add dashboard view request details.",
      "required": [
        "ViewName",
        "ItemId",
        "QueryString",
        "IsPublic"
      ],
      "properties": {
        "ViewName": {
          "type": "string",
          "description": "Specify name of the view."
        },
        "ItemId": {
          "type": "string",
          "description": "Specify ID of the dashboard.",
          "format": "guid"
        },
        "ChildItemId": {
          "type": "string",
          "description": "Specify the ID of the child dashboard if the provided ItemId is the ID of a multi-tab dashboard.",
          "format": "guid"
        },
        "QueryString": {
          "type": "string",
          "description": "Specify the filter query.",
          "example": "Year(OrderDate)=1996"
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Specify <i>true</i> to set the view as public"
        }
      }
    },
    "ApiItemViewsUpdate": {
      "type": "object",
      "description": "Update dashboard view request details.",
      "required": [
        "ViewId",
        "DashboardId"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Specify name of the view."
        },
        "ViewId": {
          "type": "string",
          "description": "Specify ID of the dashboard view.",
          "format": "guid"
        },
        "DashboardId": {
          "type": "string",
          "description": "Specify ID of the dashboard.",
          "format": "guid"
        },
        "QueryString": {
          "type": "string",
          "description": "Specify the filter query.",
          "example": "Year(OrderDate)=1996"
        }
      }
    },
    "ApiItemViewResponse": {
      "type": "object",
      "description": "Dashboard view response details.",
      "required": [
        "CanDelete",
        "CanEdit",
        "CanShare",
        "IsPublic",
        "ItemId",
        "UserId",
        "ViewId"
      ],
      "properties": {
        "CanDelete": {
          "type": "boolean",
          "description": "Specifies the delete permission of the view."
        },
        "CanEdit": {
          "type": "boolean",
          "description": "Specifies the write permission of the view."
        },
        "CanShare": {
          "type": "boolean",
          "description": "Specifies the share permission of the view."
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Returns true, if the view is public."
        },
        "ItemId": {
          "type": "string",
          "description": "Specifies the ID of the dashboard.",
          "format": "guid"
        },
        "QueryString": {
          "type": "string",
          "description": "Specifies the filter query string."
        },
        "UserId": {
          "type": "integer",
          "description": "Specifies the ID of the user.",
          "format": "int32"
        },
        "ViewId": {
          "type": "string",
          "description": "Specifies the ID of the view.",
          "format": "guid"
        },
        "ViewName": {
          "type": "string",
          "description": "Specifies the name of the view."
        }
      }
    },
    "ApiDownloadDashboard": {
      "type": "object",
      "description": "Details about the dashboard to download.",
      "required": [
        "DashboardId"
      ],
      "properties": {
        "DashboardId": {
          "type": "array",
          "description": "List of dashboard IDs",
          "items": {
            "type": "string",
            "format": "guid"
          }
        },
        "CanIncludeSensitiveInformation": {
          "type": "boolean",
          "description": "Include sensitive information for data sources based on this value. Default value is <i>true</i>"
        }
      }
    },
    "ApiDownloadFailedResponse": {
      "required": [
        "DashboardId",
        "ProgressJson"
      ],
      "type": "object",
      "properties": {
        "DashboardId": {
          "type": "string",
          "description": "Dashboard ID.",
          "format": "guid"
        },
        "ProgressJson": {
          "type": "array",
          "description": "Download Progress Details.",
          "items": {
            "$ref": "#/definitions/DownloadUploadProgressJson"
          }
        }
      },
      "description": "Download dashboard failed response."
    },
    "ApiDownloadDashboardResponse": {
      "type": "object",
      "required": [
        "ApiStatus",
        "Data",
        "Status"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "properties": {
            "JobStatus": {
              "type": "string",
              "description": "Status of the download job."
            },
            "ItemContent": {
              "type": "string",
              "description": "File content of the dashboard(s).",
              "format": "base64"
            },
            "ItemExtension": {
              "type": "string",
              "description": "Extension of the dashboard file.<br />Values allowed are <code>.zip, .bbix.</code>.",
              "format": "base64"
            },
            "FailedDownload": {
              "type": "array",
              "description": "Details of failed download stages.",
              "items": {
                "$ref": "#/definitions/ApiDownloadFailedResponse"
              }
            }
          },
          "description": "Download job process response."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        }
      }
    },
    "DownloadUploadProgressJson": {
      "type": "object",
      "description": "Download/Upload Progress Details.",
      "properties": {
        "Stage": {
          "type": "integer",
          "description": "Download/Upload process stage.",
          "format": "int32"
        },
        "Label": {
          "type": "string",
          "description": "Label of the stage."
        },
        "Status": {
          "type": "string",
          "description": "Download stage status."
        },
        "ErrorMessage": {
          "type": "string",
          "description": "Error message of the failed stage."
        }
      }
    },
    "ApiGetMetaInfo": {
      "required": [
        "FileContent",
        "FileExtension"
      ],
      "type": "object",
      "properties": {
        "FileContent": {
          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
          "type": "string",
          "description": "Dashboard files in an array of bytes.",
          "format": "byte"
        },
        "FileExtension": {
          "type": "string",
          "description": "Extension of the dashboard file.<br />Values allowed are <code>.zip, .bbix.</code>."
        }
      },
      "description": "Details about the dashboard file content."
    },
    "ApiGetMetaInfoResponse": {
      "type": "object",
      "required": [
        "ApiStatus",
        "Data",
        "Status"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "type": "array",
          "description": "Returns data from the API.",
          "items": {
            "$ref": "#/definitions/ApiMetaInfo"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      }
    },
    "ApiMetaInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Dashboard name."
        },
        "Description": {
          "type": "string",
          "description": "Dashboard description."
        },
        "Id": {
          "type": "string",
          "description": "Dashboard ID.",
          "format": "guid"
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "ShouldValidateSchema": {
          "type": "boolean",
          "description": "Specify <i>false</i> to avoid the schema validation. Default value is <i>true</i>."
        },
        "ReplaceDashboardId": {
          "type": "string",
          "description": "Dashboard ID.",
          "format": "guid"
        },
        "Datasources": {
          "type": "array",
          "description": "Data sources",
          "items": {
            "$ref": "#/definitions/ApiDataSources"
          }
        }
      }
    },
    "ApiUploadDashboard": {
      "type": "object",
      "description": "Details about the dashboard for upload.",
      "required": [
        "ItemContent",
        "ItemExtension"
      ],
      "properties": {
        "ItemContent": {
          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
          "type": "string",
          "description": "Dashboard files in an array of bytes.",
          "format": "byte"
        },
        "ItemExtension": {
          "type": "string",
          "description": "Extension of the dashboard file.<br />Values allowed are <code>.zip, .bbix.</code>."
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "ItemMetaInfo": {
          "type": "array",
          "description": "Meta information of the item content.",
          "items": {
            "$ref": "#/definitions/ApiMetaInfo"
          }
        }
      }
    },
    "ApiUploadStatusResponse": {
      "type": "object",
      "required": [
        "ApiStatus",
        "Data",
        "Status"
      ],
      "description": "Upload dashboard job status details.",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "type": "array",
          "description": "Returns data from the API.",
          "items": {
            "$ref": "#/definitions/ApiUploadJobResponse"
          }
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        }
      }
    },
    "ApiUploadJobResponse": {
      "type": "object",
      "description": "Upload dashboard job response details.",
      "properties": {
        "DashboardId": {
          "type": "string",
          "description": "Dashboard ID.",
          "format": "guid"
        },
        "UploadStatus": {
          "type": "string",
          "description": "Upload job status."
        },
        "Details": {
          "type": "array",
          "description": "Details of upload job.",
          "items": {
            "$ref": "#/definitions/DownloadUploadProgressJson"
          }
        }
      }
    },
    "ApiMoveDashboard": {
      "type": "object",
      "description": "Dashboard details.",
      "required": [
        "Name",
        "CategroyId"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Dashboard name."
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        }
      }
    },
    "ApiMoveDashboardResponse": {
      "type": "object",
      "description": " Response details of the move item.",
      "required": [
        "ApiStatus",
        "Status",
        "DashboardId",
        "StatusMessage"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns the status of the API request."
        },
        "DashboardId": {
          "type": "string",
          "description": "Returns the moved dashboard id",
          "format": "guid"
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      }
    },
    "ApiCategoryAdd": {
      "type": "object",
      "description": "Category details.",
      "additionalProperties": false,
      "required": [
        "Name"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Category name."
        },
        "Description": {
          "type": "string",
          "description": "Category description."
        },
        "ParentId": {
          "type": "string",
          "description": "Parent category's Id.",
          "format": "guid"
        }
      }
    },
    "ApiCategoryUpdate": {
      "type": "object",
      "description": "Category details.",
      "additionalProperties": false,
      "required": [
        "CategoryId"
      ],
      "properties": {
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "Name": {
          "type": "string",
          "description": "Category name."
        },
        "Description": {
          "type": "string",
          "description": "Category description."
        }
      }
    },
    "ApiDataSourceAttribute": {
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Data source name."
        },
        "Type": {
          "type": "string",
          "description": "Data source type allowed values are <code>Web Live</code>, <code>MongoDB</code>, <code>amazonathena</code>, <code>amazonauroramysql</code>, <code>amazonaurorapostgresql</code>, <code>amazonrdsmysql</code>, <code>amazonrdsmariadb</code>, <code>amazonrdsamazonauroramysql</code>, <code>amazonrdsamazonaurorapostgresql</code>, <code>amazonrdspostgresql</code>, <code>amazonrdssqlserver</code>, <code>amazonrdsoracle</code>, <code>awsopensearch</code>, <code>redshift</code>, <code>azuresynapseanalytics</code>, <code>cdata</code>, <code>clickhouse</code>, <code>elasticsearch</code>, <code>googlecloudmysql</code>, <code>googlecloudpostgresql</code>, <code>influxdb</code>, <code>mariadb</code>, <code>ssas</code>, <code>mysql</code>, <code>oracle</code>, <code>postgresql</code>, <code>presto</code>, <code>singlestore</code>, <code>sqlserver</code>, <code>snowflake</code>, <code>sparksql</code>, <code>odbc</code>."
        },
        "Description": {
          "type": "string",
          "description": "Description of data source."
        },
        "Connection": {
          "type": "object",
          "description": "You need to send the connection object for each data source based on its type. Please refer its relative documentation for the connection details as follows [Web Live](/working-with-data-sources/data-connectors/live-web/#connecting-bold-bi-to-web-live-data-source-via-rest-api), [MongoDB](/working-with-data-sources/data-connectors/mongodb/#connecting-bold-bi-to-mongodb-data-source-via-rest-api), [amazonathena](/working-with-data-sources/data-connectors/amazon-athena/#connecting-bold-bi-to-amazon-athena-data-source-via-rest-api), [amazonauroramysql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmariadb](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonauroramysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonrdspostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdssqlserver](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsoracle](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [awsopensearch](/working-with-data-sources/data-connectors/aws-opensearch/#connecting-bold-bi-to-aws-open-search-data-source-via-rest-api), [redshift](/working-with-data-sources/data-connectors/amazon-redshift/#connecting-bold-bi-to-amazon-redshift-data-source-via-rest-api), [azuresynapseanalytics](/working-with-data-sources/data-connectors/azure-synapse-analytics/#connecting-bold-bi-to-azure-synapse-analytics-data-source-via-rest-api), [cdata](/working-with-data-sources/data-connectors/cdata/#connecting-bold-bi-to-cdata-data-source-via-rest-api), [clickhouse](/working-with-data-sources/data-connectors/clickhouse/#connecting-bold-bi-to-clickhouse-data-source-via-rest-api), [elasticsearch](/working-with-data-sources/data-connectors/elastic-search/#connecting-bold-bi-to-elastic-search-data-source-via-rest-api), [googlecloudmysql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [googlecloudpostgresql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [influxdb](/working-with-data-sources/data-connectors/influxdb/#connecting-bold-bi-to-influxdb-data-source-via-rest-api), [mariadb](/working-with-data-sources/data-connectors/mariadb/#connecting-bold-bi-to-mariadb-data-source-via-rest-api), [ssas](/working-with-data-sources/data-connectors/ssas/#connecting-bold-bi-to-microsoft-sql-server-analysis-servicesssas-via-rest-api), [mysql](/working-with-data-sources/data-connectors/mysql/#connecting-bold-bi-to-mysql-data-source-via-rest-api), [oracle](/working-with-data-sources/data-connectors/oracle/#connecting-bold-bi-to-oracle-data-source-via-rest-api), [postgresql](/working-with-data-sources/data-connectors/postgresql/#connecting-bold-bi-to-postgresql-data-source-via-rest-api), [presto](/working-with-data-sources/data-connectors/presto/#connecting-bold-bi-to-presto-data-source-via-rest-api), [singlestore](/working-with-data-sources/data-connectors/single-store/#connecting-bold-bi-to-singlestore-data-source-via-rest-api), [sqlserver](/working-with-data-sources/data-connectors/ms-sql-server/#connecting-bold-bi-to-microsoft-sql-server-data-source-via-rest-api), [snowflake](/working-with-data-sources/data-connectors/snowflake/#connecting-bold-bi-to-snowflake-data-source-via-rest-api), [sparksql](/working-with-data-sources/data-connectors/sparksql/#connecting-bold-bi-to-sparksql-data-source-via-rest-api), [odbc](/working-with-data-sources/data-connectors/odbc/#connecting-bold-bi-to-odbc-data-source-via-rest-api)."
        },
        "RefreshSettings": {
          "properties": {
            "StartTime": {
              "type": "string",
              "description": "Start time of the schedule.<br> The format should be ISO 8601 <br> i.e. yyyy-MM-ddTHH:mm:ssZ. E.g. 2022-02-15T06:55:00Z."
            },
            "NeverEnd": {
              "type": "boolean",
              "description": "When set to true, it creates a schedule that never ends.<br><div style=margin-left:15px;>**Note**: The NeverEnd is true by default. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise, it remains empty.</strong>"
            },
            "EndAfterOccurrence": {
              "type": "integer",
              "description": "The number of occurrences after which the schedule will be completed.<br>? For Example: If you provide empty 5, the schedule will end after the completion of 5 occurrences."
            },
            "EndTime": {
              "type": "string",
              "description": "End time after which the schedule should stop. The format should be ISO 8601 i.e. yyyy-MM-ddTHH:mm:ssZ.<br>? For Example: If you provide empty an end date-time, the schedule will end when the end date-time is reached.<br>? E.g. 2022-02-15T06:55:00Z."
            },
            "ScheduleType": {
              "type": "string",
              "description": "Schedule frequency.<br>? Values allowed Weekly only."
            },
            "WeeklySchedule": {
              "properties": {
                "RecurrenceWeeks": {
                  "type": "integer",
                  "description": "Enter the Recurrence week By default 1."
                },
                "RecurrenceDays": {
                  "type": "array",
                  "description": "Enter the day from the list.<br>(Values allowed are <code>Monday, Tuesday, Wednesday, Thursday, Friday</code>).<br> For Example: Monday.",
                  "items": {
                    "type": "string"
                  }
                },
                "IsEnabled": {
                  "type": "boolean",
                  "description": "By default it is true."
                },
                "FailureNotificationToOwner": {
                  "type": "boolean",
                  "description": "By default it is true."
                }
              }
            }
          },
          "description": "Refer to the JSON syntax below to configure Refresh settings.\n\n **Note**: Refresh settings is only applicable for the web extract type data source. It will not work for live connection mode data sources."
        }
      },
      "description": "Data Source details."
    },
    "WebAPItemResponse": {
      "required": [
        "ApiStatus",
        "Data",
        "Status",
        "StatusMessage"
      ],
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "Data": {
          "properties": {
            "ScheduleId": {
              "type": "string",
              "description": "Returns the Schedule ID."
            },
            "PublishedId": {
              "type": "string",
              "description": "Returns the Published ID."
            }
          },
          "description": "Return the details of ScheduleId and PublishedID."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      },
      "description": "Response details of the datasource item."
    },
    "ApiUpdateDataSourceAttribute": {
      "required": [
        "Name",
        "DataSourceId"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Data source name."
        },
        "Type": {
          "type": "string",
          "description": "Data source type allowed values are <code>amazonathena</code>, <code>amazonauroramysql</code>, <code>amazonaurorapostgresql</code>, <code>amazonrdsmysql</code>, <code>amazonrdsmariadb</code>, <code>amazonrdsamazonauroramysql</code>, <code>amazonrdsamazonaurorapostgresql</code>, <code>amazonrdspostgresql</code>, <code>amazonrdssqlserver</code>, <code>amazonrdsoracle</code>, <code>awsopensearch</code>, <code>redshift</code>, <code>azuresynapseanalytics</code>, <code>cdata</code>, <code>clickhouse</code>, <code>elasticsearch</code>, <code>googlecloudmysql</code>, <code>googlecloudpostgresql</code>, <code>influxdb</code>, <code>mariadb</code>, <code>ssas</code>, <code>mysql</code>, <code>oracle</code>, <code>postgresql</code>, <code>presto</code>, <code>singlestore</code>, <code>sqlserver</code>, <code>snowflake</code>, <code>sparksql</code>, <code>odbc</code>."
        },
        "DataSourceId": {
          "type": "string",
          "description": "Data source ID."
        },
        "Description": {
          "type": "string",
          "description": "Description of data source."
        },
        "Connection": {
          "type": "object",
          "description": "You need to send the connection object for each data source based on its type. Please refer its relative documentation for the connection details as follows [amazonathena](/working-with-data-sources/data-connectors/amazon-athena/#connecting-bold-bi-to-amazon-athena-data-source-via-rest-api), [amazonauroramysql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmariadb](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonauroramysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonrdspostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdssqlserver](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsoracle](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [awsopensearch](/working-with-data-sources/data-connectors/aws-opensearch/#connecting-bold-bi-to-aws-open-search-data-source-via-rest-api), [redshift](/working-with-data-sources/data-connectors/amazon-redshift/#connecting-bold-bi-to-amazon-redshift-data-source-via-rest-api), [azuresynapseanalytics](/working-with-data-sources/data-connectors/azure-synapse-analytics/#connecting-bold-bi-to-azure-synapse-analytics-data-source-via-rest-api), [cdata](/working-with-data-sources/data-connectors/cdata/#connecting-bold-bi-to-cdata-data-source-via-rest-api), [clickhouse](/working-with-data-sources/data-connectors/clickhouse/#connecting-bold-bi-to-clickhouse-data-source-via-rest-api), [elasticsearch](/working-with-data-sources/data-connectors/elastic-search/#connecting-bold-bi-to-elastic-search-data-source-via-rest-api), [googlecloudmysql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [googlecloudpostgresql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [influxdb](/working-with-data-sources/data-connectors/influxdb/#connecting-bold-bi-to-influxdb-data-source-via-rest-api), [mariadb](/working-with-data-sources/data-connectors/mariadb/#connecting-bold-bi-to-mariadb-data-source-via-rest-api), [ssas](/working-with-data-sources/data-connectors/ssas/#connecting-bold-bi-to-microsoft-sql-server-analysis-servicesssas-via-rest-api), [mysql](/working-with-data-sources/data-connectors/mysql/#connecting-bold-bi-to-mysql-data-source-via-rest-api), [oracle](/working-with-data-sources/data-connectors/oracle/#connecting-bold-bi-to-oracle-data-source-via-rest-api), [postgresql](/working-with-data-sources/data-connectors/postgresql/#connecting-bold-bi-to-postgresql-data-source-via-rest-api), [presto](/working-with-data-sources/data-connectors/presto/#connecting-bold-bi-to-presto-data-source-via-rest-api), [singlestore](/working-with-data-sources/data-connectors/single-store/#connecting-bold-bi-to-singlestore-data-source-via-rest-api), [sqlserver](/working-with-data-sources/data-connectors/ms-sql-server/#connecting-bold-bi-to-microsoft-sql-server-data-source-via-rest-api), [snowflake](/working-with-data-sources/data-connectors/snowflake/#connecting-bold-bi-to-snowflake-data-source-via-rest-api), [sparksql](/working-with-data-sources/data-connectors/sparksql/#connecting-bold-bi-to-sparksql-data-source-via-rest-api), [odbc](/working-with-data-sources/data-connectors/odbc/#connecting-bold-bi-to-odbc-data-source-via-rest-api)."
        }
      },
      "description": "Data Source details."
    },
    "ApiCopyDataSourceRequestV4": {
      "type": "object",
      "description": "Data Source details.",
      "required": [
        "Name"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Data source name."
        },
        "Description": {
          "type": "string",
          "description": "Data source description."
        }
      }
    },
    "ApiSlideshowAdd": {
      "type": "object",
      "description": "Slideshow details.",
      "additionalProperties": false,
      "required": [
        "Name",
        "Duration",
        "Slides"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Slideshow name."
        },
        "Duration": {
          "type": "integer",
          "description": "Time interval between slides.",
          "format": "int32",
          "minimum": 5,
          "maximum": 300
        },
        "Slides": {
          "type": "array",
          "description": "Slides list.",
          "items": {
            "$ref": "#/definitions/Slide"
          }
        }
      }
    },
    "Slide": {
      "type": "object",
      "description": "Slide details.",
      "additionalProperties": false,
      "properties": {
        "OrderNumber": {
          "type": "integer",
          "description": "Slide order.",
          "format": "int32"
        },
        "ItemType": {
          "type": "string",
          "description": "Item type. Valid values: `\"Category\"` `\"Dashboard\"` `\"Widget\"`"
        },
        "ItemInfo": {
          "description": "Slide item details.",
          "allOf": [
            {
              "$ref": "#/definitions/SlideInfo"
            }
          ]
        }
      }
    },
    "SlideInfo": {
      "type": "object",
      "description": "Slide item details.",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string",
          "description": "Item ID.",
          "format": "guid"
        },
        "Name": {
          "type": "string",
          "description": "Item Name."
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category Name."
        },
        "TabId": {
          "type": "string",
          "description": "Tab ID.",
          "format": "guid"
        },
        "TabName": {
          "type": "string",
          "description": "Tab Name."
        },
        "ViewId": {
          "type": "string",
          "description": "View ID.",
          "format": "guid"
        },
        "ViewName": {
          "type": "string",
          "description": "View Name."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true, if the user is an active user"
        }
      }
    },
    "PaginatedSlideshowApiResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "description": "Returns data from the API.",
          "items": {
            "$ref": "#/definitions/SlideshowResponse"
          }
        },
        "TotalResults": {
          "type": "integer",
          "description": "Returns items count of the API request.",
          "format": "int32"
        },
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Links"
          },
          "description": "Returns pagination links."
        }
      }
    },
    "SlideshowResponse": {
      "type": "object",
      "description": "Slide details.",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string",
          "description": "Slideshow ID.",
          "format": "guid"
        },
        "Name": {
          "type": "string",
          "description": "Slideshow Name."
        },
        "Duration": {
          "type": "integer",
          "description": "Time interval between slides.",
          "format": "int32"
        },
        "CreatedBy": {
          "description": "Created user detail.",
          "allOf": [
            {
              "$ref": "#/definitions/ItemUser"
            }
          ]
        },
        "ModifiedBy": {
          "description": "Modified user detail.",
          "allOf": [
            {
              "$ref": "#/definitions/ItemUser"
            }
          ]
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in string format."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in string format."
        },
        "Slides": {
          "type": "array",
          "description": "Slides list.",
          "items": {
            "$ref": "#/definitions/Slide"
          }
        },
        "Permissions": {
          "description": "Permission detail.",
          "allOf": [
            {
              "$ref": "#/definitions/Permissions"
            }
          ]
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true, if the user is an active user"
        }
      }
    },
    "ItemUser": {
      "type": "object",
      "description": "Slideshow details.",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "integer",
          "description": "User ID.",
          "format": "int32"
        },
        "Name": {
          "type": "string",
          "description": "User name."
        }
      }
    },
    "Permissions": {
      "type": "object",
      "description": "Permission details.",
      "additionalProperties": false,
      "properties": {
        "CanRead": {
          "type": "boolean",
          "description": "Returns true, if the user has read permission for the slideshow."
        },
        "CanWrite": {
          "type": "boolean",
          "description": "Returns true, if the user has write permission for the slideshow."
        },
        "CanDelete": {
          "type": "boolean",
          "description": "Returns true, if the user has delete permission for the slideshow."
        }
      }
    },
    "ApiSlideshowEdit": {
      "type": "object",
      "description": "Slideshow details.",
      "additionalProperties": false,
      "properties": {
        "Name": {
          "type": "string",
          "description": "Slideshow name."
        },
        "Duration": {
          "type": "integer",
          "description": "Time interval between slides.",
          "format": "int32"
        },
        "Slides": {
          "type": "array",
          "description": "Slides list.",
          "items": {
            "$ref": "#/definitions/Slide"
          }
        }
      }
    },
    "ApiScheduleRequest": {
      "type": "object",
      "description": "Details about the schedule that was passed will be added.",
      "additionalProperties": false,
      "required": [
        "Name",
        "ItemId",
        "ExportType",
        "StartTime",
        "NeverEnd",
        "ScheduleType",
        "UserList",
        "GroupList",
        "ExternalRecipientsList"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Schedule name."
        },
        "ItemId": {
          "type": "string",
          "description": "Item ID.",
          "format": "guid"
        },
        "DashboardViewId":{
          "type":"string",
          "description": "Specifies the View ID to schedule that specific dashboard view.",
          "format": "guid"
        },
        "DashboardWidgetId":
        {
          "type":"string",
          "description": "Specifies the Widget ID to schedule that specific dashboard widget.",
          "format": "guid"
        },
        "Parameter":
        {
          "type":"string",
          "description": "Specifies the parameter."
        },
        "ExportType": {
          "type": "string",
          "description": "Specifies the export type to schedule the dashboard. Valid values: `Excel` `Image` `Pdf`."
        },
        "StartTime": {
          "type": "string",
          "description": "Specifies the UTC start date-time of schedule. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
        },
        "NeverEnd": {
          "type": "boolean",
          "description": "When set to true, it creates a schedule with no end.\n\n **Note**: By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
        },
        "EndAfterOccurrence": {
          "type": "integer",
          "description": "Specifies the number of occurrences after which the schedule will be completed. \n\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
          "format": "int32"
        },
        "EndDate": {
          "type": "string",
          "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed.<br /><br />The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.\n\n For example: If you provide an end date-time, the schedule will end when the end date-time is reached."
        },
        "UserList": {
          "type": "array",
          "description": "Provides a list of email addresses or user IDs to the recipients who will get the schedules.",
          "items": {
            "type": "string"
          }
        },
        "GroupList": {
          "type": "array",
          "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ExternalRecipientsList": {
          "type": "array",
          "description": "Provides a list of email addresses to the email recipients who will get the schedules. ",
          "items": {
            "type": "string"
          }
        },
        "ScheduleType": {
          "type": "string",
          "description": "Specifies the schedule type to schedule the dashboard. Valid values: `Hourly` `Daily` `Weekly` `Monthly` `Yearly`. \n\n **Note**: If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
        },
        "IsEnabled": {
          "type": "boolean",
          "description": "Returns true, if the schedule is enabled."
        },
        "FailureNotificationToOwner": {
          "type": "boolean",
          "description": "Returns true, if the failure notification to an owner is enabled."
        },
        "FailureNotificationToRecipient": {
          "type": "boolean",
          "description": "Returns true, if the failure notification to the recipient is enabled."
        },
        "FailureOccurrence": {
          "type": "integer",
          "description": "Failure occurrence count.",
          "format": "int32"
        },
        "ExportFormatInfo": {
          "description": "Schedule export format information.",
          "$ref": "#/definitions/ScheduleExportFormat"
        },
        "ScheduleExportLocation": {
          "description": "Schedule export location information.",
          "$ref": "#/definitions/ScheduleExportLocation"
        },
        "Email": {
          "description": "Schedule mail information.",
          "$ref": "#/definitions/ApiScheduleEmail"
        },
        "HourlySchedule": {
          "description": "Runs the schedules on an hourly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiHourlySchedule"
            }
          ]
        },
        "DailySchedule": {
          "description": "Runs the schedules on a daily basis. ",
          "allOf": [
            {
              "$ref": "#/definitions/ApiDailySchedule"
            }
          ]
        },
        "WeeklySchedule": {
          "description": "Runs the schedule on a weekly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiWeeklySchedule"
            }
          ]
        },
        "MonthlySchedule": {
          "description": "Runs the schedule on a monthly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlySchedule"
            }
          ]
        },
        "YearlySchedule": {
          "description": "Runs the schedules on a yearly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlySchedule"
            }
          ]
        },
        "EnableDataAlert": {
          "type": "boolean",
          "description": "Returns true, if schedule data alert is enabled."
        },
        "DashboardId": {
          "type": "string",
          "description": "ID of the dashboard (Required if data alert is enabled).",
          "format": "guid"
        },
        "DataSourceName": {
          "type": "string",
          "description": "Name of the data source (Required if data alert is enabled)."
        },
        "WidgetName": {
          "type": "string",
          "description": "Name of the widget (Required if data alert is enabled)."
        },
        "ConditionCategory": {
          "type": "string",
          "description": "Specifies the type of data alert trigger to export the dashboard.<br />Values allowed are <code>Value Changes, Increases, Continuously Increases, Decreases, Continuously Decreases</code> (Required if data alert is enabled)"
        },
        "ConditionalResult": {
          "type": "object",
          "description": "Specifies the result of the filter condition (Required if data alert is enabled).",
          "required": [
            "ConditionalInformations"
          ],
          "properties": {
            "ConditionalInformations": {
              "type": "object",
              "description": "Specifies the details of the filter condition.",
              "allOf": [
	              {
	                "$ref": "#/definitions/ConditionalInfoColleciton"
	              }
              ]
            }
          }
        }
      }
    },
    "ConditionalInfoColleciton": {
      "required": [
        "ConditionJoinType",
        "RelationalOperators",
        "FilterName",
        "LeftOperand"
      ],
      "properties": {
        "ConditionJoinType": {
          "type": "string",
          "description": "Specifies the type of join for the column filter. Determines how multiple filter conditions should be combined.<br />Values allowed are <code>AND, OR, AND NOT, OR NOT</code>"
        },
        "RelationalOperators": {
          "type": "string",
          "description": "Specifies the type of relational operator to use for filtering values in a column.<br />Values allowed are <code>GREATERTHAN, GREATERTHANOREQUALS, LESSTHAN, LESSTHANOREQUALS, EQUALS, NOTEQUALS</code>"
        },
        "IsCustomValue": {
          "type": "boolean",
          "description": "Returns true, if custom filter is enabled."
        },
        "CustomValue": {
          "type": "string",
          "format": "int32",
          "description": "Specifies the custom value.\n\n**Note:** If IsCustomValue is set to true, a custom value must be provided."
        },
        "FilterId": {
          "type": "string",
          "description": "Specifies the filter Id.",
          "format": "guid"
        },
        "FilterName": {
          "type": "string",
          "description": "Specifies the filter name.\n\n**Note:** The syntax for the filter name is in the format Filter(count); for example, Filter1. You can increase the prefix count to add more filters."
        },
        "LeftOperand": {
          "type": "object",
          "description": "Specifies the details of the column to be used for the left-hand side of a filter condition.",
          "properties": {
            "ColumnName": {
              "type": "string",
              "description": "Specifies the column name."
            }
          }
        },
        "RightOperand": {
          "type": "object",
          "description": "Specifies the details of the column to be used for the right-hand side of a filter condition.\n\n**Note:** If IsCustomValue is set to false, then RightOperand is required.",
          "properties": {
            "ColumnName": {
              "type": "string",
              "description": "Specifies the column name."
            }
          }
        },
        "Filters": {
          "type": "array",
          "description": "Specifies a filter to be applied to a specific column.",
          "items": {
            "$ref": "#/definitions/GlobalFilters"
          }
        }
      }
    },
    "GlobalFilters": {
      "required": [
          "JoinType",
          "Field",
          "Condition"
      ],
      "properties": {
        "JoinType": {
          "type": "string",
          "description": "Specifies the type of join for the column filter. Determines how multiple filter conditions should be combined.<br />Values allowed are <code>AND, OR</code>"
        },
        "Field": {
          "type": "object",
          "description": "Specifies the structure and details of the columns used for filtering data.",
          "required": [
            "ColumnName"
          ],
          "properties": {
            "ColumnName": {
              "type": "string",
              "description": "Specifies the column name."
            }
          }
        },
        "Condition": {
          "type": "object",
          "description": "Specifies the details of the where condition used to filter data.",
          "required": [
            "ConditionType",
            "Conditions",
            "Values"
          ],
          "properties": {
            "ConditionType": {
              "type": "string",
              "description": "Specifies the type of condition being specified.<br />Values allowed are <code>ACTUAL, CUSTOM</code>"
            },
            "Conditions": {
              "type": "string",
              "description": "Specifies the condition to be applied on the column.<br />Values allowed are <code>CONTAINS, START WITH, ENDS WITH, NOT CONTAINS, INCLUDES, EXCLUDES</code>"
            },
            "Values": {
              "type": "array",
              "description": "Specifies the column values.",
              "items": {
                  "type": "string",
                  "format": "string"
              }
            }
          }
        }
      }
    },
    "ScheduleExportFormat": {
      "type": "object",
      "properties": {
        "Size": {
          "type": "string",
          "description": "PDF page size.<br />Values allowed are <code>A3, A4, A5, Letter</code>",
          "default": "A4"
        },
        "Orientation": {
          "type": "string",
          "description": "PDF page orientation.<br />Values allowed are <code>Landscape, Portrait</code>",
          "default": "Landscape"
        },
        "Extension": {
          "type": "string",
          "description": "Excel or Image extension.<br />Values allowed for Excel file are <code>xlsx, xls</code><br /><br />Values allowed for Image file are <code>jpg, png</code>",
          "default": "xlsx for Excel and jpg for image"
        },
        "Resolution": {
          "type": "integer",
          "description": "Image file resolution.",
          "format": "int32",
          "default": 100
        }
      },
      "description": "Schedule export format information."
    },
    "ScheduleExportLocation": {
      "type": "object",
      "properties": {
        "FtpURL": {
          "type": "string",
          "description": "Use the FTP URL to save the exported file."
        },
        "FtpUsername": {
          "type": "string",
          "description": "FTP username."
        },
        "FtpPassword": {
          "type": "string",
          "description": "FTP password."
        }
      },
      "description": "Schedule export location information."
    },
    "ScheduleExportLocationResponse": {
      "type": "object",
      "properties": {
        "FtpURL": {
          "type": "string",
          "description": "Use the FTP URL to save the exported file."
        },
        "FtpUsername": {
          "type": "string",
          "description": "FTP username."
        }
      },
      "description": "Schedule export location information."
    },
    "ApiScheduleEmail": {
      "type": "object",
      "properties": {
        "Subject": {
          "type": "string",
          "description": "Specifies Schedule Email subject."
        },
        "Body": {
          "type": "string",
          "description": "Specifies Schedule Email body."
        }
      },
      "description": "Schedule mail information."
    },
    "ApiHourlySchedule": {
      "type": "object",
      "description": "Runs the schedules on an hourly basis.",
      "additionalProperties": false,
      "required": [
        "ScheduleInterval"
      ],
      "properties": {
        "ScheduleInterval": {
          "type": "string",
          "description": "Specifies the hour interval. Based on this interval, the schedule will run continuously until the end time.<br /><br />The format should be `HH:mm`."
        }
      }
    },
    "ApiDailySchedule": {
      "type": "object",
      "description": "Runs the schedules on a daily basis. \n            ",
      "additionalProperties": false,
      "required": [
        "RecurrenceType",
        "EveryNdays",
        "EveryWeekday"
      ],
      "properties": {
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.<br /><br />Valid values: `EveryNdays` `EveryWeekday`. \n\n **Note**: If you choose the recurrence type as EveryNdays, provide a value to the `EveryNdays` property, and leave the (EveryWeekday) property empty."
        },
        "EveryNdays": {
          "type": "integer",
          "description": "Specifies the day interval the schedule recurs. \n\n For example: If you provide 2, the schedule recurs every 2 days.",
          "format": "int32"
        },
        "EveryWeekday": {
          "type": "boolean",
          "description": "For the schedule to recur every working day, set to true."
        }
      }
    },
    "ApiWeeklySchedule": {
      "type": "object",
      "description": "Runs the schedule on a weekly basis.",
      "additionalProperties": false,
      "required": [
        "RecurrenceWeeks",
        "RecurrenceDays"
      ],
      "properties": {
        "RecurrenceWeeks": {
          "type": "integer",
          "description": "Specifies the week interval the schedule recurs. \n\n For example: If you provide 2, the schedule will recur every 2 weeks.  ",
          "format": "int32"
        },
        "RecurrenceDays": {
          "type": "array",
          "description": "Specifies the list of days the schedule recurs.<br /><br />Valid values `Sunday` `Monday` `Tuesday` `Wednesday` `Thursday` `Friday` `Saturday`. \n\n For example: If you provide `Sunday`, the schedule will recur sunday's of every 2 weeks.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApiMonthlySchedule": {
      "type": "object",
      "description": "Runs the schedule on a monthly basis.",
      "additionalProperties": false,
      "required": [
        "RecurrenceType"
      ],
      "properties": {
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs on a day basis or on the customized day basis.<br /><br />Valid values: `DayRecurrence` `CustomRecurrence` \n\n **Note**: If you choose the recurrence type as DayRecurrence, provide a value to the `DayRecurrence` property and leave the (CustomRecurrence) property empty."
        },
        "DayRecurrence": {
          "description": "The schedule recurs on the day specified on the month interval.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlyScheduleDayRecurrence"
            }
          ]
        },
        "CustomRecurrence": {
          "description": "The schedule recurs on the customized day of the specified month interval.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlyScheduleCustomRecurrence"
            }
          ]
        }
      }
    },
    "ApiMonthlyScheduleDayRecurrence": {
      "type": "object",
      "description": "The schedule recurs on the day specified on the month interval.",
      "additionalProperties": false,
      "required": [
        "DayInterval",
        "MonthInterval"
      ],
      "properties": {
        "DayInterval": {
          "type": "integer",
          "description": "Specifies the number of day interval the schedule recurs. \n\n For example: If you provide 10, the schedule will recur every 10th day. ",
          "format": "int32"
        },
        "MonthInterval": {
          "type": "integer",
          "description": "Specifies the number of month interval the schedule recurs. \n\n For example: If you provide 3, the schedule will recur 10th day of every 3 months.",
          "format": "int32"
        }
      }
    },
    "ApiMonthlyScheduleCustomRecurrence": {
      "type": "object",
      "description": "The schedule recurs on the customized day of the specified month interval.",
      "additionalProperties": false,
      "required": [
        "WeekOfMonth",
        "DayOfWeek",
        "MonthInterval"
      ],
      "properties": {
        "WeekOfMonth": {
          "type": "string",
          "description": "Specifies the week of the month the schedule recurs.<br /><br />Valid values: `first` `second` `third` `fourth` `last`. \n\n For example: If you provide second, the schedule will recur on the second week."
        },
        "DayOfWeek": {
          "type": "string",
          "description": "Specifies the day of the week the schedule recurs.<br /><br />Valid values: `day` `weekday` `weekendday` `Sunday` `Monday` <br /><br />`Tuesday` `Wednesday` `Thursday` `Friday` `Saturday`. \n\n For example: If you provide Sunday, the schedule will recur on the second week of sunday."
        },
        "MonthInterval": {
          "type": "integer",
          "description": "Specifies the number of month interval the schedule recurs. \n\n For example: If you provide 5, the schedule will recur second week of sunday's of every 5 months.",
          "format": "int32"
        }
      }
    },
    "ApiYearlySchedule": {
      "type": "object",
      "description": "Runs the schedules on a yearly basis.",
      "additionalProperties": false,
      "required": [
        "YearInterval",
        "RecurrenceType"
      ],
      "properties": {
        "YearInterval": {
          "type": "integer",
          "description": "Specifies the number of years the schedule recurs. \n\n For example: If you provide 5, the schedule will recur every 5 years.",
          "format": "int32"
        },
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs on a month basis or on the customized month basis.<br /><br />Valid values: `MonthRecurrence` `CustomRecurrence`. \n\n **Note**: If you choose the recurrence type as `MonthRecurrence`, provide a value to the MonthRecurrence property, and leave the (CustomRecurrence) property empty."
        },
        "MonthRecurrence": {
          "description": "The schedule recurs on the month and number of years specified in `YearInterval` property.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlyScheduleMonthRecurrence"
            }
          ]
        },
        "CustomRecurrence": {
          "description": "The schedule recurs in the customized month based on the number of years provided in the `YearInterval` property.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlyScheduleCustomRecurrence"
            }
          ]
        }
      }
    },
    "ApiYearlyScheduleMonthRecurrence": {
      "type": "object",
      "description": "The schedule recurs on the month and number of years specified in `YearInterval` property.",
      "additionalProperties": false,
      "required": [
        "MonthOfYear",
        "DayOfMonth"
      ],
      "properties": {
        "MonthOfYear": {
          "type": "string",
          "description": "Specifies the month the schedule recurs.<br /><br />Valid values: `January` `February` `March` `April` `May` `June` <br /><br />`July` `August` `September` `October` `November` `December`. \n\n For example: If you provide April, the schedule will recur in April of every year. Here, the (year) is the value provided in the `YearInterval` property."
        },
        "DayOfMonth": {
          "type": "integer",
          "description": "Specifies the day of the month the schedule recurs. \n\n For example: If you provide 20, the schedule will recur 20th April of every year.  Here, the (year) is the value provided in the `YearInterval` property.",
          "format": "int32"
        }
      }
    },
    "ApiYearlyScheduleCustomRecurrence": {
      "type": "object",
      "description": "The schedule recurs in the customized month based on the number of years provided in the `YearInterval` property.",
      "additionalProperties": false,
      "required": [
        "WeekOfMonth",
        "DayOfWeek",
        "MonthOfYear"
      ],
      "properties": {
        "WeekOfMonth": {
          "type": "string",
          "description": "Specifies the week of the month the schedule recurs.<br /><br />Valid values: `first` `second` `third` `fourth` `last`. \n\n For example: If you provide second, the schedule will recur on the second week."
        },
        "DayOfWeek": {
          "type": "string",
          "description": "Specifies the day of week the schedule recurs.<br /><br />Valid values: `day` `weekday` `weekendday` `Sunday` `Monday` <br /><br />`Tuesday` `Wednesday` `Thursday` `Friday` `Saturday`.\n\n For example: If you provide Sunday, the schedule will recur on every sunday's of the second week."
        },
        "MonthOfYear": {
          "type": "string",
          "description": "Specifies the month the schedule recurs.<br /><br />Valid values: `January` `February` `March` `April` `May` `June` <br /><br />`July` `August` `September` `October` `November` `December`. \n\n For example: If you provide March, the schedule will recur on the sunday's of the second week of March every year. Here, the (year) is the value provided in the `YearInterval` property."
        }
      }
    },
    "ApiScheduleResponse": {
      "type": "object",
      "description": "Response details of created schedules.",
      "additionalProperties": false,
      "properties": {
        "ScheduleName": {
          "type": "string",
          "description": "Returns the schedule name."
        },
        "ScheduleId": {
          "type": "string",
          "description": "Returns the schedule ID.",
          "format": "guid"
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "ScheduleType": {
          "type": "string",
          "description": "Returns the schedule type."
        },
        "NextRun": {
          "type": "string",
          "description": "Returns the schedule’s next run."
        }
      }
    },
    "ApiUpdateScheduleRequest": {
      "type": "object",
      "description": "Details about the schedule that was passed will be updated.",
      "additionalProperties": false,
      "required": [
        "ItemId",
        "Name",
        "ExportType",
        "ScheduleType",
        "StartTime",
        "NeverEnd"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Schedule name."
        },
        "ItemId": {
          "type": "string",
          "description": "Item ID.",
          "format": "guid"
        },
        "DashboardViewId":{
          "type":"string",
          "description": "Specifies the View ID to schedule that specific dashboard view.",
          "format": "guid"
        },
        "DashboardWidgetId":
        {
          "type":"string",
          "description": "Specifies the Widget ID to schedule that specific dashboard widget.",
          "format": "guid"
        },
        "Parameter": {
          "type": "string",
          "description": "Specifies the parameter."
        },
        "ExportType": {
          "type": "string",
          "description": "Specifies the export type to schedule the report. Valid values: `Excel` `Image` `Pdf`."
        },
        "Description": {
          "type": "string",
          "description": "File description"
        },
        "StartTime": {
          "type": "string",
          "description": "Specifies the UTC start date-time of schedule. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
        },
        "NeverEnd": {
          "type": "boolean",
          "description": "When set to true, it creates a schedule with no end.\n\n **Note**: By default, the NeverEnd is set to true. To set the end time for schedule, fill in the EndAfterOccurrence or EndDate properties; otherwise they remains empty."
        },
        "EndAfterOccurrence": {
          "type": "integer",
          "description": "Specifies the number of occurrences after which the schedule will be completed. \n\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
          "format": "int32"
        },
        "EndDate": {
          "type": "string",
          "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed.<br /><br />The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.\n\n For example: If you provide an end date-time, the schedule will end when the end date-time is reached."
        },
        "ScheduleType": {
          "type": "string",
          "description": "Specifies the schedule type to schedule the dashboard. Valid values: `Hourly` `Daily` `Weekly` `Monthly` `Yearly`. \n\n **Note**: If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) property empty."
        },
        "IsEnabled": {
          "type": "boolean",
          "description": "Returns true, if the schedule is enabled."
        },
        "FailureNotificationToOwner": {
          "type": "boolean",
          "description": "Returns true, if the failure notification to an owner is enabled."
        },
        "FailureNotificationToRecipient": {
          "type": "boolean",
          "description": "Returns true, if the failure notification to the recipient is enabled."
        },
        "FailureOccurrence": {
          "type": "integer",
          "description": "Failure occurrence count.",
          "format": "int32"
        },
        "UserList": {
          "type": "array",
          "description": "Provides a list of email addresses or user IDs to the recipients who will get the schedules.",
          "items": {
            "type": "string"
          }
        },
        "GroupList": {
          "type": "array",
          "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ExternalRecipientsList": {
          "type": "array",
          "description": "Provides a list of email addresses to the email recipients who will get the schedules. ",
          "items": {
            "type": "string"
          }
        },
        "RemoveUserList": {
          "type": "array",
          "description": "Provides a list of email addresses or user IDs to remove recipients from the schedule subscriptions.",
          "items": {
            "type": "string"
          }
        },
        "RemoveGroupList": {
          "type": "array",
          "description": "Provides a list of group IDs to remove groups from the schedule subscriptions.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "RemoveExternalRecipientsList": {
          "type": "array",
          "description": "Provides a list of email addresses for removing email recipients from the schedule subscriptions.",
          "items": {
            "type": "string"
          }
        },
        "ExportFormatInfo": {
          "description": "Schedule export format information.",
          "$ref": "#/definitions/ScheduleExportFormat"
        },
        "ScheduleExportLocation": {
          "description": "Schedule export location information.",
          "$ref": "#/definitions/ScheduleExportLocation"
        },
        "Email": {
          "description": "Schedule mail information.",
          "$ref": "#/definitions/ApiScheduleEmail"
        },
        "HourlySchedule": {
          "description": "Runs the schedules on an hourly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiHourlySchedule"
            }
          ]
        },
        "DailySchedule": {
          "description": "Runs the schedules on a daily basis. ",
          "allOf": [
            {
              "$ref": "#/definitions/ApiDailySchedule"
            }
          ]
        },
        "WeeklySchedule": {
          "description": "Runs the schedule on a weekly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiWeeklySchedule"
            }
          ]
        },
        "MonthlySchedule": {
          "description": "Runs the schedule on a monthly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlySchedule"
            }
          ]
        },
        "YearlySchedule": {
          "description": "Runs the schedules on a yearly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlySchedule"
            }
          ]
        },
        "EnableDataAlert": {
          "type": "boolean",
          "description": "Returns true, if schedule data alert is enabled."
        },
        "DashboardId": {
          "type": "string",
          "description": "ID of the dashboard (Required if data alert is enabled).",
          "format": "guid"
        },
        "DataSourceName": {
          "type": "string",
          "description": "Name of the data source (Required if data alert is enabled)."
        },
        "WidgetName": {
          "type": "string",
          "description": "Name of the widget (Required if data alert is enabled)."
        },
        "ConditionCategory": {
          "type": "string",
          "description": "Specifies the type of data alert trigger to export the dashboard.<br />Values allowed are <code>Value Changes, Increases, Continuously Increases, Decreases, Continuously Decreases</code> (Required if data alert is enabled)"
        },
        "ConditionalResult": {
          "type": "object",
          "description": "Specifies the result of the filter condition (Required if data alert is enabled).",
          "required": [
            "ConditionalInformations"
          ],
          "properties": {
            "ConditionalInformations": {
              "type": "object",
              "description": "Specifies the details of the filter condition.",
              "allOf": [
	              {
	                "$ref": "#/definitions/ConditionalInfoColleciton"
	              }
              ]
            }
          }
        }
      }
    },
    "PaginatedScheduleApiResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "description": "Returns data from the API.",
          "items": {
            "$ref": "#/definitions/ApiScheduleItemDetail"
          }
        },
        "TotalResults": {
          "type": "integer",
          "description": "Returns items count of the API request.",
          "format": "int32"
        },
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Links"
          },
          "description": "Returns pagination links."
        }
      }
    },
    "ApiScheduleItemDetail": {
      "type": "object",
      "description": "Schedule item detail.",
      "additionalProperties": false,
      "properties": {
        "CanRead": {
          "type": "boolean",
          "description": "Returns true, if the user has read permission for the schedule."
        },
        "CanWrite": {
          "type": "boolean",
          "description": "Returns true, if the user has write permission for the schedule."
        },
        "CanOpen": {
          "type": "boolean",
          "description": "Returns true, if the user has read permission for the schedule."
        },
        "CanSchedule": {
          "type": "boolean",
          "description": "Returns true, if the user has create permission for the schedule."
        },
        "CanMove": {
          "type": "boolean",
          "description": "Returns true, if the user has move permission for the schedule."
        },
        "CanClone": {
          "type": "boolean",
          "description": "Returns true, if the user has clone permission for the schedule."
        },
        "CanCopy": {
          "type": "boolean",
          "description": "Returns true, if the user has copy permission for the schedule."
        },
        "CanCreateItem": {
          "type": "boolean",
          "description": "Returns true, if the user has create permission for the schedule."
        },
        "CanDelete": {
          "type": "boolean",
          "description": "Returns true, if the user has delete permission for the schedule."
        },
        "CanDownload": {
          "type": "boolean",
          "description": "Returns true, if the user has download permission for the schedule."
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category Name."
        },
        "CreatedByDisplayName": {
          "type": "string",
          "description": "Schedule created user name."
        },
        "CreatedById": {
          "type": "integer",
          "description": "Created user ID.",
          "format": "int32"
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in string format."
        },
        "Description": {
          "type": "string",
          "description": "Schedule description."
        },
        "ScheduleId": {
          "type": "string",
          "description": "Schedule ID.",
          "format": "guid"
        },
        "ScheduleName": {
          "type": "string",
          "description": "Schedule Name."
        },
        "ItemLocation": {
          "type": "string",
          "description": "Schedule item location."
        },
        "ItemCreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "ItemModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        },
        "ItemType": {
          "type": "string",
          "description": "Item type.<br />Value allowed is <code>Schedule</code>"
        },
        "ModifiedByFullName": {
          "type": "string",
          "description": "Schedule modified user name."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Modified user ID.",
          "format": "int32"
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in string format."
        },
        "ExportType": {
          "type": "string",
          "description": "Specifies the export type to schedule the dashboard. Values allowed are <code>Excel, Image, Pdf</code>."
        },
        "DashboardId": {
          "type": "string",
          "description": "Dashboard ID.",
          "format": "guid"
        },
        "DashboardName": {
          "type": "string",
          "description": "Dashboard Name."
        },
        "DashboardWidgetId":{
          "type": "string",
          "description":"Dashboard Widget ID.",
          "format":"guid"
        },
        "DashboardWidgetName":
        {
          "type": "string",
          "description": "Dashboard Widget Name."
        },
        "DashboardViewId":{
          "type": "string",
          "description": "Dashboard View ID.",
          "format":"guid"
        },
        "DashboardViewName":{
          "type": "string",
          "description": "Dashboard View Name."
        },
        "IsEnabled": {
          "type": "boolean",
          "description": "Returns true, if the schedule is enabled."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true, if the schedule is active."
        },
        "FailureNotificationToOwner": {
          "type": "boolean",
          "description": "Returns true, if the failure notification to an owner is enabled."
        },
        "FailureNotificationToRecipient": {
          "type": "boolean",
          "description": "Returns true, if the failure notification to the recipient is enabled."
        },
        "FailureOccurrence": {
          "type": "integer",
          "description": "Failure occurrence count.",
          "format": "int32"
        },
        "StartDate": {
          "type": "string",
          "description": "Specifies the UTC start date-time of schedule.",
          "format": "date-time"
        },
        "EndDate": {
          "type": "string",
          "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed.",
          "format": "date-time"
        },
        "NextSchedule": {
          "type": "string",
          "description": "Specifies the UTC date-time of the upcoming schedule.",
          "format": "date-time"
        },
        "NeverEnd": {
          "type": "boolean",
          "description": "When set to true, it creates a schedule with no end.\n\n **Note**: By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
        },
        "EndAfterOccurrence": {
          "type": "integer",
          "description": "Specifies the number of occurrences after which the schedule will be completed. \n\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
          "format": "int32"
        },
        "RecurrenceTypeId": {
          "type": "string",
          "description": "Specifies the schedule type to schedule the dashboard.<br /><br />Values allowed are <code>Hourly, Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
        },
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.<br /><br />Values allowed are <code>EveryNdays, EveryWeekday</code>\n\n**Note:** If you choose the recurrence type as EveryNdays, provide a value to the `EveryNdays` property, and leave the (EveryWeekday) property empty."
        },
        "UserList": {
          "type": "array",
          "description": "Provides a list of user IDs to the recipients who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "GroupList": {
          "type": "array",
          "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ExternalRecipientsList": {
          "type": "array",
          "description": "Provides a list of email addresses to the email recipients who will get the schedules. ",
          "items": {
            "type": "string"
          }
        },
        "HourlySchedule": {
          "description": "Runs the schedules on an hourly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiHourlySchedule"
            }
          ]
        },
        "DailySchedule": {
          "description": "Runs the schedules on a daily basis. ",
          "allOf": [
            {
              "$ref": "#/definitions/ApiDailySchedule"
            }
          ]
        },
        "WeeklySchedule": {
          "description": "Runs the schedule on a weekly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiWeeklySchedule"
            }
          ]
        },
        "MonthlySchedule": {
          "description": "Runs the schedule on a monthly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlySchedule"
            }
          ]
        },
        "YearlySchedule": {
          "description": "Runs the schedules on a yearly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlySchedule"
            }
          ]
        },
        "ExportFormatInfo": {
          "description": "Schedule export format information.",
          "$ref": "#/definitions/ScheduleExportFormat"
        },
        "ScheduleExportLocation": {
          "description": "Schedule export location information.",
          "$ref": "#/definitions/ScheduleExportLocationResponse"
        },
        "Parameter": {
          "type": "string",
          "description": "Specifies the parameter value."
        }
      }
    },
    "ApiValidateItemName": {
      "required": [
        "ItemName",
        "ItemType"
      ],
      "type": "object",
      "properties": {
        "ItemName": {
          "type": "string",
          "description": "Item name. Valid values: `\"Category name\"` `\"Dashboard name\"` `\"Data source name\"` `\"Schedule name\"` `\"Slideshow name\"`"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name should be provided if the item type is `\"Dashboard\"`"
        },
        "ItemType": {
          "type": "string",
          "description": "Item type. Valid values: `\"Category\"` `\"Dashboard\"` `\"Datasource\"` `\"Schedule\"` `\"Slideshow\"`"
        }
      }
    },
    "ApiAddEmbedPinboard": {
      "type": "object",
      "required": [
        "HomepageName",
        "Pininfo"
      ],
      "properties": {
        "HomepageName": {
          "type": "string",
          "description": "Specify the name of the pinboard"
        },
        "Pininfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiAddPininfo"
          },
          "description": "Provide the list of Widget IDs, Widget Names, and Dashboard IDs to add the pinboard."
        }
      },
      "description": "Add pinboard request details."
    },
    "ApiAddPininfo": {
      "type": "object",
      "required": [
        "DashboardId",
        "WidgetId",
        "WidgetName"
      ],
      "properties": {
        "WidgetName": {
          "type": "string",
          "description": "Specify the Widget Name to add within the pinboard."
        },
        "WidgetId": {
          "type": "string",
          "description": "Specify the Widget ID to add within the pinboard.",
          "format": "guid"
        },
        "DashboardId": {
          "type": "string",
          "description": "Specify the Dashboard ID where the widget exists.",
          "format": "guid"
        }
      }
    },
    "ApiAddPinboardResponse": {
      "type": "object",
      "required": [
        "ApiStatus",
        "Data",
        "Status"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "type": "string",
          "description": "Returns the pinboard id from the API.",
          "format": "guid"
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        }
      },
      "description": "Response details of the pinboard."
    },
    "ApiSiteCopyPinboard": {
      "type": "object",
      "required": [
        "HomepageName",
        "TargetHomepageName",
        "TargetUserEmail"
      ],
      "properties": {
        "HomepageName": {
          "type": "string",
          "description": "Specify the name of the copy pinboard."
        },
        "TargetHomepageName": {
          "type": "string",
          "description": "Specify the name of the pinboard which is needed to copy."
        },
        "TargetUserEmail": {
          "type": "string",
          "description": "Specify the mail id of the user from where the pinboard is to be copied."
        }
      },
      "description": "Copy the pinboard request details."
    },
    "ApiGetPinboardPaginatedResponse": {
      "type": "object",
      "properties": {
          "Data":{
              "type": "array",
              "description" : "Returns data from the API.",
              "items":{
                "$ref": "#/definitions/PinboardItemsResponse"
            }
          },
          "TotalResults": {
              "type": "integer",
              "description": "Returns items count of the API request.",
              "format": "int32"
          },
          "Links": {
              "type": "array",
              "description": "Returns pagination links.",
              "items": {
                  "$ref": "#/definitions/Links"
              }
          }
      }
    },
    "PinboardItemsResponse":{
      "type": "object",
      "properties": {
          "CreatedDate": {
              "type": "string",
              "description": "Date created of the pinboard in string format.",
              "format": "datetime"
          },
          "ColumnInfo":{
              "type": "object",
              "description": "Specifies the details of the widget and dashboard.",
              "allOf": [
                {
                  "$ref": "#/definitions/ApiColumnInfo"
                }
              ]
          },
          "Id": {
            "type": "string",
            "description": "Specifies the item ID of the pinboard.",
            "format": "guid"
          },
          "IsDefaultHomepage":{
            "type": "boolean",
            "description": "Returns true, if it is default homepage."
          },
          "ItemType": {
            "type": "string",
            "description": "Item type.<br />The possible values are <code>Widget</code>"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date modified of item in string format."
          },
          "Name": {
            "type": "string",
            "description": "Specifies the name of the pinboard."
          }
      }
    },
    "ApiColumnInfo":{
      "type": "object",
      "properties": {
         "Column": {
          "type": "array",
          "description":"Specifies the details of the widget column.",
          "items":{
              "$ref":"#/definitions/Column"
          }
      },
      "Layout":{
        "type": "integer",
        "description": "Specifies the layout."
      }
      }
    },
    "Column":{
      "type": "object",
      "properties": {
          "Item":{
              "type": "array",
              "description": "Specifies the details of each widget item.",
              "items":{
                  "$ref": "#/definitions/WidgetDetails"
              }
          }
      }
    },
    "WidgetDetails":{
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "description": "Specifies the widget ID.",
          "format": "guid"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true, if the item is active."
        },
        "ItemId": {
          "type": "string",
          "description": "Specifies the ID of the dashboard.",
          "format": "guid"
        },
        "ItemName": {
          "type": "string",
          "description": "Specifies the name of the dashboard."
        },
        "CategoryName": {
          "type": "string",
          "description": "Specifies the name of the category."
        },
        "Name": {
          "type": "string",
          "description": "Specifies the name of the widget."
        },
        "Path": {
          "type": "string",
          "description": "Specifies the version path of the pinned widget." 
        },
        "WidgetType": {
          "type": "string",
          "description": "Specifies the type of the widget."
        }
      }
    },
    "ApiUpdateEmbedPinboard": {
      "type": "object",
      "required": [
        "Pininfo"
      ],
      "properties": {
        "SetDefault": {
          "type": "boolean",
          "description": "Specify whether the pinboard should be set as default or removed from default.\n\n **Note**: If your pinboard is not a default pinboard, use null or true instead of false."
        },
        "Pininfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiAddPininfo"
          },
          "description": "Provide the list of Widget IDs, Widget Names, and Dashboard IDs to update the pinboard."
        }
      },
      "description": "Update pinboard request details."
    },
    "ApiValidatePinboardName": {
      "required": [
        "ItemName"
      ],
      "type": "object",
      "properties": {
        "ItemName": {
          "type": "string",
          "description": "Pinboard name."
        }
      }
    },
    "ApiPinboard":{
      "required" : [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Name": {
            "type": "string",
            "description": "New Pinboard name."
          }
      }
    },
    "ApiUserAddAttribute": {
      "type": "object",
      "required": [
        "UserId",
        "Name",
        "Value"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Attribute Name"
        },
        "Value": {
          "type": "string",
          "description": "Attribute Value"
        },
        "Description": {
          "type": "string",
          "description": "Attribute Description"
        },
        "CanEncrypt": {
          "type": "boolean",
          "description": "Encrypt Attribute Value"
        },
        "UserId": {
          "type": "integer",
          "description": "User Id",
          "format": "int32"
        }
      }
    },
    "ApiUserUpdateAttribute": {
      "type": "object",
      "required": [
        "Id",
        "UserId",
        "Name",
        "Value"
      ],
      "properties": {
        "Id": {
          "type": "integer",
          "description": "Attribute Id",
          "format": "int32"
        },
        "Name": {
          "type": "string",
          "description": "Attribute Name"
        },
        "Value": {
          "type": "string",
          "description": "Attribute Value"
        },
        "Description": {
          "type": "string",
          "description": "Attribute Description"
        },
        "CanEncrypt": {
          "type": "boolean",
          "description": "Encrypt Attribute Value"
        },
        "UserId": {
          "type": "integer",
          "description": "User Id",
          "format": "int32"
        }
      }
    },
    "ApiGroupAddAttribute": {
      "type": "object",
      "required": [
        "GroupId",
        "Name",
        "Value"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Attribute Name"
        },
        "Value": {
          "type": "string",
          "description": "Attribute Value"
        },
        "Description": {
          "type": "string",
          "description": "Attribute Description"
        },
        "CanEncrypt": {
          "type": "boolean",
          "description": "Encrypt Attribute Value"
        },
        "GroupId": {
          "type": "integer",
          "description": "Group Id",
          "format": "int32"
        }
      }
    },
    "ApiGroupUpdateAttribute": {
      "type": "object",
      "required": [
        "Id",
        "GroupId",
        "Name",
        "Value"
      ],
      "properties": {
        "Id": {
          "type": "integer",
          "description": "Attribute Id",
          "format": "int32"
        },
        "Name": {
          "type": "string",
          "description": "Attribute Name"
        },
        "Value": {
          "type": "string",
          "description": "Attribute Value"
        },
        "Description": {
          "type": "string",
          "description": "Attribute Description"
        },
        "CanEncrypt": {
          "type": "boolean",
          "description": "Encrypt Attribute Value"
        },
        "GroupId": {
          "type": "integer",
          "description": "Group Id",
          "format": "int32"
        }
      }
    },
    "ApiSiteAddAttribute": {
      "type": "object",
      "required": [
        "Name",
        "Value"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Attribute Name"
        },
        "Value": {
          "type": "string",
          "description": "Attribute Value"
        },
        "Description": {
          "type": "string",
          "description": "Attribute Description"
        },
        "CanEncrypt": {
          "type": "boolean",
          "description": "Encrypt Attribute Value"
        }
      }
    },
    "ApiSiteUpdateAttribute": {
      "type": "object",
      "required": [
        "Id",
        "Name",
        "Value"
      ],
      "properties": {
        "Id": {
          "type": "integer",
          "description": "Attribute Id",
          "format": "int32"
        },
        "Name": {
          "type": "string",
          "description": "Attribute Name"
        },
        "Value": {
          "type": "string",
          "description": "Attribute Value"
        },
        "Description": {
          "type": "string",
          "description": "Attribute Description"
        },
        "CanEncrypt": {
          "type": "boolean",
          "description": "Encrypt Attribute Value"
        }
      }
    },
    "ApiSiteSettings": {
      "type": "object",
      "required": [
        "Key",
        "Value"
      ],
      "properties": {
        "Key": {
          "type": "string",
          "description": "Site settings name. Valid keys: `OrganizationName` `SiteUrl` `LoginScreenLogo` `EmailLogo` `HeaderLogo` `FooterLogo` `FavIcon` `AILogo` \n\n `ShowCopyrightInformation` `ShowPoweredBySyncfusion` `CopyrightInformation` `Use24HourFormat` `DisableUserPreference` `ApplicationLanguage` `DataLanguage` `DateFormat` `TimeZone`."
        },
        "Value": {
          "type": "string",
          "description": "Site settings value.\n\n Valid values: `OrganizationName` `SiteUrl` `TimeZone` `CopyrightInformation` are in `string` \n\n `LoginScreenLogo` `EmailLogo` `HeaderLogo` `FooterLogo` `FavIcon` `AILogo` are in `Base64EncodedString` \n\n `ShowCopyrightInformation` `ShowPoweredBySyncfusion` `Use24HourFormat` `DisableUserPreference` are in `true` or `false` \n\n `DateFormat` is in `MM/dd/yyyy` `dd/MM/yyyy` `d MMM, yyyy` `MMM d, yyyy` \n\n `ApplicationLanguage` `DataLanguage` has language code in the following [link](https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a)\n\n `TimeZone` has Timezone value from the following [link](https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11#time-zones)."
        },
        "FileFormat": {
          "type": "string",
          "description": "Image format type. Valid values: `svg` `png` `jpg` `jpeg`."
        }
      }
    },
    "UpdateApiSiteSettings": {
      "required": [
        "Key",
        "Value"
      ],
      "type": "object",
      "properties": {
        "Key": {
          "type": "string",
          "description": "Site settings name. Valid keys: `OrganizationName` `SiteUrl` `LoginScreenLogo` `EmailLogo`  `HeaderLogo` `FooterLogo` `FavIcon` `AILogo` \n\n `ShowCopyrightInformation` `ShowPoweredBySyncfusion` `CopyrightInformation` `Use24HourFormat` `DisableUserPreference` `ApplicationLanguage` `DataLanguage` `DateFormat` `TimeZone`."
        },
        "Value": {
          "type": "string",
          "description": "Site settings value.\n\n Valid values: `OrganizationName` `SiteUrl` `TimeZone` `CopyrightInformation` should be `string` \n\n `LoginScreenLogo` `EmailLogo` `HeaderLogo` `FooterLogo` `FavIcon` `AILogo` should be `Base64EncodedString` \n\n `ShowCopyrightInformation` `ShowPoweredBySyncfusion` `Use24HourFormat` `DisableUserPreference` should be `true` or `false` \n\n `DateFormat` should be `MM/dd/yyyy` `dd/MM/yyyy` `d MMM, yyyy` `MMM d, yyyy` \n\n `ApplicationLanguage` `DataLanguage` should be any language code in the following [link](https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a) \n\n `TimeZone` should be any Timezone from the following [link](https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11#time-zones)."
        },
        "FileFormat": {
          "type": "string",
          "description": "Image format type. It must required when update image in site settings. Valid values: `svg` `png` `jpg` `jpeg`."
        }
      }
    },
    "ApiUpdateSiteSettingsResponse": {
      "type": "object",
      "required": [
        "ApiStatus",
        "Status"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      }
    },
    "ApiDashboardSettings": {
      "type": "object",
      "properties": {
        "MakePublicEnabled": {
          "type": "boolean",
          "description": "Returns true, if the public dashboard setting is enabled."
        },
        "DefaultViewsEnabled": {
          "type": "boolean",
          "description": "Returns true, if the default views setting is enabled."
        },
        "AutoSaveEnabled": {
          "type": "boolean",
          "description": "Returns true, if the autosave filter setting is enabled."
        },
        "ThemingEnabled": {
          "type": "boolean",
          "description": "Returns true, if the dashboard theming setting is enabled."
        },
        "UsageAnaylticsEnabled": {
          "type": "boolean",
          "description": "Returns true, if the usage analytics dashboard setting is enabled."
        },
        "PerformanceMetricsEnabled": {
          "type": "boolean",
          "description": "Returns true, if the performance metrics dashboard setting is enabled."
        },
        "QueryMetricsEnabled": {
          "type": "boolean",
          "description": "Returns true, if the query metrics dashboard setting is enabled."
        }
      }
    },
    "ApiUpdateDashboardSettings": {
      "type": "object",
      "properties": {
        "MakePublicEnabled": {
          "type": "boolean",
          "description": "Specify true to enable public dashboard setting.",
          "nullable": true
        },
        "DefaultViewsEnabled": {
          "type": "boolean",
          "description": "Specify true to enable default views setting.",
          "nullable": true
        },
        "AutoSaveEnabled": {
          "type": "boolean",
          "description": "Specify true to enable autosave filter setting.",
          "nullable": true
        },
        "ThemingEnabled": {
          "type": "boolean",
          "description": "Specify true to enable dashboard theming setting.",
          "nullable": true
        },
        "UsageAnaylticsEnabled": {
          "type": "boolean",
          "description": "Specify true to enable usage analytics dashboard setting.",
          "nullable": true
        },
        "PerformanceMetricsEnabled": {
          "type": "boolean",
          "description": "specify true to enable performance metrics dashboard setting."
        },
        "QueryMetricsEnabled": {
          "type": "boolean",
          "description": "specify true to enable query metrics dashboard setting."
        }
      }
    },
    "ApiUpdateEmailSettings": {
      "required": [
        "SenderEmailAddress",
        "AuthenticationType"
      ],
      "type": "object",
      "properties": {
        "EmailAccount":{
          "type": "string",
          "description": "Specify the email account.<br />Values allowed are <code>SMTP, Microsoft365</code> <br /> Default values is <code>SMTP</code>"
        },
        "SMTPServer": {
        "type": "string",
        "description": "Specify the SMTP server name.<br />Applicable only for <code>SMTP</code>."
        },
        "SMTPPort": {
        "type": "string",
        "description": "Specify the SMTP port number.<br />Applicable only for <code>SMTP</code>."
        },
        "SenderName": {
        "type": "string",
        "description": "Specify the Sender name for the email.<br />Applicable only for <code>SMTP</code>."
        },
        "SenderEmailAddress": {
        "type": "string",
        "description": "Specify the Sender email address."
        },
        "AuthenticationType": {
        "type": "string",
        "description": "Specify the Authentication type of the email.<br />Values allowed are <code>Basic, Anonymous, OAuth</code> <br /> OAuth only applicable for <code>Microsoft365</code>"
      },
        "Username": {
        "type": "string",
        "description": "Specify the Username for Basic Authentication type.<br />Applicable only for <code>SMTP</code>."
        },
        "Password": {
        "type": "string",
        "description": "Specify the Password for Basic Authentication type.<br />Applicable only for <code>SMTP</code>."
        },
        "EnableSSL": {
        "type": "boolean",
        "description": "Specify true to enable SSL to connect with SMTP server.<br />Applicable only for <code>SMTP</code>.",
        "nullable": true
        },
        "TenantId": {
          "type": "string",
          "description": "Specify the Tenant name.<br />Applicable only for <code>Microsoft365</code>."
        },
        "ClientId": {
          "type": "string",
          "description": "Specify the Client id.<br />Applicable only for <code>Microsoft365</code>."
        },
        "ClientSecret": {
          "type": "string",
          "description": "Specify the Client secret.<br />Applicable only for <code>Microsoft365</code>."
        }
      }
    },
    "ApiUpdateAzureADSettings": {
      "required": [
        "TenantId",
        "ClientId",
        "ClientSecret"
      ],
      "type": "object",
      "properties": {
        "TenantId": {
          "type": "string",
          "description": "Specify the Tenant Id ."
        },
        "ClientId": {
          "type": "string",
          "description": "Specify the Client Id."
        },
        "ClientSecret": {
          "type": "string",
          "description": "Specify the Client secret."
        },
        "EnableGroupUserImport": {
          "type": "boolean",
          "description": "Specify true to enable import users from the group.\n\n**Note:** By default, the value is true."
        }
      }
    },
    "ApiUpdateAzureAdScheduleSynchronizationSettings": {
      "required": [
        "StartTime",
        "ScheduleType"
      ],
      "type": "object",
      "properties": {
        "EnableSchedule": {
          "type": "boolean",
          "description": "Specify true to enable Azure AD schedule.\n\n**Note:** By default, the value is true."
        },
        "StartTime": {
          "type": "string",
          "description": "Specifies the UTC start date-time of schedule.<br />The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
        },
        "ScheduleType": {
          "type": "string",
          "description": "Specifies the schedule type.<br />Values allowed are <code>Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
        },
        "DailySchedule": {
          "type": "object",
          "description": "Runs the schedules on a daily basis. ",
          "allOf": [
            {
              "$ref": "#/definitions/ApiDailySchedule"
            }
          ]
        },
        "WeeklySchedule": {
          "type": "object",
          "description": "Runs the schedule on a weekly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiWeeklySchedule"
            }
          ]
        },
        "MonthlySchedule": {
          "type": "object",
          "description": "Runs the schedule on a monthly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlySchedule"
            }
          ]
        },
        "YearlySchedule": {
          "type": "object",
          "description": "Runs the schedules on a yearly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlySchedule"
            }
          ]
        }
      }
    },
    "ApiUpdateAzureAdScheduleSynchronizationSettingsResponse": {
      "type": "object",
      "properties": {
        "ScheduleType": {
          "type": "string",
          "description": "Returns the schedule type."
        },
        "NextScheduleDate": {
          "type": "string",
          "description": "Returns the schedule’s next run."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      },
      "description": "Response details of created schedules."
    },
    "ApiAccountSettings": {
      "type": "object",
      "properties": {
        "ActivationType": {
          "type": "string",
          "description": "Returns activation type. <br />Values allowed are <code>AutomaticActivation, EmailActivation.</code>"
        },
        "UserEmailRequired": {
          "type": "boolean",
          "description": "Returns true, if a user email address is required while creating new users."
        }
      }
    },
    "ApiUpdateAccountSettings": {
      "required": [
        "ActivationType"
      ],
      "type": "object",
      "properties": {
        "ActivationType": {
          "type": "string",
          "description": "Specifies the activation type.<br />Values allowed are <code>AutomaticActivation, EmailActivation./code>."
        },
        "UserEmailRequired": {
          "type": "boolean",
          "description": "Specify true to set the user email address field is required while creating new users in Bold BI server.\n\n**Note:** By default, the value is true."
        }
      }
    },
    "ApiUpdateCorsSettings": {
      "type": "object",
      "properties": {
        "EnableCors": {
          "type": "boolean",
          "description": "Specify true to enable Cors setting.",
          "nullable": true
        },
        "AllowAnyOrigin": {
          "type": "boolean",
          "description": "Specify true to allow all origins in Cors setting."
        },
        "AllowedOrigins": {
          "type": "string",
          "description": "Specified origins will be able to access the resource.\n\n**Note:** Multiple origins are allowed using a comma separtor. ",
          "example": "https://www.boldbi.com/,https://onpremise-demo.boldbi.com/"
        },
        "AllowCredentials": {
          "type": "boolean",
          "description": "Specify true to allow credentials in Cors setting."
        },
        "AllowedHeaders": {
          "type": "string",
          "description": "Specified HTTP header values will be used when making an actual request.\n\n**Note:** Multiple headers are allowed using comma separator .",
          "example": "Content-Type,Content-Length"
        },
        "AllowedMethods": {
          "type": "string",
          "description": "Specified methods will be able to access the resource.<br />Values allowed are <code>GET, HEAD, POST, PUT, DELETE.</code>\n\n**Note:** Multiple headers are allowed using comma separator .",
          "example": "POST,PUT"
        },
        "ExposeHeaders": {
          "type": "string",
          "description": "Specify header values are exposed to browser based scripts.\n\n**Note:** Multiple headers are allowed using comma separator.",
          "example": "Content-Language, Content-Length, Content-Type"
        },
        "PreflightMaxAge": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the maximum time a preflight request's results can be cached."
        }
      }
    },
    "ApiGetDatastoreSettings": {
      "type": "object",
      "properties": {
        "ServerType": {
          "type": "string",
          "description": "The type of the database server."
        },
       "ServerName": {
          "type": "string",
          "description": "The name of the database server."
        },
        "Port": {
          "type": "integer",
          "description": "The port number used to connect to the database server."
        },
        "MaintenanceDatabase": {
          "type": "string",
          "description": "The name of the maintenance database."
        },
        "UserName": {
          "type": "string",
          "description": "The username used to authenticate with the database."
        },
        "IsWindowsAuthentication": {
          "type": "boolean",
          "description": "Indicates whether Windows authentication is used to connect to the database."
        },
        "DatabaseName": {
          "type": "string",
          "description": "The name of the database."
        },
        "AdditionalParameters": {
          "type": "string",
          "description": "Additional parameters of the database."
        },
        "SslEnabled": {
          "type": "boolean",
          "description": "Indicates whether SSL is enabled for database connection."
        }
      }
    },
    "ApiUpdateDatastoreSettings": {
      "type": "object",
      "required": [
        "ServerType",
        "ServerName",
        "Port",
        "UserName",
        "Password",
        "IsNewDatabase",
        "DatabaseName"                
      ],
      "properties": {
        "ServerType": {
          "type": "string",
          "description": "Specifies the type of the database server.<br />Allowed values: <code>MSSQL, PostgreSQL,MySQL</code>"
        },
        "ServerName": {
          "type": "string",
          "description": "Specifies the name of the database."
        },
        "Port": {
          "type": "integer",
          "description": "Specifies the port number for the database server.<br />Applicable only for<code>PostgreSQL</code> and <code>MySQL</code>."
        },
        "MaintenanceDatabase": {
          "type": "string",
          "description": "Specifies the maintenance database name .<br />Applicable only for <code>PostgreSQL</code>."
        },
        "UserName": {
          "type": "string",
          "description": "Specifies the database username. If the 'isWindowsAuthentication' is set to 'true,' this field is optional."
        },
        "Password": {
          "type": "string",
          "description": "Specifies the database password. If the 'isWindowsAuthentication' is set to 'true,' the field is optional."
        },
        "IsWindowsAuthentication": {
          "type": "boolean",
          "description": "Specifies whether Windows authentication is used for connecting to the database.<br />Applicable only for <code>MSSQL</code>."
        },
        "IsNewDatabase": {
          "type" : "boolean",
          "description" : "Specify true to create a new database"
        },
        "DatabaseName": {
          "type": "string",
          "description": "Specifies the name of the database."
        },
        "AdditionalParameters": {
          "type": "string",
          "description": "Specifies the Additional connection parameters for the database."
        },
        "SslEnabled": {
          "type": "boolean",
          "description": "Specifies whether SSL is enabled for database connection."
        }
      }
    },
    "ApiPublishItemDetail": {
      "type": "object",
      "required": [
        "ItemId",
        "TargetSiteDetails"
      ],
      "properties": {
        "ItemId": {
          "type": "string",
          "description": "Item Id",
          "format": "guid"
        },
        "TargetSiteDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetSiteDetails"
          },
          "description": "Target Site Details"
        }
      }
    },
    "TargetSiteDetails": {
      "type": "object",
      "required": [
        "ClientId",
        "CategoryName",
        "PublishType"
      ],
      "properties": {
        "ClientId": {
          "type": "string",
          "description": "Client Id",
          "format": "guid"
        },
        "SiteIdentifier": {
          "type": "string",
          "description": "Site Identifier (Not required for external publish type)"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category Name"
        },
        "Description": {
          "type": "string",
          "description": "Description"
        },
        "LockDashboard": {
          "type": "boolean",
          "description": "Lock Dashboard"
        },
        "LockDatasource": {
          "type": "boolean",
          "description": "Lock Datasource"
        },
        "ExternalSiteId": {
          "type": "integer",
          "description": "External site Id.",
          "format": "int32"
        },
        "Datasources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSources"
          },
          "description": "Data sources"
        },
        "PublishType": {
          "type": "string",
          "description": "",
          "enum": [
            "Internal",
            "External"
          ]
        }
      }
    },
    "DataSources": {
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "Datasource Id"
        },
        "IsLocked": {
          "type": "boolean",
          "description": "Is Datasource Locked"
        }
      }
    },
    "ExternalSites": {
      "type": "object",
      "required": [
        "Name",
        "ClientId",
        "ClientSecret",
        "SiteURL"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name"
        },
        "ClientId": {
          "type": "string",
          "description": "Client Id"
        },
        "ClientSecret": {
          "type": "string",
          "description": "Client Secret"
        },
        "SiteURL": {
          "type": "string",
          "description": "Site URL"
        }
      }
},
    "GetUsersPaginatedApiResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "description": "Returns data from the API.",
          "items": {
            "$ref": "#/definitions/ApiUserListV5"
          }
        },
        "TotalResults": {
          "type": "integer",
          "description": "Returns items count of the API request.",
          "format": "int32"
        },
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Links"
          },
          "description": "Returns pagination links."
        }
      }
    },
    "ApiUserListV5": {
      "type": "object",
      "description": "List of users",
      "additionalProperties": false,
      "properties": {
        "UserList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiUserV5"
          }
        }
      }
    },
    "ApiUserV5": {
      "type": "object",
      "description": "User detail",
      "additionalProperties": false,
      "properties": {
        "ContactNumber": {
          "type": "string",
          "description": "Phone number of the user."
        },
        "DisplayName": {
          "type": "string",
          "description": "Display name of the user."
        },
        "Email": {
          "type": "string",
          "description": "Email address of the user."
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the user is active."
        },
        "DirectoryType": {
          "$ref": "#/definitions/DirectoryType"
        },
        "Lastname": {
          "type": "string",
          "description": "Last name of the user."
        },
        "UserId": {
          "type": "integer",
          "description": "ID of the user.",
          "format": "int32"
        },
        "Username": {
          "type": "string",
          "description": "Username of the user."
        },
        "UserStatus": {
          "description": "Returns the status of the user.",
          "allOf": [
            {
              "$ref": "#/definitions/UserStatus"
            }
          ]
        }
      }
    }, 
    "GetUserGroupsPaginatedApiResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "description": "Returns data from the API.",
          "items": {
            "$ref": "#/definitions/ApiGroupList"
          }
        },
        "TotalResults": {
          "type": "integer",
          "description": "Returns items count of the API request.",
          "format": "int32"
        },
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Links"
          },
          "description": "Returns pagination links."
        }
      }
    },
    "ApiGroupList": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "GroupList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiGroup"
          }
        }
      }
    },
    "GetGroupsPaginatedApiResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "description": "Returns data from the API.",
          "items": {
            "$ref": "#/definitions/ApiGroupListV5"
          }
        },
        "TotalResults": {
          "type": "integer",
          "description": "Returns items count of the API request.",
          "format": "int32"
        },
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Links"
          },
          "description": "Returns pagination links."
        }
      }
    },
    "ApiGroupListV5": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "GroupList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiGroupV5"
          }
        }
      }
    },
    "ApiGroupV5": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Description": {
          "type": "string",
          "description": "Description of the group."
        },
        "Id": {
          "type": "integer",
          "description": "ID of the group.",
          "format": "int32"
        },
        "DirectoryType": {
          "$ref": "#/definitions/DirectoryType"
        },
        "Name": {
          "type": "string",
          "description": "Name of the group."
        },
        "UserCount": {
          "type": "integer",
          "description": "User(s) count",
          "format": "int32"
        }
      }
    },
    "GetGroupUsersPaginatedApiResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "description": "Returns data from the API.",
          "items": {
            "$ref": "#/definitions/ApiUserList"
          }
        },
        "TotalResults": {
          "type": "integer",
          "description": "Returns items count of the API request.",
          "format": "int32"
        },
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Links"
          },
          "description": "Returns pagination links."
        }
      }
    },
    "ApiUserList": {
      "type": "object",
      "description": "List of users",
      "additionalProperties": false,
      "properties": {
        "UserList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiUser"
          }
        }
      }
    },
    "ApiUser": {
      "type": "object",
      "description": "User detail",
      "additionalProperties": false,
      "properties": {
        "ContactNumber": {
          "type": "string",
          "description": "Phone number of the user."
        },
        "DisplayName": {
          "type": "string",
          "description": "Display name of the user."
        },
        "Email": {
          "type": "string",
          "description": "Email address of the user."
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the user is active."
        },
        "IsAzureAdUser": {
          "type": "boolean",
          "description": "Returns true if the user is added from Azure Active Directory."
        },
        "Lastname": {
          "type": "string",
          "description": "Last name of the user."
        },
        "UserId": {
          "type": "integer",
          "description": "ID of the user.",
          "format": "int32"
        },
        "Username": {
          "type": "string",
          "description": "Username of the user."
        },
        "UserStatus": {
          "description": "Returns the status of the user.",
          "allOf": [
            {
              "$ref": "#/definitions/UserStatus"
            }
          ]
        }
      }
    },
    "Links": {
      "type": "object",
      "properties": {
        "Link": {
          "type": "string",
          "description": "Returns the page link."
        },
        "Rel": {
          "type": "string",
          "description": "Returns link type. Valid values: `First` `Next` `Prev` `Last`."
        },
        "Type": {
          "type": "string",
          "description": "Returns method type. Valid values: `GET`."
        }
      }
    },
    "GetUsersPermissionPaginatedApiResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "description": "Returns data from the API.",
          "items": {
            "$ref": "#/definitions/ApiUserPermissionDetail"
          }
        },
        "TotalResults": {
          "type": "integer",
          "description": "Returns items count of the API request.",
          "format": "int32"
        },
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Links"
          },
          "description": "Returns pagination links."
        }
      }
    },
    "ApiGetDashboardDetailsByGroupnamesApiResponse": {
      "type": "object",
      "properties": {
        "Dashboards": {
          "type": "array",
          "description": "Returns the dashboard details for the valid provided groups.",
          "items": {
            "$ref": "#/definitions/GetDashboardByGroupApiResponse"
          }
        },
        "InvalidGroups": {
          "type": "array",
          "description": "List of invalid group names.",
          "items": {
            "type": "string"
          }
        },
        "UnAuthorizedGroups": {
            "type": "array",
            "description": "List of unauthorized group names.",
            "items": {
            "type": "string"
            }
        },
        "ValidGroups": {
            "type": "array",
            "description": "List of valid group names.",
            "items": {
            "type": "string"
            }
        }
      }
    },
    "GetDashboardByGroupApiResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
            "Group": {
                "type": "string",
                "description": "Specifies the group name."
            },
            "DashboardDetails": {
                "type": "array",
                "description": "Specifies the group dashboard details.",
                "items":{
                    "$ref":"#/components/schemas/GroupsDashboardDetails"
                }
            }
        }
    },
    "GroupsDashboardDetails": {
      "type": "object",
      "properties": {
          "CanRead": {
              "type": "boolean",
              "description": "Specifies the read permission of the item."
          },
          "CanWrite": {
              "type": "boolean",
              "description": "Specifies the write permission of the item."
          },
          "CanDelete": {
              "type": "boolean",
              "description": "Specifies the delete permission of the item."
          },
          "CanDownload": {
              "type": "boolean",
              "description": "Specifies the download permission of the item."
          },
          "CanSchedule": {
              "type": "boolean",
              "description": "Specifies the schedule permission of the item."
          },
          "CanOpen": {
              "type": "boolean",
              "description": "Specifies the open permission of the item."
          },
          "CanMove": {
              "type": "boolean",
              "description": "Specifies the move permission of the item."
          },
          "CanCopy": {
              "type": "boolean",
              "description": "Specifies the copy permission of the item."
          },
          "CanClone": {
              "type": "boolean",
              "description": "Specifies the clone permission of the item."
          },
          "CanCreateItem": {
              "type": "boolean",
              "description": "Specifies the create permission of the item."
          },
          "Id": {
              "type": "string",
              "description": "Item ID.",
              "format": "guid"
          },
          "ItemType": {
              "type": "string",
              "description": "Item type.<br />Values allowed are <code>Dashboard</code>"
          },
          "Name": {
              "type": "string",
              "description": "Item name."
          },
          "Description": {
              "type": "string",
              "description": "Item description."
          },
          "ItemLocation": {
              "type": "string",
              "description": "Item location."
          },
          "CreatedById": {
              "type": "integer",
              "description": "Specifies the user ID of the item creator.",
              "format": "int32"
          },
          "CreatedByDisplayName": {
              "type": "string",
              "description": "Specifies the display name of the user who created the item."
          },
          "ModifiedById": {
              "type": "integer",
              "description": "Specifies the user ID of the item modifier.",
              "format": "int32"
          },
          "ModifiedByFullName": {
              "type": "string",
              "description": "Specifies the full name of the user who modified the item."
          },
          "CategoryId": {
              "type": "string",
              "description": "Category ID.",
              "format": "guid"
          },
          "CategoryName": {
              "type": "string",
              "description": "Category name."
          },
          "CreatedDate": {
              "type": "string",
              "description": "Date created of item in string format."
          },
          "ModifiedDate": {
              "type": "string",
              "description": "Date modified of item in string format."
          },
          "ItemModifiedDate": {
              "type": "string",
              "description": "Date modified of item in date format.",
              "format": "date-time"
          },
          "ItemCreatedDate": {
              "type": "string",
              "description": "Date created of item in date format.",
              "format": "date-time"
          },
          "IsMultiDashboard": {
              "type": "boolean",
              "description": "Returns true, if the dashboard is multi-dashboard."
          },
          "IsFavorite": {
              "type": "boolean",
              "description": "Returns true, if it is a favorite item."
          },
          "IsPublic": {
              "type": "boolean",
              "description": "Returns true, if the item is public."
          },
          "TabDetail": {
              "type": "array",
              "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
              "items": {
                  "$ref": "#/components/schemas/ApiTabDetail"
              }
          }
      }
    },
    "ApiUserPermissionDetail": {
      "type": "object",
      "description": "User permission details.",
      "additionalProperties": false,
      "properties": {
        "PermissionEntity": {
          "type": "string",
          "description": "Specifies an entity of item for permission.<br /><br />Available permission entities are:<br /><br />`\"AllCategories\"` `\"AllDashboards\"` `\"AllDataSources\"` `\"AllSchedules\"` `\"AllSlideshow\"` `\"DashboardsInCategory\"` <br /><br /> `\"SpecificCategory\"` `\"SpecificDashboard\"` `\"SpecificDataSource\"` `\"SpecificSchedule\"` `\"SpecificSlideshow\"` `\"AllGroups\"` <br /><br /> `\"AllPermissions\"` `\"AllSettings\"` `\"SpecificGroup\"` `\"SpecificPermissions\"` `\"SpecificSettings\"` `\"UsersandGroups\"`<br /><br />"
        },
        "PermissionAccess": {
          "type": "string",
          "description": "Specifies an access type for item.<br /><br />Permission access values available for the permission entities:<br /><br />1. `\"AllCategories\"` `\"AllDataSources\"` `\"AllSchedules\"` `\"AllSlideshow\"` has `\"Create\"` `\"Read\"` `\"ReadWrite\"`<br /><br /> `\"ReadWriteDelete\"` <br /><br />2. `\"AllDashboards\"` `\"DashboardsInCategory\"` has `\"Create\"` `\"Read\"` `\"ReadWrite\"` `\"ReadWriteDelete\"` `\"Download\"` <br /><br />3. `\"SpecificCategory\"` `\"SpecificDataSource\"` `\"SpecificSchedule\"` `\"SpecificSlideshow\"` has `\"Read\"` `\"ReadWrite\"` <br /><br /> `\"ReadWriteDelete\"` <br /><br />4. `\"SpecificDashboard\"` has `\"Read\"` `\"ReadWrite\"` `\"ReadWriteDelete\"` `\"Download\"`<br /><br />5. `\"AllGroups\"` has `\"Create\"` <br /><br />6. `\"AllPermissions\"` `\"AllSettings\"` `\"SpecificGroup\"` `\"SpecificPermissions\"` `\"SpecificSettings\"` `\"UsersandGroups\"` <br /><br /> has `\"Manage\"`<br /><br />"
        },
        "UserId": {
          "type": "integer",
          "description": "Specifies the User ID to whom the permission has been added.<br /><br />",
          "format": "int32"
        },
        "GroupId": {
          "type": "integer",
          "description": "Specifies the Group ID if this permission is inherited from the group where the user is associated; otherwise, its value will be 0.<br /><br />",
          "format": "int32"
        },
        "InheritedFromGroup": {
          "type": "boolean",
          "description": "Specifies the values as <code>true</code> if it is group permission where the user is associated; otherwise, the value will be <code>false</code>.<br /><br />"
        },
        "ItemName": {
          "type": "string",
          "description": "Specifies the Item name with respective to its permission entity.<br /><br />Item name available for permission entities:<br /><br />1. `\"SpecificSettings\"` has `\"Dashboard Settings\"` `\"Embed Settings\"` `\"Integrations\"` `\"Look and Feel\"` <br /><br /> `\"Notification Settings\"` `\"Security\"` `\"Site Settings\"` `\"User Directory Settings\"` `\"Authentication Settings\"` <br /><br /> `\"CORS Settings\"` `\"SiteCredentials\"` `\"Accounts Settings\"` `\"Connectors\"` `\"Data Process\"` `\"Email Settings\"` <br /><br /> `\"Widgets\"`<br /><br />2. `\"SpecificPermissions\"` has `\"Category\"` `\"Dashboard\"` `\"Datasource\"` `\"Schedule\"` `\"Slideshow\"`<br /><br />3. `\"DashboardsInCategory\"` `\"SpecificCategory\"` has the Name of `\"Category\"`<br /><br />`\"SpecificDashboard\"` has the Name of `\"Dashboard\"`<br /><br />`\"SpecificSchedule\"` has the Name of `\"Schedule\"`<br /><br />`\"SpecificDataSource\"` has the Name of `\"Datasource\"`<br /><br />`\"SpecificSlideshow\"` has the Name of `\"Slideshow\"`<br /><br />4. `\"SpecificGroup\"` has Group Name.<br /><br />"
        },
        "PermissionId": {
          "type": "integer",
          "description": "Specifies the Permission ID.<br /><br />",
          "format": "int32"
        },
        "ItemId": {
          "type": "string",
          "description": "Specifies the item ID of particular item like Category, Dashboard, Datasource,Schedule, Slideshow.<br /><br />Item Id will be available for the following permission entities:<br /><br />`\"SpecificCategory\"`  `\"SpecificDashboard\"`  `\"SpecificDataSource\"`  `\"SpecificSchedule\"`  `\"SpecificSlideshow\"` <br /><br /> `\"DashboardsInCategory\"`",
          "format": "guid",
          "nullable": true
        }
      }
    },
    "GetGroupsPermissionPaginatedApiResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "description": "Returns data from the API.",
          "items": {
            "$ref": "#/definitions/ApiGroupPermissionDetail"
          }
        },
        "TotalResults": {
          "type": "integer",
          "description": "Returns items count of the API request.",
          "format": "int32"
        },
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Links"
          },
          "description": "Returns pagination links."
        }
      }
    },
    "ApiGroupPermissionDetail": {
      "type": "object",
      "description": "Group Permission details.",
      "additionalProperties": false,
      "properties": {
        "PermissionEntity": {
          "type": "string",
          "description": "Specifies an entity of item for permission.<br /><br />Available permission entities are:<br /><br />`\"AllCategories\"` `\"AllDashboards\"` `\"AllDataSources\"` `\"AllSchedules\"` `\"AllSlideshow\"` `\"DashboardsInCategory\"` <br /><br /> `\"SpecificCategory\"` `\"SpecificDashboard\"` `\"SpecificDataSource\"` `\"SpecificSchedule\"` `\"SpecificSlideshow\"`  `\"AllGroups\"` <br /><br /> `\"AllPermissions\"` `\"AllSettings\"` `\"SpecificGroup\"` `\"SpecificPermissions\"` `\"SpecificSettings\"` `\"UsersandGroups\"`<br /><br />"
        },
        "PermissionAccess": {
          "type": "string",
          "description": "Specifies an access type for item.<br /><br />Permission access values available for the permission entities:<br /><br />1. `\"AllCategories\"` `\"AllDataSources\"` `\"AllSchedules\"` `\"AllSlideshow\"` has `\"Create\"` `\"Read\"` `\"ReadWrite\"` <br /><br /> `\"ReadWriteDelete\"` <br /><br />2. `\"AllDashboards\"` `\"DashboardsInCategory\"` has `\"Create\"` `\"Read\"` `\"ReadWrite\"` `\"ReadWriteDelete\"` `\"Download\"` <br /><br />3. `\"SpecificCategory\"`, `\"SpecificDataSource\"` `\"SpecificSchedule\"` `\"SpecificSlideshow\"` has `\"Read\"` `\"ReadWrite\"` <br /><br /> `\"ReadWriteDelete\"` <br /><br />4. `\"SpecificDashboard\"` has `\"Read\"` `\"ReadWrite\"` `\"ReadWriteDelete\"` `\"Download\"`<br /><br />5. `\"AllGroups\"` has `\"Create\"` <br /><br />6. `\"AllPermissions\"` `\"AllSettings\"` `\"SpecificGroup\"` `\"SpecificPermissions\"` `\"SpecificSettings\"` `\"UsersandGroups\"` <br /><br /> has `\"Manage\"`<br /><br />"
        },
        "GroupId": {
          "type": "integer",
          "description": "Specifies the Group ID to which the permission has been added.<br /><br />",
          "format": "int32"
        },
        "ItemName": {
          "type": "string",
          "description": "Specifies the Item name with respective to its permission entity.<br /><br />Item name available for permission entities:<br /><br />1. `\"SpecificSettings\"` has `\"Dashboard Settings\"` `\"Embed Settings\"` `\"Integrations\"` `\"Look and Feel\"` <br /><br /> `\"Notification Settings\"` `\"Security\"` `\"Site Settings\"` `\"User Directory Settings\"` `\"Authentication Settings\"` <br /><br /> `\"CORS Settings\"` `\"SiteCredentials\"` `\"Accounts Settings\"` `\"Connectors\"` `\"Data Process\"` `\"Email Settings\"` <br /><br /> `\"Widgets\"`<br /><br />2. `\"SpecificPermissions\"` has `\"Category\"` `\"Dashboard\"` `\"Datasource\"` `\"Schedule\"` `\"Slideshow\"`<br /><br />3. `\"DashboardsInCategory\"` `\"SpecificCategory\"` has the Name of `\"Category\"`<br /><br />`\"SpecificDashboard\"` has the Name of `\"Dashboard\"`<br /><br />`\"SpecificSchedule\"` has the Name of `\"Schedule\"`<br /><br />`\"SpecificDataSource\"` has the Name of `\"Datasource\"`<br /><br />`\"SpecificSlideshow\"` has the Name of `\"Slideshow\"`<br /><br />4. `\"SpecificGroup\"` has Group Name.<br /><br />"
        },
        "PermissionId": {
          "type": "integer",
          "description": "Specifies the Permission ID.<br /><br />",
          "format": "int32"
        },
        "ItemId": {
          "type": "string",
          "description": "Specifies the item ID of particular item like Category, Dashboard, Datasource,Schedule, Slideshow.<br /><br />Item Id will be available for the following permission entities:<br /><br />`\"SpecificCategory\"`  `\"SpecificDashboard\"`  `\"SpecificDataSource\"`  `\"SpecificSchedule\"`  `\"SpecificSlideshow\"` <br /><br /> `\"DashboardsInCategory\"`",
          "format": "guid",
          "nullable": true
        }
      }
    },
    "ApiEmailSettings": {
      "type": "object",
      "properties": {
        "EmailAccount":{
          "type": "string",
          "description": "Email account.<br />Values allowed are <code>SMTP, Microsoft 365</code>"
        },
        "SMTPServer": {
          "type": "string",
          "description": "SMTP server name."
        },
        "SMTPPort": {
            "type": "string",
            "description": "SMTP port number."
          },
          "SenderName": {
            "type": "string",
            "description": "Sender name for the email."
          },
          "SenderEmailAddress": {
            "type": "string",
            "description": "Sender email address."
          },
          "AuthenticationType": {
            "type": "string",
            "description": "The authentication type of the email.<br /> Values allowed are <code>Basic, Anonymous, OAuth</code> "
          },
          "Username": {
              "type": "string",
              "description": "Username of the user."
          },
          "EnableSSL": {
            "type": "boolean",
            "description": "Returns true to enable SSL to connect with SMTP server.",
            "nullable": true
          },
          "TenantId": {
            "type": "string",
            "description": "Tenant id."
          },
          "ClientId": {
            "type": "string",
            "description": "Client id."
         }
      }
    },
    "ApiCorsSettings": {
        "type": "object",
        "properties": {
            "EnableCors": {
                "type": "boolean",
                "description": "Returns true if Cors setting is enable."
              },
              "AllowAnyOrigin": {
                "type": "boolean",
                "description": "Returns true if allow all origins in Cors setting."
              },
              "AllowCredentials": {
                "type": "boolean",
                "description": "Returns true if allow credentials in Cors setting."
              },
              "AllowedHeaders": {
                "type": "string",
                "description": "Specified HTTP header values will be used when making an actual request.\n\n**Note:** Multiple headers are allowed using comma separator."
              },
              "AllowedOrigins": {
                "type": "string",
                "description": "Specified origins will be able to access the resource.\n\n**Note:** Multiple origins are allowed using a comma separator."
              },
              "AllowedMethods": {
                "type": "string",
                "description": "Specified methods will be able to access the resource.<br />Values allowed are <code>GET, HEAD, POST, PUT, DELETE.</code>\n\n**Note:** Multiple headers are allowed using comma separator ."
              },
              "ExposeHeaders": {
                "type": "string",
                "description": "Specify header values are exposed to browser based scripts.\n\n**Note:** Multiple headers are allowed using comma separator ."
              },
              "PreflightMaxAge": {
                "type": "integer",
                "format": "int32",
                "description": "Specifies the maximum time a preflight request's results can be cached."
              }
        }
    },
    "ApiAzureADSettings": {
      "type": "object",
      "properties": {
        "TenantId": {
            "type": "string",
            "description": "Tenant id."
          },
          "ClientId": {
            "type": "string",
            "description": "Client id."
          },
          "EnableGroupUserImport": {
            "type": "boolean",
            "description": "Returns true if enable import users from the group.\n\n**Note:** By default, the value is true."
          }
      }
    },
    "ApiAzureAdScheduleSynchronizationSettings": {
      "type": "object",
      "properties": {
        "EnableSchedule": {
          "type": "boolean",
          "description": "Returns true if enable Azure AD schedule."
        },
        "StartDate": {
          "type": "string",
          "description": "UTC start date-time of schedule."
        },
        "ScheduleType": {
          "type": "string",
          "description": "Specifies the schedule type.<br />Values allowed are <code>Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
        },
        "RecurrenceTypeId": {
            "type": "string",
            "description": "Specifies the schedule type to schedule the dashboard.<br /><br />Values allowed are <code>Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
        },
        "RecurrenceType": {
            "type": "string",
            "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.<br /><br />Values allowed are <code>EveryNdays, EveryWeekday</code>\n\n**Note:** If you choose the recurrence type as EveryNdays, provide a value to the `EveryNdays` property, and leave the (EveryWeekday) property empty."
        },
        "DailySchedule": {
          "type": "object",
          "description": "Runs the schedules on a daily basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiDailySchedule"
            }
          ]
        },
        "WeeklySchedule": {
          "type": "object",
          "description": "Runs the schedule on a weekly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiWeeklySchedule"
            }
          ]
        },
        "MonthlySchedule": {
          "type": "object",
          "description": "Runs the schedule on a monthly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlySchedule"
            }
          ]
        },
        "YearlySchedule": {
          "type": "object",
          "description": "Runs the schedules on a yearly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlySchedule"
            }
          ]
        }
      }
    },
    "ApiAddmultitabDashboardRequest": {
      "required": [
          "Name",
          "CategoryId",
          "TabList"
      ],
      "type": "object",
      "properties": {
          "Name": {
              "type": "string",
              "description": "multi-tab Dashboard name."
          },
          "CategoryId": {
              "type": "string",
              "description": "Category ID.",
              "format": "guid"
          },
          "TabList": {
              "type": "array",
              "description": "Tab's’ list.",
              "items": {
                  "$ref": "#/definitions/TabsList"
              }
          }
      },
      "description": "Dashboard details."
    },
    "ApiUpdateDashboardUnlist": {
      "type" : "object",
      "properties": {
          "IsUnlisted": {
              "type": "boolean",
              "description" : "Specify true to update the dashboard as unlisted."  
          }
      },
      "description" : "Details of the unlist dashboards item."
    },
    "TabsList": {
      "type": "object",
      "properties": {
          "OrderNumber": {
              "type": "integer",
              "description": "Dashboard order.",
              "format": "int32"
          },
          "ItemInfo": {
              "type": "object",
              "description": "Dashboard item details.",
              "allOf": [
                  {
                      "$ref": "#/definitions/TabInfo"
                  }
              ]
          }
      },
      "description": "TabsList details."
    },
    "TabInfo": {
      "type": "object",
      "properties": {
          "Id": {
              "type": "string",
              "description": "Item ID.",
              "format": "guid"
          },
          "TabName": {
              "type": "string",
              "description": "Tab Name."
          }
      },
      "description": "Tab details."
    },
    "ApiGetDeploymentDashboards": {
      "type": "array",
      "description": "List of deployment dashboards.",
      "items": {
          "$ref": "#/definitions/ApiDeploymentDashboards"
      }
    },
    "ApiDeploymentDashboards": {
      "type": "object",
      "description": "Deployment dashboards details.",
      "additionalProperties": false,
      "properties": {
        "ItemId": {
          "type": "string",
          "description": "ID of the dashboard.",
          "format": "guid"
        },
        "ItemName": {
          "type": "string",
          "description": "Name of the deployment dashboard."
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name."
        },
        "Description": {
          "type": "string",
          "description": "Description of the deployment dashboard."
        },
        "IsDatasourceLocked": {
          "type": "boolean",
          "description": "Returns true if the datasource is locked."
        },
        "IsDashboardLocked": {
          "type": "boolean",
          "description": "Returns true if the dashboard is locked."
        },
        "MakeDashboardPublic": {
          "type": "boolean",
          "description": "Returns true if the dashboard is public."
        }
      }
    },
    "ApiAddDeploymentDashboards": {
      "type": "array",
      "description": "Deployment dashboards details.",
      "items": {
          "$ref": "#/definitions/DeploymentDashboards"
      }
    },
    "DeploymentDashboards": {
      "type": "object",
      "required": [
        "ItemId",
        "ItemName",
        "CategoryName",
        "CategoryId"
      ],
      "properties": {
        "ItemId": {
          "type": "string",
          "description": "ID of the dashboard.",
          "format": "guid"
        },
        "ItemName": {
          "type": "string",
          "description": "Name of the deployment dashboard."
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name."
        },
        "Description": {
          "type": "string",
          "description": "Description of the deployment dashboard."
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "IsDatasourceLocked": {
          "type": "boolean",
          "description": "Specify <i>true</i> to set the datasource is locked."
        },
        "IsDashboardLocked": {
          "type": "boolean",
          "description": "Specify <i>true</i> to set the dashboard is locked."
        },
        "MakeDashboardPublic": {
          "type": "boolean",
          "description": "Specify <i>true</i> to set the dashboard is public."
        }
      }
    },
    "ApiLookandFeelSettings": {
      "type": "object",
      "properties": {
        "InheritGlobalSettings": {
          "type": "boolean",
          "description": "Returns true if a user enables Inherit from Global settings."
        },
        "ThemeMode": {
          "type": "string",
          "description": "Returns Theme Mode.<br />Values allowed are <code>Light, Dark.</code>"
        },
        "FontPreference":{
            "type": "string",
            "description": "Returns FontPreference."
        },
        "ApplicationCustomTheme": {
            "type": "string",
            "description": "Returns Custom Theme."
        },
        "DashboardCustomTheme": {
            "type": "string",
            "description": "Returns Dashboard Theme."
        }
      }
    }, 
    "ApiUpdateLookAndSettings": {
      "required": [
        "InheritGlobalSettings",
        "ThemeMode",
        "FontPreference"
      ],
      "type": "object",
      "properties": {
        "InheritGlobalSettings": {
          "type": "boolean",
          "description": "Specify true will cause the look and feel to be inherited from the UMS settings."
        },
        "ThemeMode": {
          "type": "string",
          "description": "Specifies the Theme Mode type.<br />Values allowed are <code>Light, Dark.</code>."
        },
        "FontPreference":{
            "type": "string",
            "description": "Specifies the FontPreference."
        },
        "ApplicationCustomThemeEnabled": {
            "type": "boolean",
            "description": "Specify true to set the Custom Theme."
        },
        "DashboardCustomThemeEnabled": {
            "type": "boolean",
            "description": "Specify true to set the Dashboard Theme."
        },
        "ApplicationCustomTheme  ": {
            "type": "string",
            "description": "Application Custom Theme."
        },
        "DashboardCustomTheme": {
            "type": "string",
            "description": "Dashboard Custom Theme."
        }
      }
    },
    "ApiXFrameOptionsSettings": {
      "required":[
        "IsXFrameOptionsEnabled"
      ],
      "type": "object",
      "properties": {
          "IsXFrameOptionsEnabled": {
              "type": "boolean",
              "description": "Specify true to enable X-Frame-Options settings."
           }
        }
    },
      "ApiIPWhitelistingSettings":{
        "type": "object",
        "properties":{
            "ApiStatus": {
                "type": "boolean",
                "description": "Returns the status of the API."
            },
            "Data": {
                "type": "array",
                "description": "Returns data from the API.",
                "items":
                  {
                    "$ref": "#/definitions/IPWhitelistingResponse"
                  }
            },
            "StatusMessage": {
                "type": "string",
                "description": "Returns the status message from the API."
            }
        }
    },
    "ApiCSPSecuritySettings": {
      "type": "object",
      "properties": {
        "EnableCSP": {
          "type": "boolean",
          "description": "Specify true to enable Content Security Policy settings."
        },
        "StyleSource": {
          "type": "string",
          "description": "Specified Style-Source directive allows access to the style resource only from URLs.\n\n**Note:** Multiple Style-source are allowed using a comma separator.",
          "example": "https://test1.boldbi.com,https://test2.boldbi.com "
        },
        "ScriptSource": {
          "type": "string",
          "description": "Specified Script-Source directive allows access to the script resource only from URLs.\n\n**Note:** Multiple Script-source are allowed using a comma separator.",
          "example": "https://test1.boldbi.com,https://test2.boldbi.com "
        },
        "FontSource": {
          "type":"string",
          "description": "Specified Font-Source directive allows access to the font resource only from URLs.\n\n**Note:** Multiple Font-source are allowed using a comma separator.",
          "example": "https://test1.boldbi.com,https://test2.boldbi.com "
        },
        "ImageSource": {
          "type": "string",
          "description": "Specified Image-Source directive allows access to the image resource only from URLs.\n\n**Note:** Multiple Image-source are allowed using a comma separator.",
          "example": "https://test1.boldbi.com,https://test2.boldbi.com "
        },
        "ConnectSource": {
          "type": "string",
          "description": "Specified Connect-Source directive allows the source to make Fetch/XHR requests only from URLs.\n\n**Note:** Multiple connect-source are allowed using a comma separator.",
          "example": "https://test1.boldbi.com,https://test2.boldbi.com "
        },
        "FrameSource": {
          "type": "string",
          "description": "Specified Frame-Source directive allows access to the frame resource only from URLs.\n\n**Note:** Multiple Frame-source are allowed using a comma separator.",
          "example": "https://test1.boldbi.com,https://test2.boldbi.com "
        },
        "FrameAncestors":{
          "type": "string",
          "description": "Specified Frame-Ancestors directive allows access to valid parent domains that may embed a dashboard or complete application from URLs.\n\n**Note:** Multiple Frame-Ancestors are allowed using a comma separator.",
          "example": "https://test1.boldbi.com,https://test2.boldbi.com"
      }
      }
    },
    "Notification": {
      "required":[
        "MailNotificationSettings",
        "SystemNotificationSettings"
      ],
      "type": "object",
      "description": "Notification settings details.",
      "properties": {
        "MailNotificationSettings": {
          "description": "Mail notification details.",
          "allOf":[
            {
              "$ref": "#/definitions/MailNotificationSettings"
            }
          ]
        },
        "SystemNotificationSettings": {
          "description": "System notification details.",
          "allOf":[
            {
              "$ref": "#/definitions/SystemNotificationSettings"
            }
          ]
        },
        "DisableUserPreference": {
          "type": "boolean",
          "description": "Specify true to disable the user's preference so that the user cannot change the settings on the user profile page."
        }
      }
    },
    "MailNotificationSettings":{
      "type": "object",
      "properties": {
          "EnableNotificationForDashboardOwner": {
              "type": "boolean",
              "description": "Specify true to send an email notification to the dashboard owner when someone comments on the dashboard."
          },
          "EnableNotificationForAccessibleUser": {
              "type": "boolean",
              "description": "Specify true to send an email notification to all users who have access to the dashboard when someone comments on it."
          },
          "EnableNotificationOnUserMention": {
              "type": "boolean",
              "description": "Specify true to send an email notification to the user whenever someone mentions their name while commenting on the dashboard."
          },
          "EnableNotificationWhenWatchEnabled": {
              "type": "boolean",
              "description": "Autowatch will be enabled for comments on dashboards whenever you add comments to a dashboard you created or accessed. Specify true to receive notifications for specific dashboards rather than all dashboards you have created or accessed."
          },
          "EnableUserScheduleNotification": {
              "type": "boolean",
              "description": "Specify true to send an email notification to the users for data alert and schedule export."
          },
          "EnableUserProfileNotification": {
              "type": "boolean",
              "description": "Specify true to send an email notification to the users if their profiles are edited."
          },
          "EnableResourceShareNotification": {
              "type": "boolean",
              "description": "Specify true to send an email notification to the user whenever they are granted permissions for resources, users, groups, or settings."
          },
          "EnableUserSynchronizationNotification": {
              "type": "boolean",
              "description": "Specify true to send an email notification to the user about user synchronization schedule."
          }
        }
    },
   "SystemNotificationSettings":{
      "type": "object",
      "properties": {
          "EnableNotificationForDashboardOwner": {
              "type": "boolean",
              "description": "Specify true to send a system notification to the dashboard owner when someone comments on the dashboard."
          },
          "EnableNotificationForAccessibleUser": {
              "type": "boolean",
              "description": "Specify true to send a system notification to all users who have access to the dashboard when someone comments on it."
          },
          "EnableNotificationOnUserMention": {
              "type": "boolean",
              "description": "Specify true to send a system notification to the user whenever someone mentions their name while commenting on the dashboard."
          },
          "EnableNotificationWhenWatchEnabled": {
              "type": "boolean",
              "description": "Autowatch will be enabled for comments on dashboards whenever you add comments to a dashboard you created or accessed. Specify true to receive notifications for specific dashboards rather than all dashboards you have created or accessed."
          }
       }
    },
    "ApiGetOAuthSettings": {
      "type": "object",
      "properties": {
        "IsEnabled": {
          "type": "boolean",
          "description": "Returns true if the OAuth settings are enabled."
        },
        "ProviderLogo": {
          "type": "string",
          "description": "Content of the provider logo."
        },
        "LogoType": {
          "type": "string",
          "description": "Type of the logo."
        },
        "ProviderName": {
          "type": "string",
          "description": "Name of the provider."
        },
        "ClientId": {
          "type": "string",
          "description": "Client ID for the OAuth provider."
        },
        "AuthorizationEndPoint": {
          "type": "string",
          "description": "URL for the authorization endpoint."
        },
        "TokenEndPoint": {
          "type": "string",
          "description": "URL of the token endpoint."
        },
        "TokenEndPointMethod": {
          "type": "string",
          "description": "HTTP methods used for the token endpoint. </br>The possible values are<code>GET, POST</code>"
        },
        "UserInfoEndPoint": {
          "type": "string",
          "description": "URL for the user information endpoint."
        },
        "UserInfoEndPointMethod": {
          "type": "string",
          "description": "HTTP methods used for the user information endpoint. </br>The possible values are<code>GET, POST</code>"
        },
        "Scopes": {
          "type": "string",
          "description": "Scopes required for OAuth authorization."
        },
        "UserInfoEmail": {
          "type": "string",
          "description": "The JSON key in claims mapped with the user's email."
        },
        "UserInfoFirstname": {
          "type": "string",
          "description": "The JSON key in claims mapped with the user's first name."
        },
        "UserInfoLastname": {
          "type": "string",
          "description": "The JSON key in claims mapped with the user's last name."
        },
        "LogoutEndPoint": {
          "type": "string",
          "description": "URL of the Logout endpoint."
        },
        "RedirectURI": {
          "type": "string",
          "description": "Redirect URI for OAuth authentication."
        },
        "MobileAppRedirectURI": {
          "type": "string",
          "description": "Redirect URI for mobile app authentication."
        },
        "CanCreateAccount": {
          "type": "boolean",
          "description": "Returns true if the CanCreateAccount is enabled to create a new account."
        },
        "GroupImportSettings": {
          "type": "object",
          "description": "Details for group import settings.",
          "$ref": "#/definitions/OAuthGroupImportSettings"
        }
      }
    },
    "ApiUpdateOAuthSettings": {
      "required": [
        "IsEnabled",
        "ProviderLogo",
        "LogoType",
        "ProviderName",
        "ClientId",
        "ClientSecret",
        "AuthorizationEndPoint",
        "TokenEndPoint",
        "TokenEndPointMethod",
        "UserInfoEndPoint",
        "UserInfoEndPointMethod",
        "Scopes",
        "UserInfoEmail"
      ],
      "type": "object",
      "properties": {
        "IsEnabled": {
          "type": "boolean",
          "description": "Specify true value to enable the OAuth settings."
        },
        "ProviderLogo": {
          "type": "string",
          "description": "Specify the provider logo. It should be `Base64EncodedString`"
        },
        "LogoType": {
          "type": "string",
          "description": "Specify the logo type. </br>Values allowed are <code>image/png, image/jpeg, image/svg+xml</code>"
        },
        "ProviderName": {
          "type": "string",
          "description": "Specify the name of the provider that you configure."
        },
        "ClientId": {
          "type": "string",
          "description": "Specify the Client ID of the provider."
        },
        "ClientSecret": {
          "type": "string",
          "description": "Specify the Client Secret of the provider."
        },
        "AuthorizationEndPoint": {
          "type": "string",
          "description": "Specify the authorization endpoint URL."
        },
        "TokenEndPoint": {
          "type": "string",
          "description": "Specify the token endpoint URL."
        },
        "TokenEndPointMethod": {
          "type": "string",
          "description": "Specify the token endpoint method. </br>Values allowed are <code>GET, POST</code>"
        },
        "UserInfoEndPoint": {
          "type": "string",
          "description": "Specify the user information endpoint."
        },
        "UserInfoEndPointMethod": {
          "type": "string",
          "description": "Specify the user information endpoint method. </br>Values allowed are <code>GET, POST</code>"
        },
        "Scopes": {
          "type": "string",
          "description": "Specify the scopes with comma separator for authorization. <br> For Example: 'openid', 'profile', 'email' "
        },
        "UserInfoEmail": {
          "type": "string",
          "description": "Specify the JSON key that should be mapped with the user's email."
        },
        "UserInfoFirstname": {
          "type": "string",
          "description": "Specify the JSON key that should be mapped with the user's first name."
        },
        "UserInfoLastname": {
          "type": "string",
          "description": "Specify the JSON key that should be mapped with the user's last name."
        },
        "LogoutEndPoint": {
          "type": "string",
          "description": "Specify the logout endpoint URL."
        },
        "CanCreateAccount": {
          "type": "boolean",
          "description": "Specify true if you want to create an account."
        },
        "GroupImportSettings": {
            "type": "object",
            "description": "Specify the group import settings details.",
            "$ref": "#/definitions/OAuthGroupImportSettings"
        }
      }
    },
    "ApiGetJWTSettings": {
      "type": "object",
      "properties": {
        "IsEnabled": {
          "type": "boolean",
          "description": "Specify true if the JWT settings need to be enabled."
      },
      "ProviderLogo": {
          "type": "string",
          "description": "Specify the content of the provider's logo."
      },
      "LogoType": {
          "type": "string",
          "description": "Specify the type of the logo."
      },
      "ProviderName": {
          "type": "string",
          "description": "Specify the name of the provider."
      },
      "RemoteLoginUrl": {
          "type": "string",
          "description": "Login URL of the JWT application."
      },
      "RemoteLogoutUrl": {
          "type": "string",
          "description": "Specify the logout URL of the application."
      },
      "IsEncryptionEnable": {
          "type": "boolean",
          "description": "Returns the true value if encryption is enabled for the JWT token."
      }
      }
    },
    "ApiUpdateJWTSettings": {
      "required": [
        "IsEnabled",
        "ProviderLogo",
        "LogoType",
        "ProviderName",
        "RemoteLoginUrl"
      ],
      "type": "object",
      "properties": {
        "IsEnabled": {
          "type": "boolean",
          "description": "Specify true if the JWT settings need to be enabled."
      },
      "ProviderLogo": {
          "type": "string",
          "description": "Specify the content of the provider's logo."
      },
      "LogoType": {
          "type": "string",
          "description": "Specify the type of the logo."
      },
      "ProviderName": {
          "type": "string",
          "description": "Specify the name of the provider."
      },
      "RemoteLoginUrl": {
          "type": "string",
          "description": "Login URL of the JWT application."
      },
      "RemoteLogoutUrl": {
          "type": "string",
          "description": "Specify the logout URL of the application."
      },
      "IsEncryptionEnable": {
          "type": "boolean",
          "description": "Returns the true value if encryption is enabled for the JWT token."
      }
      }
    },
    "OAuthGroupImportSettings":{
      "type": "object",
      "properties": {
          "ProviderType": {
              "type": "string",
              "description": "Provider type to import groups settings. </br>Values allowed are <code>Cognito AWS, Auth0, Okta, OneLogin</code>"
          },
          "Setting": {
              "type": "object",
              "description": "Group import settings details. Please refer to the link [here](/faq/what-are-the-different-request-object-properties-of-group-imports-setting-for-each-oauth-and-openid-provider-type/) to learn about the details of each provider type's group import settings."
            }
      }
    },
    "ApiGetOpenIDSettings": {
      "type": "object",
      "properties": {
        "IsEnabled": {
          "type": "boolean",
          "description": "Returns true if the OpenID settings are enabled."
        },
        "LogoType": {
          "type": "string",
          "description": "Type of the logo."
        },
        "ProviderLogo": {
          "type": "string",
          "description": "Content for the provider logo."
        },
        "ProviderName": {
          "type": "string",
          "description": "Name of the provider"
        },
        "ClientId": {
          "type": "string",
          "description": "Client ID of the OpenID provider."
        },
        "Identifier": {
          "type": "string",
          "description": "Identifier of the OpenID provider."
        },
        "Authority": {
          "type": "string",
          "description": "URL of the authority"
        },
        "LogoutUrl": {
          "type": "string",
          "description": "URL of the logout"
        },
        "RedirectURI": {
          "type": "string",
          "description": "Redirect URI for OpenID authentication."
        },
        "MobileAppRedirectURI": {
          "type": "string",
          "description": "Redirect URI for mobile app authentication."
        },
        "CanCreateAccount": {
          "type": "boolean",
          "description": "Returns true if the CanCreateAccount is enabled to create a new account."        
        },
        "GroupImportSettings": {
          "type": "object",
          "description": "Details for group import settings.",
          "$ref": "#/definitions/OpenIDGroupImportSettings"
        }
      }
    },
    "ApiUpdateOpenIDSettings": {
      "required": [
          "IsEnabled",
          "ProviderLogo",
          "LogoType",
          "ProviderName",
          "ClientId",
          "ClientSecret",
          "Identifier",
          "Authority"
      ],
      "type": "object",
      "properties": {
        "IsEnabled": {
          "type": "boolean",
          "description": "Specify true value to enable the OpenID settings."
        },
        "ProviderLogo": {
          "type": "string",
          "description": "Specify the provider logo. It should be `Base64EncodedString`"
        },
        "LogoType": {
          "type": "string",
          "description": "Specify the logo type. </br>Values allowed are <code>image/png, image/jpeg, image/svg+xml</code>"
        },
        "ProviderName": {
          "type": "string",
          "description": "Specify the name of the provider that you configure."
        },
        "ClientId": {
          "type": "string",
          "description": "Specify the Client ID of the provider."
        },
        "ClientSecret": {
          "type": "string",
          "description": "Specify the Client Secret of the provider."
        },
        "Identifier": {
          "type": "string",
          "description": "Specify the identifier."
        },
        "Authority": {
          "type": "string",
          "description": "Specify the authority URL."
        },
        "LogoutUrl": {
          "type": "string",
          "description": "Specify Logout URL of the JWT application."
        },
        "CanCreateAccount": {
          "type": "boolean",
          "description": "Specify true if you want to create an account."
        },
        "GroupImportSettings": {
          "type": "object",
          "description": "Specified the groupimportsettings details.",
          "$ref": "#/definitions/OpenIDGroupImportSettings"
        }
      }
    },
    "OpenIDGroupImportSettings":{
      "type": "object",
      "properties": {
          "ProviderType": {
              "type": "string",
              "description": "Provider type to import groups settings. </br>Values allowed are <code>Auth0, Okta, OneLogin</code>"
          },
          "Setting": {
              "type": "object",
              "description": "Group import settings details. Please refer to the link [here](/faq/what-are-the-different-request-object-properties-of-group-imports-setting-for-each-oauth-and-openid-provider-type/) to learn about the details of each provider type's group import settings."
            }
      }
    },
    "UserNotificationSettings": {
      "required":[
        "UserMailNotificationSettings",
        "UserSystemNotificationSettings"
      ],
      "type": "object",
      "description": "User notification settings details.",
      "properties": {
        "InheritMailNotificationSettingsFromGlobalSettings": {
          "type": "boolean",
          "description" : "Specify true to inherit the global email settings from the system administrator."
        },
        "InheritSystemNotificationSettingsFromGlobalSettings": {
          "type": "boolean",
          "description" : "Specify true to inherit the global system settings from the system administrator."
        },
        "UserMailNotificationSettings": {
          "description": "User mail notification details",
          "allOf":[
            {
              "$ref": "#/definitions/UserMailNotificationSettings"
            }
          ]
        },
        "UserSystemNotificationSettings": {
          "description": "User system notification details",
          "allOf":[
            {
              "$ref": "#/definitions/UserSystemNotificationSettings"
            }
          ]
        }
      }
    },
    "UserMailNotificationSettings":{
      "type": "object",
      "properties": {
          "EnableNotificationForDashboardOwner": {
              "type": "boolean",
              "description": "Specify true to send an email notification to you when someone comments on the dashboard you created."
            },
          "EnableNotificationForAccessibleUser": {
              "type": "boolean",
              "description": "Specify true to send an email notification to you when someone comments on the dashboard if you have access to."
            },
          "EnableNotificationOnUserMention": {
              "type": "boolean",
              "description": "Specify true to send an email notification to you whenever someone mentions your name while commenting on a dashboard."
          },
          "EnableNotificationWhenWatchEnabled": {
              "type": "boolean",
              "description": "Autowatch will be enabled for comments on dashboards whenever you add comments to a dashboard you created or accessed. Specify true to receive system notifications for specific dashboards rather than all dashboards you have created or accessed."
          },
          "EnableUserScheduleNotification": {
              "type": "boolean",
              "description": "Specify true to send an email notification to you for data alert and schedule export."
          },
          "EnableUserProfileNotification": {
              "type": "boolean",
              "description": "Specify true to send an email notification to you if your profile is edited."
          },
          "EnableResourceShareNotification": {
              "type": "boolean",
              "description": "Specify true to send an email notification to you whenever you are granted permissions for resources, users, groups, or settings."
          },
          "EnableUserSynchronizationNotification": {
              "type": "boolean",
              "description": "Specify true to send an email notification to you about user synchronization schedule."
          }
       }
    },
    "UserSystemNotificationSettings":{
      "type": "object",
      "properties": {
          "EnableNotificationForDashboardOwner": {
              "type": "boolean",
              "description": "Specify true to send a system notification to you when someone comments on the dashboard that you created."
          },
          "EnableNotificationForAccessibleUser": {
              "type": "boolean",
              "description": "Specify true to send a system notification to you when someone comments on the dashboard you can access."
          },
          "EnableNotificationOnUserMention": {
              "type": "boolean",
              "description": "Specify true to send a system notification to you whenever someone mentions your name while commenting on a dashboard."
          },
          "EnableNotificationWhenWatchEnabled": {
              "type": "boolean",
              "description": "Autowatch will be enabled for comments on dashboards whenever you add comments to a dashboard you created or accessed. Specify true to receive system notifications for specific dashboards rather than all dashboards you have created or accessed."
          }
        }
    },
    "ApiExternalSiteDetails": {
      "type": "object",
      "description": "External Site details.",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "integer",
          "description": "Id of the External site",
          "format": "int32"
        },
        "Name": {
          "type": "string",
          "description": "Name"
        },
        "ClientId": {
          "type": "string",
          "description": "Client Id"
        },
        "SiteURL": {
          "type": "string",
          "description": "Site URL"
        }
      }
    },
    "ApiEditExternalSites": {
      "type": "object",
      "required": [
        "Name",
        "ClientId",
        "ClientSecret",
        "SiteURL"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name"
        },
        "ClientId": {
          "type": "string",
          "description": "Client Id"
        },
        "ClientSecret": {
          "type": "string",
          "description": "Client Secret"
        },
        "SiteURL": {
          "type": "string",
          "description": "Site URL"
        }
      },
      "description": "Update External Site request details."
    },
    "ApiDashboardSpecifiedItemDetail": {
      "type": "object",
      "description": "Item Details.",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string",
          "description": "Item ID. Valid values: `\"CategoryId\"` `\"DashboardId\"` `\"DatasourceId\"` `\"ScheduleId\"`",
          "format": "guid"
        },
        "ItemType": {
          "type": "string",
          "description": "Item type. Valid values: `\"Category\"` `\"Dashboard\"` `\"Datasource\"` `\"Schedule\"`"
        },
        "Name": {
          "type": "string",
          "description": "Item name. Valid values: `\"Category name\"` `\"Dashboard name\"` `\"Datasource name\"` `\"Schedule name\"`"
        },
        "Description": {
          "type": "string",
          "description": "Item description."
        },
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator.",
          "format": "int32"
        },
        "CloneOf": {
          "type": "string",
          "description": "Item ID from where the item is cloned.",
          "format": "guid"
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name."
        },
        "ItemCreatedDate": {
          "type": "string",
          "description": "Date created of the item in date format.",
          "format": "date-time"
        },
        "ItemModifiedDate": {
          "type": "string",
          "description": "Date modified of the item in date format.",
          "format": "date-time"
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of the item in string format."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of the item in string format."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format": "int32"
        },
        "Extension": {
          "type": "string",
          "description": "Item extension."
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Returns true if the item is public."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the item is active."
        },
        "PublishedInfo": {
            "type": "array",
            "description": "Specifies published information of the item.",
            "items": {
                "$ref": "#/definitions/PublishedInfo"
            }
        },
        "IsMultiDashboard": {
            "type": "boolean",
            "description": "Returns true if the dashboard is multi-dashboard."
        },
        "TabDetail": {
          "type": "array",
          "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
          "items": {
            "$ref": "#/definitions/ApiTabDetail"
          }
        }
      }
    },
    "ApiDataSourceSpecifiedItemDetail": {
      "type": "object",
      "description": "Item Details.",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string",
          "description": "Item ID. Valid values: `\"CategoryId\"` `\"DashboardId\"` `\"DatasourceId\"` `\"ScheduleId\"`",
          "format": "guid"
        },
        "ItemType": {
          "type": "string",
          "description": "Item type. Valid values: `\"Category\"` `\"Dashboard\"` `\"Datasource\"` `\"Schedule\"`"
        },
        "Name": {
          "type": "string",
          "description": "Item name. Valid values: `\"Category name\"` `\"Dashboard name\"` `\"Datasource name\"` `\"Schedule name\"`"
        },
        "Description": {
          "type": "string",
          "description": "Item description."
        },
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator.",
          "format": "int32"
        },
        "CloneOf": {
          "type": "string",
          "description": "Item ID from where the item is cloned.",
          "format": "guid"
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name."
        },
        "ItemCreatedDate": {
          "type": "string",
          "description": "Date created of the item in date format.",
          "format": "date-time"
        },
        "ItemModifiedDate": {
          "type": "string",
          "description": "Date modified of the item in date format.",
          "format": "date-time"
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of the item in string format."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of the item in string format."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format": "int32"
        },
        "Extension": {
          "type": "string",
          "description": "Item extension."
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Returns true if the item is public."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the item is active."
        },
        "PublishedInfo": {
            "type": "array",
            "description": "Specifies published information of the item.",
            "items": {
                "$ref": "#/definitions/PublishedInfo"
            }
        }
      }
    },
    "PublishedInfo": {
        "type": "object",
        "properties": {
          "CategoryName": {
              "type": "string",
              "description": "Returns target site category name."
          },
          "DestinationItemId": {
              "type": "string",
              "description": "Returns item Id in target site.",
              "format": "guid"
          },
          "DestinationItemName": {
              "type": "string",
              "description": "Returns item name in target site."
          },
          "DestinationSiteUrl": {
              "type": "string",
              "description": "Returns target site Url."
          },
          "IsLocked": {
              "type": "boolean",
              "description": "Date modified of the item in string format."
          },
          "PublishType": {
              "type": "string",
              "description": "Returns publish type."
          }
      }
    },
    "GetItemsPaginatedApiResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "description": "Returns data from the API.",
          "items": {
            "$ref": "#/definitions/PublishedItemsResponse"
          }
        },
        "TotalResults": {
          "type": "integer",
          "description": "Returns items count of the API request.",
          "format": "int32"
        },
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Links"
          },
          "description": "Returns pagination links."
        }
      }
    },
    "PublishedItemsResponse": {
      "type": "object",
      "description": "Details of the published item.",
      "additionalProperties": false,
        "properties": {
            "PublishId": {
                "type": "string",
                "description": "Return publish Id.",
                "format": "guid"
            },
            "CategoryId": {
              "type": "string",
              "description": "Category Id.",
              "format": "guid"
            },
            "ItemId": {
                "type": "string",
                "description": "Returns Id of the dashboard.",
                "format": "guid"
            },
            "ItemName": {
              "type": "string",
              "description": "Returns name of the dashboard."
            },
            "CategoryName": {
                "type": "string",
                "description": "Returns category name."
            },
            "ItemType": {
                "type": "string",
                "description": "Returns item type."
            },
            "IsSiteExist": {
                "type": "boolean",
                "description": "Returns if site already exists."
            },
            "ExternalSiteId": {
                "type": "integer",
                "description": "Returns external site Id.",
                "format": "int32"
            },
            "PublishedItemName": {
                "type": "string",
                "description": "Returns destination site item name."
            },
            "PublishedItemDescription": {
                "type": "string",
                "description": "Returns destination site item description."
            },
            "PublishedItemCategoryName": {
                "type": "string",
                "description": "Returns destination site item category name."
            },
            "PublishedItemId": {
                "type": "string",
                "description": "Returns destination site item Id.",
                "format": "guid"
            },
            "TenantId": {
                "type": "string",
                "description": "Returns tenant Id.",
                "format": "guid"
            },
            "TenantName": {
                "type": "string",
                "description": "Returns tenant name."
            },
            "TenantURL": {
                "type": "string",
                "description": "Returns tenant URL."
            },
            "PublishType": {
                "type": "string",
                "description": "Return publish type.<br />Values allowed are <code>Internal, External.</code>."
            },
            "IsLocked": {
                "type": "boolean",
                "description": "Returns true if the item is locked."
            },
            "PublishedById": {
                "type": "string",
                "description": "Returns Id of the publisher."
            },
            "PublishedOn": {
                "type": "string",
                "description": "Date published of the item in date format.",
                "format": "date-time"
            },
            "LastSynchronizedOn": {
                "type": "string",
                "description": "Date of the last synchronization in date format.",
                "format": "date-time"
            },
            "LastSynchronizedById": {
                "type": "string",
                "description": "Returns last synchronized user Id.",
                "format": "date-time"
            },
            "LastSynchronizedStatus": {
                "type": "Success",
                "description": "Returns success if the last synchronization is successful."
            }
        }
    },
    "ApiItemSynchronize": {
      "type": "object",
      "description": "Item synchronization details.",
      "required": [
        "IsBulkSynchronize",
        "PublishId"
      ],
      "properties": {
        "IsBulkSynchronize": {
          "type": "boolean",
          "description": "To set the bulk synchronize."
        },
        "PublishId": {
          "type": "array",
          "description": "List of publish Id's.",
          "items": {
              "type": "string",
              "format": "guid"
          }
        }
      }
    },
    "ApiUpdateUploadDashboard": {
      "type": "object",
      "description": "Details about the dashboard for update.",
      "required": [
        "ItemContent",
        "ItemExtension"
      ],
      "properties": {
        "ItemContent": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Dashboard files in an array of bytes.",
            "format": "byte"
        },
        "ItemExtension": {
            "type": "string",
            "description": "Extension of the dashboard file.<br />Values allowed are <code>.zip, .bbix.</code>."
        },
        "ShouldReplaceDataSource": {
            "type": "boolean",
            "description": "Specify <i>false</i> if you do not want to replace the data sources. Default value is <i>true</i>"
        },
        "ItemMetaInfo": {
            "type": "array",
            "description": "Meta information of the item content.",
            "items": {
                "$ref": "#/definitions/ItemMetaInfoForUpdate"
            }
        }
      }
    },
    "ItemMetaInfoForUpdate": {
      "type": "object",
      "description": "Details about the item meta info.",
      "required": [
        "ReplaceDashboardId"
      ],
      "properties": {
        "ReplaceDashboardId": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
        },
        "Name": {
            "type": "string",
            "description": "Dashboard name."
        },
        "Description": {
            "type": "string",
            "description": "Dashboard description."
        },
        "Id": {
            "type": "string",
            "description": "Dashboard ID.",
            "format": "guid"
        },
        "CategoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "guid"
        },
        "ShouldValidateSchema": {
            "type": "boolean",
            "description": "Specify <i>false</i> to avoid the schema validation. Default value is <i>true</i>."
        },
        "Datasources": {
            "type": "array",
            "description": "Data sources",
            "items": {
              "$ref": "#/definitions/ApiDataSources"
            }
        }
      }
    },
    "ApiDataSources": {
      "type": "object",
      "description": "Details about the data sources.",
      "properties": {
        "Name": {
            "type": "string",
            "description": "Data source name."
        },
        "Description": {
            "type": "string",
            "description": "Data source description."
        },
        "Id": {
            "type": "string",
            "description": "Data source ID.",
            "format": "guid"
        },
        "Type": {
            "type": "string",
            "description": "Data source type allowed values are <code>Web Live</code>, <code>MongoDB</code>, <code>amazonathena</code>, <code>amazonauroramysql</code>, <code>amazonaurorapostgresql</code>, <code>amazonrdsmysql</code>, <code>amazonrdsmariadb</code>, <code>amazonrdsamazonauroramysql</code>, <code>amazonrdsamazonaurorapostgresql</code>, <code>amazonrdspostgresql</code>, <code>amazonrdssqlserver</code>, <code>amazonrdsoracle</code>, <code>awsopensearch</code>, <code>redshift</code>, <code>azuresynapseanalytics</code>, <code>cdata</code>, <code>clickhouse</code>, <code>elasticsearch</code>, <code>googlecloudmysql</code>, <code>googlecloudpostgresql</code>, <code>influxdb</code>, <code>mariadb</code>, <code>ssas</code>, <code>mysql</code>, <code>oracle</code>, <code>postgresql</code>, <code>presto</code>, <code>singlestore</code>, <code>sqlserver</code>, <code>snowflake</code>, <code>sparksql</code>, <code>odbc</code>."
        },
        "Connector": {
            "type": "string",
            "description": "Connector information"
        },
        "Connection": {
            "type": "object",
            "description": "Connection object of the data source. Please refer its relative documentation for the connection details as follows [Web Live](/working-with-data-sources/data-connectors/live-web/#connecting-bold-bi-to-web-live-data-source-via-rest-api), [MongoDB](/working-with-data-sources/data-connectors/mongodb/#connecting-bold-bi-to-mongodb-data-source-via-rest-api), [amazonathena](/working-with-data-sources/data-connectors/amazon-athena/#connecting-bold-bi-to-amazon-athena-data-source-via-rest-api), [amazonauroramysql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmariadb](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonauroramysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonrdspostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdssqlserver](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsoracle](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [awsopensearch](/working-with-data-sources/data-connectors/aws-opensearch/#connecting-bold-bi-to-aws-open-search-data-source-via-rest-api), [redshift](/working-with-data-sources/data-connectors/amazon-redshift/#connecting-bold-bi-to-amazon-redshift-data-source-via-rest-api), [azuresynapseanalytics](/working-with-data-sources/data-connectors/azure-synapse-analytics/#connecting-bold-bi-to-azure-synapse-analytics-data-source-via-rest-api), [cdata](/working-with-data-sources/data-connectors/cdata/#connecting-bold-bi-to-cdata-data-source-via-rest-api), [clickhouse](/working-with-data-sources/data-connectors/clickhouse/#connecting-bold-bi-to-clickhouse-data-source-via-rest-api), [elasticsearch](/working-with-data-sources/data-connectors/elastic-search/#connecting-bold-bi-to-elastic-search-data-source-via-rest-api), [googlecloudmysql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [googlecloudpostgresql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [influxdb](/working-with-data-sources/data-connectors/influxdb/#connecting-bold-bi-to-influxdb-data-source-via-rest-api), [mariadb](/working-with-data-sources/data-connectors/mariadb/#connecting-bold-bi-to-mariadb-data-source-via-rest-api), [ssas](/working-with-data-sources/data-connectors/ssas/#connecting-bold-bi-to-microsoft-sql-server-analysis-servicesssas-via-rest-api), [mysql](/working-with-data-sources/data-connectors/mysql/#connecting-bold-bi-to-mysql-data-source-via-rest-api), [oracle](/working-with-data-sources/data-connectors/oracle/#connecting-bold-bi-to-oracle-data-source-via-rest-api), [postgresql](/working-with-data-sources/data-connectors/postgresql/#connecting-bold-bi-to-postgresql-data-source-via-rest-api), [presto](/working-with-data-sources/data-connectors/presto/#connecting-bold-bi-to-presto-data-source-via-rest-api), [singlestore](/working-with-data-sources/data-connectors/single-store/#connecting-bold-bi-to-singlestore-data-source-via-rest-api), [sqlserver](/working-with-data-sources/data-connectors/ms-sql-server/#connecting-bold-bi-to-microsoft-sql-server-data-source-via-rest-api), [snowflake](/working-with-data-sources/data-connectors/snowflake/#connecting-bold-bi-to-snowflake-data-source-via-rest-api), [sparksql](/working-with-data-sources/data-connectors/sparksql/#connecting-bold-bi-to-sparksql-data-source-via-rest-api), [odbc](/working-with-data-sources/data-connectors/odbc/#connecting-bold-bi-to-odbc-data-source-via-rest-api)."

        },
        "ReplaceDataSourceId": {
            "type": "string",
            "description": "Data source ID.",
            "format": "guid"
        }
      }
    },
    "ApiWindowsADSettings": {
      "type": "object",
        "properties": {
          "Username": {
              "type": "string",
              "description": "Returns username of the Windows Active Directory."
          },
          "LdapURL": {
            "type": "string",
            "description": "Returns Ldap URL"
          },
          "EnableSsl": {
            "type": "boolean",
            "description": "Returns true if SSL was enabled."
          },
          "DistinguishedName": {
              "type": "string",
              "description": "Returns Distinguished Name"
          },
          "PortNo": {
              "type": "string",
              "description": "Returns Port Number."
          },
          "EnableGroupUserImport": {
              "type": "boolean",
              "description": "Returns true if import users from the group was enabled."
          }
      }
    },
    "ApiUpdateWindowsADSettings": {
      "required": [
        "Username",
        "Password",
        "LdapURL",
        "EnableSsl",
        "DistinguishedName",
        "PortNo"
      ],
      "type": "object",
      "properties": {
        "Username": {
          "type": "string",
          "description": "Specify the user name."
        },
        "Password": {
          "type": "string",
          "description": "Specify the password"
        },
        "LdapURL": {
          "type": "string",
          "description": "Specify the Ldap url."
        },
        "EnableSsl": {
          "type": "string",
          "description": "Specify true to enable SSL."
        },
        "DistinguishedName": {
          "type": "string",
          "description": "Specify the distinguished name."
        },
        "PortNo": {
          "type": "string",
          "description": "Specify the port no."
        },
        "EnableGroupUserImport": {
          "type": "boolean",
          "description": "Specify true to enable import users from the group.\n\n**Note:** By default, the value is true."
        }
      }
    },
    "ApiGetLinkedDatasourceDashboards": {
      "type": "array",
      "description": "Linked dashboard details list.",
      "items": {
          "$ref": "#/definitions/GetLinkedDatasourceDashboards"
      }
    },
    "GetLinkedDatasourceDashboards": {
      "type": "object",
      "description": "Linked dashboard details.",
      "additionalProperties": false,
      "properties": {
        "DashboardName": {
          "type": "string",
          "description": "Returns the linked dashboard name."
        },
        "CategoryName": {
          "type": "string",
          "description": "Returns the dashboard category name."
        },
        "CreatedByDisplayName": {
          "type": "string",
          "description": "Specifies the display name of the user who created the item."
        },
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator.",
          "format": "int32"
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of dashboard in date format.",
          "format": "datetime"
        },
        "CanAccess": {
          "type": "string",
          "description": "Returns true if the user has access to the dashboard."
        }
      }
    },
    "ApiGetActivityLogs":{
      "type": "object",
      "properties":{
          "Id": {
              "type": "string",
              "description": "ID of the activity."
          },
          "ActivityModule": {
              "type": "string",
              "description": "Name of the module in which the activity was performed."
          },
          "Activity": {
              "type": "string",
              "description": "Type of activity which is performed."
          },
          "OldValue": {
              "type": "string",
              "description": "Specifies the value before update."
          },
          "NewValue":{
              "type": "string",
              "description": "Specifies the value after update."
          },
          "ModifiedById":{
              "type": "integer",
              "description": "Specifies the ID of the user who modified this item.",
              "format":"int32"
          },
          "ModifiedBy":{
              "type": "string",
              "description": "Specifies the name of the user who modified this item."
          },
          "GroupId":{
              "type": "integer",
              "description": "ID of the group.",
              "format":"int32"
          },
          "GroupName":{
              "type": "string",
              "description": "Name of the group."
          },
          "SourceTypeId":{
            "type": "integer",
            "description": "Specifies the enum value of the source type.</br>The possible values are <code>1, 2, 3</code> \n\n **Note**: </br> <code>1</code> - Specify the Web source type </br> <code>2</code> - Specify the API source type </br> <code>3</code> - Specify the Job source type"
          },
          "SourceType":{
            "type": "string",
            "description": "Specifies the source type.</br>The possible values are <code>Web, API, Job</code>"
          },
          "ActivityStatusId":{
            "type": "integer",
            "description": "Specifies the enum value of the activity status.</br>The possible values are <code>2, 3</code> \n\n **Note**: </br> <code>2</code> - Specify the Success status </br> <code>3</code> - Specify the Fail status"
          },
          "ActivityStatus":{
            "type": "string",
            "description": "Status of the activity.</br>The possible values are <code>Success, Fail</code>"
          },
          "CreatedDate":{
              "type":"string",
              "description": "Date created of item in date format.",
              "format": "date-time"
          },
          "IsActive":{
              "type": "boolean",
              "description": "Returns true if the item is active."
          },
          "UserId":{
              "type":"integer",

              "description": "ID of the user.",
              "format": "int32"
          },
          "UserName": {
              "type": "string",
              "description":"Username of the user."
          },
          "GroupPermissionId":{
              "type": "integer",
              "description": "Specifies the ID of the group permission.",
              "format": "int32"
          },
          "CommentId":{
              "type": "integer",
              "description": "ID of the comment.",
              "format": "int32"
          },
          "URl":{
              "type": "string",
              "description":"Specifies the URL of the dashboard."
          },
          "ParentCommentId":{
              "type":"integer",
              "description": "ID of the replied comment."
          },
          "NotificationTo":{
              "type": "integer",
              "description": "ID of the user who recevies the notification.",
              "format": "int32"
          },
          "ModifiedDate":{
              "type": "string",
              "description": "Date modified of item in date format.",
              "format": "date-time"
          },
          "IsRead": {
              "type":"boolean",
              "description": "Returns true if comment was read."
          },
          "ItemId":{
              "type": "string",
              "description": "ID of the item.",
              "format": "guid"
          },
          "ItemName":{
              "type": "string",
              "description": "Name of the item."
          },
          "ItemType":{
              "type":"string",
              "description": "Type of the item."
          },
          "ItemVersionId":{
              "type": "string",
              "description": "Specifies the version ID of the item."
          },
          "ParentId":{
              "type": "string",
              "description": "Specifies the category ID."
          },
          "CategoryName":{
              "type": "string",
              "description": "Specifies the category name."
          },
          "FromCategoryId":{
              "type": "string",
              "description": "Specifies the source category ID."
          },
          "FromCategoryName":{
              "type": "string",
              "description": "Specifies the source category name."
          },
          "ToCategoryId":{
              "type": "string",
              "description": "Specifies the destination category ID"
          },
          "ToCategoryName":{
              "type": "string",
              "description": "Specifies the destination category name."
          },
          "UserPermissionId":{
              "type": "string",
              "description": "Specifies the ID of the user permission."
          },
          "ExecutedDate": {
              "type": "string",
              "description": "Schedule executed date in date format.",
              "format": "date-time"
          },
          "IsOnDemand":{
              "type": "string",
              "description": "Returns true if schedule was run on-demand."
          },
          "Description": {
              "type": "string",
              "description": "Specifies the description of the item."
          },
          "ScheduleId":{
            "type": "string",
            "description": "ID of the schedule.",
            "format": "guid"
          },
          "ScheduleName":{
              "type": "string",
              "description": "Name of the schedule."
          },
          "ExportType":{
            "type":"string",
             "description":"Export type.<br/>The possible values are <code>Excel, Pdf, Image, CSV</code>"
          },
          "PermissionAccess":{
            "type": "string",
            "description":"Specify an access type for item.<br/>The possible values are <code>Create, Read, ReadWrite, ReadWriteDelete, Download, Manage</code>"
          },
          "PermissionEntity":{
            "type": "string",
            "description": "Specify an entity of item for permission.<br/>The possible values are </br> Create - <code>AllCategories, AllDashboards, DashboardsInCategory, AllDataSources, AllSchedules, AllGroups</code> </br> Read, ReadWrite, ReadWriteDelete - <code>AllCategories, SpecificCategory, AllDashboards, DashboardsInCategory, SpecificDashboard, AllDataSources, SpecificDataSource, AllSchedules, SpecificSchedule</code> </br> Download - <code>AllDashboards, DashboardsInCategory, SpecificDashboard</code> </br> Manage - <code>AllPermissions, SpecificPermissions, AllSettings, SpecificSettings, SpecificGroup, UserAllGroups</code>"
          }    
      }
  },
  "ApiGetGroupActivityLogs":{
      "type": "object",
      "properties":{
          "Id": {
              "type": "string",
              "description": "ID of the activity."
          },
          "Activity": {
              "type": "string",
              "description": "Type of activity which is performed."
          },
          "OldValue": {
              "type": "string",
              "description": "Specifies the value before update."
          },
          "NewValue":{
              "type": "string",
              "description": "Specifies the value after update."
          },
          "ModifiedById":{
            "type": "integer",
            "description": "Specifies the ID of the user who modified this item.",
            "format":"int32"
          },
          "ModifiedBy":{
            "type": "string",
            "description": "Specifies the name of the user who modified this item."
          },
          "GroupId":{
              "type": "integer",
              "description": "ID of the group.",
              "format":"int32"
          },
          "GroupName":{
              "type": "string",
              "description": "Name of the group."
          },
          "SourceTypeId":{
            "type": "integer",
            "description": "Specifies the enum value of the source type.</br>The possible values are <code>1, 2, 3</code> \n\n **Note**: </br> <code>1</code> - Specify the Web source type </br> <code>2</code> - Specify the API source type </br> <code>3</code> - Specify the Job source type"
          },
          "SourceType":{
            "type": "string",
            "description": "Specifies the source type.</br>The possible values are <code>Web, API, Job</code>"
          },
          "ActivityStatusId":{
            "type": "integer",
            "description": "Specifies the enum value of the activity status.</br>The possible values are <code>2, 3</code> \n\n **Note**: </br> <code>2</code> - Specify the Success status </br> <code>3</code> - Specify the Fail status"
          },
          "ActivityStatus":{
            "type": "string",
            "description": "Status of the activity.</br>The possible values are <code>Success, Fail</code>"
          },
          "CreatedDate":{
              "type":"string",
              "description": "Date created of item in date format.",
              "format": "date-time"
          },
          "IsActive":{
              "type": "boolean",
              "description": "Returns true if the item is active."
          }
      }
  },
  "ApiGetGrouppermissionActivityLogs":{
      "type":"object",
      "properties":{
           "Id": {
              "type": "string",
              "description": "ID of the activity."
          },
          "Activity": {
              "type": "string",
              "description": "Type of activity which is performed."
          },
          "ModifiedById":{
            "type": "integer",
            "description": "Specifies the ID of the user who modified this item.",
            "format":"int32"
          },
          "ModifiedBy":{
            "type": "string",
            "description": "Specifies the name of the user who modified this item."
          },
          "GroupId":{
              "type": "integer",
              "description": "ID of the group.",
              "format":"int32"
          },
          "GroupName":{
              "type": "string",
              "description": "Name of the group."
          },
          "CreatedDate":{
              "type":"string",
              "description": "Date created of item in date format.",
              "format": "date-time"
          },
          "IsActive":{
              "type": "boolean",
              "description": "Returns true if the item is active."
          },
          "PermissionAccess":{
            "type": "string",
            "description":"Specify an access type for item.<br/>The possible values are <code>Create, Read, ReadWrite, ReadWriteDelete, Download, Manage</code>"
          },
          "PermissionEntity":{
            "type": "string",
            "description": "Specify an entity of item for permission.<br/>The possible values are </br> Create - <code>AllCategories, AllDashboards, DashboardsInCategory, AllDataSources, AllSchedules, AllGroups</code> </br> Read, ReadWrite, ReadWriteDelete - <code>AllCategories, SpecificCategory, AllDashboards, DashboardsInCategory, SpecificDashboard, AllDataSources, SpecificDataSource, AllSchedules, SpecificSchedule</code> </br> Download - <code>AllDashboards, DashboardsInCategory, SpecificDashboard</code> </br> Manage - <code>AllPermissions, SpecificPermissions, AllSettings, SpecificSettings, SpecificGroup, UserAllGroups</code>"
          },
          "GroupPermissionId":{
              "type": "integer",
              "description": "Specifies the ID of the group permission.",
              "format": "int32"
          }     
      }
  },
  "ApiGetUserActivityLogs":{
      "type": "object",
      "properties":{
          "Id": {
              "type": "string",
              "description": "ID of the activity."
          },
          "Activity": {
              "type": "string",
              "description": "Type of activity which is performed."
          },
          "OldValue": {
              "type": "string",
              "description": "Specifies the value before update."
          },
          "NewValue":{
              "type": "string",
              "description": "Specifies the value after update."
          },
          "SourceTypeId":{
            "type": "integer",
            "description": "Specifies the enum value of the source type.</br>The possible values are <code>1, 2, 3</code> \n\n **Note**: </br> <code>1</code> - Specify the Web source type </br> <code>2</code> - Specify the API source type </br> <code>3</code> - Specify the Job source type"
          },
          "SourceType":{
            "type": "string",
            "description": "Specifies the source type.</br>The possible values are <code>Web, API, Job</code>"
          },
          "ActivityStatusId":{
            "type": "integer",
            "description": "Specifies the enum value of the activity status.</br>The possible values are <code>2, 3</code> \n\n **Note**: </br> <code>2</code> - Specify the Success status </br> <code>3</code> - Specify the Fail status"
          },
          "ActivityStatus":{
            "type": "string",
            "description": "Status of the activity.</br>The possible values are <code>Success, Fail</code>"
          },
          "CreatedDate":{
              "type":"string",
              "description": "Date created of item in date format.",
              "format": "date-time"
          },
          "IsActive":{
              "type": "boolean",
              "description": "Returns true if the item is active."
          },
          "UserId":{
              "type":"integer",
              "description": "ID of the user.",
              "format": "int32"
          },
          "ModifiedById":{
            "type": "integer",
            "description": "Specifies the ID of the user who modified this item.",
            "format":"int32"
          },
          "ModifiedBy":{
            "type": "string",
            "description": "Specifies the name of the user who modified this item."
          }
      }
  },
  "ApiGetUserPermissionActivityLogs":{
      "type": "object",
      "properties":{
          "Id": {
              "type": "string",
              "description": "ID of the activity."
          },
          "Activity": {
              "type": "string",
              "description": "Type of activity which is performed."
          },
          "ModifiedById":{
              "type": "integer",
              "description": "Specifies the user ID of the item modifier.",
              "format":"int32"
          },
          "ModifiedBy":{
              "type": "string",
              "description": "Specifies the user name of the item modifier."
          },
          "UserPermissionId":{
              "type": "string",
              "description": "Specifies the ID of the user permission."
          },
          "ItemId":{
              "type": "string",
              "description": "ID of the item.",
              "format": "guid"
          },
          "CreatedDate":{
              "type":"string",
              "description": "Date created of item in date format.",
              "format": "date-time"
          },
          "IsActive":{
              "type": "boolean",
              "description": "Returns true if the item is active."
          },
          "UserId":{
              "type":"integer",
              "description": "ID of the user.",
              "format": "int32"
          },
          "PermissionAccess":{
              "type": "string",
              "description":"Specify an access type for item.<br/>The possible values are <code>Create, Read, ReadWrite, ReadWriteDelete, Download, Manage</code>"
          },
          "PermissionEntity":{
              "type": "string",
              "description": "Specify an entity of item for permission.<br/>The possible values are </br> Create - <code>AllCategories, AllDashboards, DashboardsInCategory, AllDataSources, AllSchedules, AllGroups</code> </br> Read, ReadWrite, ReadWriteDelete - <code>AllCategories, SpecificCategory, AllDashboards, DashboardsInCategory, SpecificDashboard, AllDataSources, SpecificDataSource, AllSchedules, SpecificSchedule</code> </br> Download - <code>AllDashboards, DashboardsInCategory, SpecificDashboard</code> </br> Manage - <code>AllPermissions, SpecificPermissions, AllSettings, SpecificSettings, SpecificGroup, UserAllGroups</code>"
          }
      }
  },
  "ApiGetCommentActivityLogs":{
      "type":"object",
      "properties":{
          "Id": {
              "type": "string",
              "description": "ID of the activity."
          },
          "Activity": {
              "type": "string",
              "description": "Type of activity which is performed."
          },
          "ModifiedById":{
              "type": "integer",
              "description": "Specifies the user ID of the item modifier.",
              "format":"int32"
          },
          "ModifiedBy":{
              "type": "string",
              "description": "Specifies the user name of the item modifier."
          },
          "CommentId":{
              "type": "integer",
              "description": "ID of the comment.",
              "format": "int32"
          },
          "ParentCommentId":{
              "type":"integer",
              "description": "ID of the replied comment."
          },
          "NotificationTo":{
              "type": "integer",
              "description": "ID of the user who recevies the notification.",
              "format": "int32"
          },
          "IsRead": {
              "type":"boolean",
              "description": "Returns true if comment was read."
          },
          "ModifiedDate":{
              "type": "string",
              "description": "Date modified of item in date format.",
              "format": "date-time"
          },
          "Description": {
              "type": "string",
              "description": "Specifies the description of the item."
          },
          "IsActive":{
              "type": "boolean",
              "description": "Returns true if the item is active."
          }
      }
  },
  "ApiGetScheduleActivityLogs":{
    "type":"object",
      "properties":{
      "Id": {
          "type": "string",
          "description": "ID of the activity."
      },
      "Activity": {
          "type": "string",
          "description": "Type of activity which is performed."
      },
      "ScheduleId":{
          "type": "string",
          "description": "ID of the schedule.",
          "format": "guid"
      },
      "ItemId":{
          "type": "string",
          "description": "ID of the item.",
          "format": "guid"
      },
      "ItemType":{
          "type":"string",
          "description": "Type of the item."
      },
      "ExecutedDate": {
          "type": "string",
          "description": "Schedule executed date in date format.",
          "format": "date-time"
      },
      "IsOnDemand":{
          "type": "string",
          "description": "Returns true if schedule was run on-demand."
      },
      "IsActive":{
          "type": "boolean",
          "description": "Returns true if the item is active."
      },
      "ScheduleName":{
          "type": "string",
          "description": "Name of the schedule."
      },
      "ExportType":{
          "type":"string",
           "description":"Export type. <br/>The possible values are <code>Excel, Pdf, Image, CSV</code>"
      }
    }
  },
  "ApiGetSystemActivityLogs":{
    "type":"object",
      "properties":{
      "Id": {
          "type": "string",
          "description": "ID of the activity."
      },
      "Activity": {
          "type": "string",
          "description": "Type of activity which is performed."
      },
      "OldValue": {
          "type": "string",
          "description": "Specifies the value before update."
      },
      "NewValue":{
          "type": "string",
          "description": "Specifies the value after update."
      },
      "ModifiedById":{
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format":"int32"
      },
      "ActivityStatus":{
        "type": "string",
        "description": "Status of the activity.</br>The possible values are <code>Success, Fail</code>"
      },
      "CreatedDate":{
          "type":"string",
          "description": "Date created of item in date format.",
          "format": "date-time"
      },
      "IsActive":{
          "type": "boolean",
          "description": "Returns true if the item is active."
      },
      "SettingName":
      {
          "type": "string",
          "description": "Specifies the description of the setting."
      }
    }
   },
  "ApiGetitemActivityLogs":{
      "type": "object",
      "properties":{
          "Id": {
              "type": "string",
              "description": "ID of the activity."
          },
          "Activity": {
              "type": "string",
              "description": "Type of activity which is performed."
          },
          "ModifiedById":{
              "type": "integer",
              "description": "Specifies the user ID of the item modifier.",
              "format":"int32"
          },
          "ModifiedBy":{
              "type": "string",
              "description": "Specifies the user name of the item modifier."
          },
          "SourceTypeId":{
            "type": "integer",
            "description": "Specifies the enum value of the source type.</br>The possible values are <code>1, 2, 3</code> \n\n **Note**: </br> <code>1</code> - Specify the Web source type </br> <code>2</code> - Specify the API source type </br> <code>3</code> - Specify the Job source type"
          },
          "SourceType":{
            "type": "string",
            "description": "Specifies the source type.</br>The possible values are <code>Web, API, Job</code>"
          },
          "ItemId":{
              "type": "string",
              "description": "ID of the item.",
              "format": "guid"
          },
          "ItemName":{
              "type": "string",
              "description": "Name of the item."
          },
          "ItemType":{
              "type":"string",
              "description": "Type of the item."
          },
          "ItemVersionId":{
              "type": "string",
              "description": "Specifies the version ID of the item."
          },
          "ParentId":{
              "type": "string",
              "description": "Specifies the category ID."
          },
          "CategoryName":{
              "type": "string",
              "description": "Specifies the category name."
          },
          "FromCategoryId":{
              "type": "string",
              "description": "Specifies the source category ID."
          },
          "FromCategoryName":{
              "type": "string",
              "description": "Specifies the source category name."
          },
          "ToCategoryId":{
              "type": "string",
              "description": "Specifies the destination category ID."
          },
          "ToCategoryName":{
              "type": "string",
              "description": "Specifies the destination category name."
          },
          "IsActive":{
              "type": "boolean",
              "description": "Returns true if the item is active."
          }
      }
    },
    "WehbooksSettings":{
      "type": "object",
      "properties":{
        "Id":{
          "type":"integer",
          "description": "ID of the webhook."
        },
        "Name":{
          "type": "string",
          "description": "Name of the wehbook."
        },
        "Event":{
          "type":"string",
          "description":"Type of the webhook event."
        },
        "ModifiedBy":{
          "type": "string",
          "description": "Name of the webhook modifier."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in string format."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns true if the webhook is active."
        }
      }
    },
    "ApiUpdateOrDeleteDatasourceColumns": {
      "type": "array",
      "description": "Update or delete data source columns details.",
      "items": {
          "$ref": "#/definitions/UpdateOrDeleteDatasourceColumns"
      }
    },
    "UpdateOrDeleteDatasourceColumns": {
      "required": [
        "DataSourceId",
        "ColumnInfo"
      ],
      "type": "object",
      "properties": {
        "DataSourceId": {
          "type": "string",
          "description": "Data source ID."
        },
        "ActionType": {
          "type": "string",
          "description": "Specifies the action to perform on the data source columns.</br>The possible value is <code>Delete</code> \n\n **Note**: </br> <code>Delete</code> - Invoke the delete API </br> Without any value - Invoke the update API </br>"
        },
        "ColumnInfo": {
          "type": "array",
          "description": "Specifies the data source column details.",
          "items": {
              "$ref": "#/definitions/ApiDatasourceColumnInfo"
          }
        }
      }
    },
    "ApiDatasourceColumnInfo":{
      "type": "object",
        "properties":{
          "Type": {
            "type": "string",
            "description":"Specifies the type of the data source column."
        },
        "TargetColumnName":{
            "type": "string",
            "description": "Specify the name of the data source column that needs to be deleted or updated."
        },
        "SourceTableName": {
          "type": "string",
          "description": "Specify the table name that needs to be updated.\n\n**Note:** This is applicable only for the update datsource columns API."
        }
      }
    },
    "UpdateOrDeleteDatasourceColumnsResponse": {
      "type": "object",
      "required": [
        "ApiStatus",
        "Status",
        "StatusMessage"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      }
    },
    "GetDataSourceColumnsApiResponse": {
      "type": "object",
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "type": "array",
          "description": "Returns data from the API.",
          "items": {
            "$ref": "#/definitions/GetDataSourceColumnsResponse"
          }
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      }
    },
    "GetDataSourceColumnsResponse": {
      "type": "object",
      "description": "Data Source columns details.",
      "additionalProperties": false,
      "properties": {
        "Name": {
          "type": "string",
            "description": "Data source column name."
        },
        "DesiredType": {
            "type": "string",
            "description": "Data source column desired type."
        },
        "DataType": {
            "type": "string",
            "description": "Data source column data type."
        },
        "DefaultDataType": {
            "type": "string",
            "description": "Data source column default data type."
        },
        "IsVisible": {
            "type": "boolean",
            "description": "Returns true, if the data source column is visible."
        }
      }
    },
    "ApiGetAuditlogsPaginatedResponse": {
      "type": "object",
      "properties": {
          "Data":{
              "type": "array",
              "description" : "Returns data from the API.",
              "items":{
                  "$ref": "#/definitions/ApiGetAuditLog"
              }
          },
          "TotalResults": {
              "type": "integer",
              "description": "Returns items count of the API request.",
              "format": "int32"
          },
          "Links": {
              "type": "array",
              "description": "Returns pagination links.",
              "items": {
                  "$ref": "#/definitions/Links"
              }
          }
      }
  },
    "ApiGetAuditLog": {
      "type": "object",
      "properties": {
      "EventTargetUserName": {
          "type": "string",
          "description": "The username of the individual targeted by the event in the activity log."
      },
      "EventTargetDisplayName": {
          "type": "string",
          "description": "The display name of the individual targeted by the event in the activity log."
      },
      "InitiatedUserName": {
          "type": "string",
          "description": "The username of the individual who initiated the event recorded in the activity log."
      },
      "InitiatedDisplayName": {
          "type": "string",
          "description": "The display name of the individual who initiated the event recorded in the activity log."
      },
      "EventDateformat": {
          "type": "string",
          "description": "The formatted string representing the date and time when the event was recorded in the activity log."
      },
      "InitiatedUserEmail": {
          "type": "string",
          "description": "The email address of the user who initiated the event recorded in the activity log."
      },
      "TargetUserEmail": {
          "type": "string",
          "description": "The email address of the individual targeted by the event in the activity log."
      },
      "EventDate": {
          "type": "string",
          "description": "The date and time when the event was recorded in the activity log."
      },
      "EventCategory": {
          "type": "integer",
          "description": "The numerical identifier representing the category of the event recorded in the activity log."
      },
      "EventType": {
          "type": "integer",
          "description": "The numerical identifier representing the specific type of event recorded in the activity log."
      },
      "AppSource": {
          "type": "string",
          "description": "The source application from which the event was generated in the activity log."
      },
      "AppType": {
          "type": "string",
          "description": "The type of application (e.g., API, Web) from which the event was generated in the activity log."
      },
      "EventCategoryString": {
          "type": "string",
          "description": "The string representation of the event category in the activity log."
      },
      "EventTypeString": {
          "type": "string",
          "description": "The string representation of the event type in the activity log."
      },
      "UserLogDetail": {
          "type": "object",
          "description": "Details about the user activity that was logged, including the IP address and user agent.",
          "allOf": [
          {
              "$ref": "#/definitions/UserLogDetails"
          }
          ]
      },
      "Summary": {
          "type": "string",
          "description": "A brief summary or description of the activity recorded in the log."
      }
      }
  },
  "UserLogDetails": {
      "type": "object",
      "properties": {
      "IpAddress": {
          "type": "string",
          "description": "The IP address from which the activity was logged."
      },
      "EventLog": {
          "type": "object",
          "description": "Details of the event associated with the logged activity, including any changes made.",
          "allOf": [
          {
              "$ref": "#/definitions/EventLog"
          }
          ]
      },
      "UserAgent": {
          "type": "string",
          "description": "The user agent string that identifies the device and browser used during the logged activity."
      }
      }
  },
  "EventLog": {
      "type": "object",
      "properties": {
      "ChangeLogCollection": {
          "type": "array",
          "description": "A collection of change logs that detail the specific changes made during the logged event.",
          "items": {
          "$ref": "#/definitions/ChangeLogCollection"
          }
      }
      }
  },
  "ChangeLogCollection": {
      "type": "object",
      "properties": {
      "ChangedItem": {
          "type": "string",
          "description": "The name of the item that was changed during the logged event."
      },
      "ChangeLog": {
          "type": "array",
          "description": "A list of specific changes that were made to the `ChangedItem` during the logged event.",
          "items": {
          "$ref": "#/definitions/ChangeLog"
          }
      }
      }
  },
  "ChangeLog": {
      "type": "object",
      "properties": {
      "ChangedItem": {
          "type": "string",
          "description": "The specific item that was altered during the logged event."
      },
      "From": {
          "type": "string",
          "description": "The original value of the item before the change was made."
      },
      "To": {
          "type": "string",
          "description": "The new value of the item after the change was made."
      }
      }
    }
  },
  "parameters": {},
  "responses": {}
}