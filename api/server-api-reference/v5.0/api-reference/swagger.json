{
    "openapi": "3.0.1",
    "info": {
        "title": "API Reference",
        "description": {
            "$ref": "./../../common/api-reference/introduction.md"
        },
        "version": "5.0"
    },
    "servers": [
        {
            "url": "Self-Hosted Server: https://{yourdomain}/bi/api/site/<site_identifier>"
        },
        {
            "url": "Bold BI Cloud Server: https://{yourdomain}/bi/api/"
        }
    ],
    "security": [
        {
            "bearer <token>": []
        }
    ],
    "tags": [
        {
            "name": "Interact with our REST API",
            "description": {
                "$ref": "./helperswagger.json#/tryitnow/tryitnowdescription"
            }
        },
        {
            "name": "Password Authentication",
            "description": {
                "$ref": "./../../common/api-reference/helperswagger.json#/authentication/getauthenticationdescription"
            }
        },
        {
            "name": "Embed Secret Authentication",
            "description": {
                "$ref": "./../../common/api-reference/helperswagger.json#/authentication/getauthenticationdescription"
            }
        },
        {
            "name": "Users",
            "description": {
                "$ref": "./../../common/api-reference/helperswagger.json#/userdescription/getusersdescription"
            }
        },
        {
            "name": "Groups",
            "description": {
                "$ref": "./../../common/api-reference/helperswagger.json#/groupdescription/getgroupsdescription"
            }
        },
        {
          "name": "Permission",
          "description": {
            "$ref": "./../../common/api-reference/helperswagger.json#/permissiondescription/getpermissiondescription"
          }
        },
        {
          "name": "Category",
          "description": {
            "$ref": "./../../common/api-reference/helperswagger.json#/categorydescription/getcategorydescription"
          }
        },
        {
            "name": "Dashboard",
            "description": {
                "$ref": "./../../common/api-reference/helperswagger.json#/dashboarddescription/getdashboarddescription"
            }
        },
        {
            "name": "Download Dashboard",
            "description": {
                "$ref": "./../../common/api-reference/helperswagger.json#/downloaddashboarddescription/getdownloaddashboarddescription"
            }
        },
        {
            "name": "Upload Dashboard",
            "description": {
                "$ref": "./../../common/api-reference/helperswagger.json#/uploaddashboarddescription/getuploaddashboarddescription"
            }
        },
        {
            "name": "Draft Dashboard",
            "description": {
                "$ref": "./../../common/api-reference/helperswagger.json#/draftdashboarddescription/getdraftdashboarddescription"
            }
        },
        {
            "name": "Dashboard Views",
            "description": {
                "$ref": "./../../common/api-reference/helperswagger.json#/dashbaordviewsdescription/getdashbaordviewsdescription"
            }
        },
        {
            "name": "DataSource",
            "description": {
                "$ref": "./../../common/api-reference/helperswagger.json#/datasourcedescription/getdatasourcedescription"
            }
        },
        {
          "name": "Items",
          "description": {
            "$ref": "./../../common/api-reference/helperswagger.json#/itemdescription/getitemdescription"
          }
        },
        {
            "name": "Slideshow",
            "description": {
                "$ref": "./../../common/api-reference/helperswagger.json#/slideshowdescription/getslideshowdescription"
            }
        },
        {
            "name": "Schedule",
            "description": {
                "$ref": "./../../common/api-reference/helperswagger.json#/scheduledescription/getscheduledescription"
            }
        },
        {
          "name": "Pinboard",
          "description": {
            "$ref": "./../../common/api-reference/helperswagger.json#/pinboarddescription/getpinboarddescription"
          }
        },
        {
          "name": "Publish to another site",
          "description": {
            "$ref": "./../../common/api-reference/helperswagger.json#/publishdescription/getpublishdescription"
          }
        },
        {
          "name": "Attributes",
          "description": {
            "$ref": "./../../common/api-reference/helperswagger.json#/attributesdescription/getattributesdescription"
          }
        },
        {
          "name": "Settings",
          "description": {
            "$ref": "./../../common/api-reference/helperswagger.json#/settingsdescription/getsettingsdescription"
          }
        },
        {
            "name": "User Profile",
            "description": {
                "$ref": "./../../common/api-reference/helperswagger.json#/userprofiledescription/getuserprofiledescription"
            }
        },
        {
            "name": "Audit Logs",
            "description":{
                "$ref": "./../../common/api-reference/helperswagger.json#/activitylogsdescription/getactivitylogsdescription"
            }
        },
        {
            "name": "Webhooks",
            "description":{
                "$ref":"./../../common/api-reference/helperswagger.json#/webhooksdescription/getwebhooksdescription"
            }
        }
    ],
    "paths": {
        "/token": {
            "post": {
                "tags": [
                    "Password Authentication"
                ],
                "summary": "Authenticate User",
                "description": "Authenticate with a user password.",
                "operationId": "PasswordAuthentication",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordAuth"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "User logged in successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Email address is empty.",
                        "content": {}
                    },
                    "404": {
                        "description": "User detail not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    }
                }
            }
        },
        "/token ": {
            "post": {
                "tags": [
                    "Embed Secret Authentication"
                ],
                "summary": "Authenticate User",
                "description": "Authenticate user using embed secret of the site.",
                "operationId": "EmbedSecretAuthentication",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmbedSecretAuth"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "User logged in successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Email address is empty.",
                        "content": {}
                    },
                    "404": {
                        "description": "User detail not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/users": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Add User",
                "description": "Adds the new user.",
                "operationId": "Users_AddUser",
                "requestBody": {
                    "description": "Detail of the user",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiUserAdd"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The user was created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "Email address already exists.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to add user.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "userDetail"
            },
             "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get Users",
                "description": "Retrieves the list of user details.",
                "operationId": "Users_GetUsers",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage number",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  1 ",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage size",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  10 ",
                        "default": 25,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSearch Keyword<br />Keyword searched in <code>DisplayName, Email</code>",
                        "x-nullable": true,
                        "example": " user@gmail.com "
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
                        "x-nullable": true,
                        "example": "  + "
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user details has been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetUsersPaginatedApiResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "User list is empty.",
                        "content": {}
                    },
                    "400": {
                        "description": "Page does not exists.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/users/{user}/groups": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get User Groups",
                "description": "Retrieves the list of group details of the particular user.",
                "operationId": "Users_GetGroupsOfUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "User ID or Email address of the user.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage number",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  1 ",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage size",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  10 ",
                        "default": 25,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Id , Name </code>",
                        "x-nullable": true,
                        "example": " 9 "
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
                        "x-nullable": true,
                        "example": "  + "
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user's groups has been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetUserGroupsPaginatedApiResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Group list empty.",
                        "content": {}
                    },
                    "400": {
                      "description": "Page does not exists.",
                      "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "User detail not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to get group details.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/csv-users/download-template": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Download CSV Template",
                "description": "Download the CSV template to import the CSV users.",
                "operationId": "Users_DownloadCsvTemplate",
                "responses": {
                    "200": {
                        "description": "CSV template was downloaded successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiDownloadCsvTemplate"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to download CSV template file.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/csv-users": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Add CSV User",
                "description": "Add the list of users using the CSV file.",
                "operationId": "Users_CsvUserImport",
                "requestBody": {
                    "description": "Details passed to add the CSV of users.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiCsvUserImportRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "User(s) created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCsvUserImportResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to add CSV users.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiCsvUserImportRequest"
            }
        },
        "/v5.0/user/import/job/{jobId}": {
            "get": {
              "tags": [
                "Users"
              ],
              "summary": "Get Bulk import job Details",
              "description": "Retrieve the bulk import job detail of specified job id",
              "operationId": "Users_GetBulkImportJobDetail",
              "parameters": [
                {
                  "name": "jobId",
                  "in": "path",
                  "description": "job Id of bulk import result",
                  "required": true,
                  "style": "simple",
                  "explode": false,
                  "schema": {
                    "type": "string",
                    "nullable": false
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Job detail retrieved created successfully.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ApiBulkImportJobDetailsResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "Access denied.",
                  "content": {}
                },
                "405": {
                  "description": "Request type was not GET.",
                  "content": {}
                },
                "417": {
                  "description": "Failed to get csv import job details.",
                  "content": {}
                }
              }
            }
          },
          "/v5.0/user/import/job/{jobId}/failed-import": {
            "get": {
              "tags": [
                "Users"
              ],
              "summary": "Get failed import users list of specific job id",
              "description": "Retrieve all the failed import users of specified job id",
              "operationId": "Users_GetFailedImportUsersList",
              "parameters": [
                {
                  "name": "jobId",
                  "in": "path",
                  "description": "job Id of bulk import result",
                  "required": true,
                  "style": "simple",
                  "explode": false,
                  "schema": {
                    "type": "string",
                    "nullable": false
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Failed import users detail retrieved created successfully.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ApiFailedImportUsersDetailResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "Access denied.",
                  "content": {}
                },
                "405": {
                  "description": "Request type was not GET.",
                  "content": {}
                },
                "417": {
                  "description": "Failed to get csv failed import user details.",
                  "content": {}
                }
              }
            }
          },
        "/v5.0/users/{user}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a User by Email or Username",
                "description": "Retrieves the particular user detail.",
                "operationId": "Users_GetUserDetail",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "Username or email address of the user",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User detail was retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUserDetailV4"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "User detail not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to retrieve user detail.",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update User",
                "description": "Updates the particular user detail.",
                "operationId": "Users_EditUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "Username or email address of the user",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "Detail of the user.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiUserEdit"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The user was modified successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "User detail not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "500": {
                        "description": "Failed to update user profile detail.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "userDetail"
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete User",
                "description": "Deletes the particular user.",
                "operationId": "Users_DeleteUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "Username or email address of the user",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content.",
                        "content": {}
                    },
                    "400": {
                        "description": "Email address is empty.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "User detail not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not DELETE.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to delete user.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/groups": {
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Add Groups",
                "description": "Adds the new group to group the users.",
                "operationId": "Groups_AddGroup",
                "requestBody": {
                    "description": "Detail of the group.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiGroupAdd"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Group was created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "Group name already exists.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to add group.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "groupDetail"
            },
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Get Groups",
                "description": "Retrieves the list of group details.",
                "operationId": "Groups_GetGroups",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage number",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  1 ",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage size",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  10 ",
                        "default": 25,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Id ,Name</code>",
                        "x-nullable": true,
                        "example": " AnalyticsTeam "
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
                        "x-nullable": true,
                        "example": "  + "
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of groups has been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetGroupsPaginatedApiResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Group list is empty.",
                        "content": {}
                    },
                    "400": {
                        "description": "Page does not exists.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/groups/{id}": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Get Group by Id",
                "description": "Retrieves the particular group detail.",
                "operationId": "Groups_GetGroupDetail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the group.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Group detail was retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGroup"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Group detail was not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to get group detail.",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "Groups"
                ],
                "summary": "Update Group",
                "description": "Updates the particular group detail.",
                "operationId": "Groups_EditGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the group.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "Detail of the group.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiGroupEdit"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Group was modified successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Group detail was not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "Group name already exists.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to update group ",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "groupDetail"
            },
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Delete Group",
                "description": "Deletes the particular group.",
                "operationId": "Groups_DeleteGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the group.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not DELETE.",
                        "content": {}
                    },
                    "406": {
                        "description": "Invalid Group ID.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to delete the group.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/groups/azure-active-directory/import": {
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Add Azure AD Groups",
                "description": "Import the group(s) from Azure Active Directory.",
                "operationId": "Groups_AddAzureADGroup",
                "requestBody": {
                    "description": "Name of the group.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiAzureADGroup"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Group has been imported successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAzureGroupImportResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "412": {
                        "description": "Azure AD details are not configured.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "groupName"
            }
        },
        "/v5.0/groups/{id}/users": {
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Add User(s) to Group",
                "description": "Adds the list of users to the particular group.",
                "operationId": "Groups_AddUserToGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "User(s) added to the group.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiGroupUsers"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "User(s) added to the group successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Group detail was not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to add user in to group.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiGroupUsers"
            },
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Get Group Users",
                "description": "Retrieves the list of user details of a particular group.",
                "operationId": "Groups_GetUsersFromGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the group.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": false
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage number",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  1 ",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage size",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  10 ",
                        "default": 25,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Email, DisplayName </code>",
                        "x-nullable": true,
                        "example": " test@boldbi.com "
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
                        "x-nullable": true,
                        "example": "  + "
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of group's users has been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetGroupUsersPaginatedApiResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "User list is empty.",
                        "content": {}
                    },
                    "400": {
                        "description": "Page does not exists.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Group detail was not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "406": {
                        "description": "Invalid Group ID.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to check whether the group is active or not.",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Delete Group User",
                "description": "Deletes the list of users from the particular group.",
                "operationId": "Groups_DeleteUserFromGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "User(s) removed from the group.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiGroupUsers"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No content.",
                        "content": {}
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Group detail was not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not DELETE.",
                        "content": {}
                    },
                    "406": {
                        "description": "Invalid group ID.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to delete user from group.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiGroupUsers"
            }
        },
        "/v5.0/permissions/users": {
          "post": {
            "tags": [
              "Permission"
            ],
            "summary": "Add User Permission",
            "description": "Administrators can add a new permission to the specific user by providing permission details.<br /><br />To add a specific permission, you must provide the item ID (Category Id, Schedule Id, and Dashboard Id) for the permission entity (SpecificCategory, SpecificSchedule, and SpecificDashboard).",
            "operationId": "Permission_AddUserPermission",
            "requestBody": {
              "description": "Details about the permissions passed will be added to specified user id.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiUserPermissionAdd"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "User permission has been added successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete.",
                "content": {}
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "404": {
                "description": "User detail  not found.",
                "content": {}
              },
              "405": {
                "description": "Request type was not POST.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              },
              "409": {
                "description": "Permission already exists.",
                "content": {}
              },
              "417": {
                "description": "Failed to add user permission.",
                "content": {}
              }
            },
            "x-codegen-request-body-name": "apiUserPermissionAdd"
          }
        },
        "/v5.0/permissions/users/{id}": {
            "get": {
                "tags": [
                  "Permission"
                ],
                "summary": "Get User Permissions",
                "description": "Administrators can get the list of permissions of the specific user.",
                "operationId": "Permission_GetUserPermission",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "description": "User ID.",
                    "required": true,
                    "style": "simple",
                    "explode": false,
                    "schema": {
                      "type": "integer",
                      "format": "int32",
                      "nullable": false
                    }
                  },
                  {
                      "name": "page",
                      "in": "query",
                      "required": false,
                      "description": "<br />\nPage number",
                      "x-nullable": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      },
                      "example": "  1 ",
                      "default": 1,
                      "minimum": 1
                  },
                  {
                      "name": "page_size",
                      "in": "query",
                      "required": false,
                      "description": "<br />\nPage size",
                      "x-nullable": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      },
                      "example": "  10 ",
                      "default": 10,
                      "minimum": 1,
                      "maximum": 100
                  },
                  {
                      "type": "string",
                      "name": "sort",
                      "in": "query",
                      "required": false,
                      "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
                      "x-nullable": true,
                      "example": "  + "
                  }
                ],
                "responses": {
                  "200": {
                    "description": "List of user permissions has been retrieved successfully.",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ApiGetUsersPermissionPaginatedApiResponse"
                          }
                        }
                      }
                    }
                  },
                  "204": {
                    "description": "Permission list is empty.",
                    "content": {}
                  },
                  "400": {
                    "description": "Invalid user ID.",
                    "content": {}
                  },
                  "401": {
                    "description": "Access denied.",
                    "content": {}
                  },
                  "404": {
                    "description": "User detail not found.",
                    "content": {}
                  },
                  "405": {
                    "description": "Request type was not GET.",
                    "content": {}
                  }
                }
              },
          "delete": {
            "tags": [
              "Permission"
            ],
            "summary": "Delete User Permission",
            "description": "Administrators can delete the specific user's permission.",
            "operationId": "Permission_DeleteUserPermission",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "User permission ID.",
                "required": true,
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": false
                }
              }
            ],
            "responses": {
              "204": {
                "description": "No content.",
                "content": {}
              },
              "400": {
                "description": "Permission id is empty.",
                "content": {}
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "405": {
                "description": "Request type was not DELETE.",
                "content": {}
              },
              "417": {
                "description": "Failed to remove permission.",
                "content": {}
              }
            }
          }
        },
        "/v5.0/permissions/groups": {
          "post": {
            "tags": [
              "Permission"
            ],
            "summary": "Add Group Permission",
            "description": "Administrators can add a new permission to the specific group by providing permission details.<br /><br />To add a specific permission, you must provide the item ID (Category Id, Schedule Id, and Dashboard Id) for the permission entity (SpecificCategory, SpecificSchedule, and SpecificDashboard).",
            "operationId": "Permission_AddGroupPermission",
            "requestBody": {
              "description": "Details about the permissions passed will be added to specified group id.",
              "content": {
                "application/json": {
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiGroupPermissionAdd"
                        }
                    }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Group permission was created successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/BulkGroupPermission"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete.",
                "content": {}
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "404": {
                "description": "Group  detail  not found.",
                "content": {}
              },
              "405": {
                "description": "Request type was not POST.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              },
              "409": {
                "description": "Permission already exists.",
                "content": {}
              },
              "417": {
                "description": "Failed to add group permission.",
                "content": {}
              }
            },
            "x-codegen-request-body-name": "apiGroupPermissionAdd"
          }
        },
        "/v5.0/permissions/groups/{id}": {
            "get": {
                "tags": [
                  "Permission"
                ],
                "summary": "Get Group Permissions",
                "description": "Administrators can get the list of permissions of the specific group.",
                "operationId": "Permission_GetGroupPermission",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Group ID.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                          "type": "integer",
                          "format": "int32",
                          "nullable": false
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage number",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  1 ",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage size",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  10 ",
                        "default": 10,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
                        "x-nullable": true,
                        "example": "  + "
                    }
                ],
                "responses": {
                  "200": {
                    "description": "List of group permissions has been retrieved successfully.",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ApiGetGroupsPermissionPaginatedApiResponse"
                          }
                        }
                      }
                    }
                  },
                  "204": {
                    "description": "Permission list is empty.",
                    "content": {}
                  },
                  "401": {
                    "description": "Access denied.",
                    "content": {}
                  },
                  "404": {
                    "description": "Group detail was not found.",
                    "content": {}
                  },
                  "405": {
                    "description": "Request type was not GET.",
                    "content": {}
                  },
                  "406": {
                    "description": "Invalid group ID.",
                    "content": {}
                  }
                }
              },
          "delete": {
            "tags": [
              "Permission"
            ],
            "summary": "Delete Group Permission",
            "description": "Administrators can delete the specific group permission.",
            "operationId": "Permission_DeleteGroupPermission",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Group permission ID.",
                "required": true,
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": false
                }
              }
            ],
            "responses": {
              "204": {
                "description": "No content.",
                "content": {}
              },
              "400": {
                "description": "Permission id is empty.",
                "content": {}
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "405": {
                "description": "Request type was not DELETE.",
                "content": {}
              },
              "417": {
                "description": "Failed to delete group permission.",
                "content": {}
              }
            }
          }
 },
        "/v5.0/categories": {
            "post": {
                "tags": [
                    "Category"
                ],
                "summary": "Add Category",
                "description": "Users who have a create access for categories, can add a new category.",
                "operationId": "Category_AddCategory",
                "requestBody": {
                    "description": "Details about the passed category will be added.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiCategoryAdd"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The category was created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "Item name already exists.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to add category.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiCategoryAdd"
            },
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Get Categories",
                "description": "Users who have created the categories can view the category lists.",
                "operationId": "Category_GetCategories",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage number",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  1 ",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage size",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  10 ",
                        "default": 25,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, and CreatedByDisplayName</code>",
                        "x-nullable": true,
                        "example": "  sales "
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
                        "x-nullable": true,
                        "example": "  + "
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of categories was retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedApiResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Items not found.",
                        "content": {}
                    },
                    "400": {
                        "description": "Page does not exists.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "403": {
                        "description": "Access denied for the item.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "Category"
                ],
                "summary": "Update Category",
                "description": "Users who have write access for categories can update an existing category.",
                "operationId": "Category_UpdateCategory",
                "requestBody": {
                    "description": "Details about the passed category will be updated to the specified category id.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiCategoryUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The category was modified successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "Item name already exists.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to update category.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiCategoryUpdate"
            }
        },
        "/v5.0/categories/{categoryId}": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Get Category by Id",
                "description": "Users who created the category can view the category details.",
                "operationId": "Category_GetCategory",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category detail was retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSpecifiedItemDetail"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid item ID.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": [
                    "Category"
                ],
                "summary": "Delete Category",
                "description": "Users who have delete access to the item type category can delete the item by providing the Category Id.",
                "operationId": "Category_DeleteCategory",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content.",
                        "content": {}
                    },
                    "400": {
                        "description": "Item ID is empty.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not DELETE.",
                        "content": {}
                    },
                    "412": {
                        "description": "Failed to delete because the category contains dashboards.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to delete item.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/dashboards": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get Dashboards",
                "description": "Users who have created the dashboards can view the dashboard lists.",
                "operationId": "Dashboards_GetDashboards",
                "parameters": [
                    {
                        "type": "string",
                        "name": "serverPath",
                        "in": "query",
                        "required": false,
                        "description": "<br />`\"/\"` + `\"Category name\"`",
                        "x-nullable": true,
                        "example": " /sales "
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage number",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  1 ",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage size",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  10 ",
                        "default": 25,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, CategoryName, and CreatedByDisplayName</code>",
                        "x-nullable": true,
                        "example": "  sales "
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
                        "x-nullable": true,
                        "example": "  + "
                    },
                    {
                        "name": "exclude_multitabdashboard",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nExclude Multitab dashboards.<br />Values allowed are <code>True/true, False/false</code>",
                        "x-nullable": true,
                        "schema": {
                            "type": "boolean"
                        },
                        "example": "  True "
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of dashboards was retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedApiResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Items not found.",
                        "content": {}
                    },
                    "400": {
                        "description": "Page does not exists.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/dashboards/{itemId}/copy": {
            "post": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Copy Dashboard",
                "description": "Users who have create access to the dashboard, can copy the dashboard.",
                "operationId": "Dashboards_CopyDashboard",
                "parameters": [
                    {
                        "name": "itemId",
                        "in": "path",
                        "description": "ID of the dashboard will be copied.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "Details of the dashboard passed will be copied.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiCopyDashboardRequestV4"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The dashboard has been copied successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCopyItemResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied. You do not have permission to copy the dashboard.",
                        "content": {}
                    },
                    "403": {
                        "description": "Mark as public has been restricted.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "Item name already exists.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to copy the dashboard.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiCopyDashboard"
            }
        },
        "/v5.0/dashboards/public": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get Public Dashboards",
                "description": "Retrieves the list of public dashboards for the current user.",
                "operationId": "Dashboards_GetPublicItems",
                "parameters": [
                    {
                        "name": "itemType",
                        "in": "query",
                        "description": "Item type.<br />Value allowed is <code>Dashboard</code>",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "nullable": false,
                            "x-schema": {
                                "$ref": "#/components/schemas/ItemType"
                            }
                        },
                        "x-schema": {
                            "$ref": "#/components/schemas/ItemType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of public dashboards was retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiPublicItems"
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Public item list empty.",
                        "content": {}
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to get public items.",
                        "content": {}
                    }
                }
            }
        },
        "/V5.0/dashboards/{dashboardId}/public":{
            "put": {
                "tags" : [
                    "Dashboard"
                ],
                "summary" : "Update Public Dashboard",
                "description": "Users who have access to the dashboard and the dashboards settings can update the dashboard as public.",
                "operationId": "Dashboards_UpdatePublicDashboard",
                "parameters":[
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "Dashboard ID.",
                        "required" : true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "Public value passed will be updated to the specified dashboard.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiUpdateDashboardPublicV5"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Dashboard marked public successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description" : "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {}
                    },
                    "412" : {
                        "description": "Mark as public has been restricted.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to mark dashboard as public.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/dashboards/favorite": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get Favorite Dashboards",
                "description": "Retrieves a list of favorite dashboards for the current user.",
                "operationId": "Dashboards_GetFavoriteItems",
                "responses": {
                    "200": {
                        "description": "List of favorite dashboards was retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiFavoriteitems"
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No favorite items.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to get favorite items.",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Update Favorite Dashboard",
                "description": "Users who have read access to the dashboard can update the dashboard as favorite or non-favorite.",
                "operationId": "Dashboards_UpdateFavoriteItem",
                "requestBody": {
                    "description": "Favorite value passed will be updated to the specified dashboard.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiUpdateFavorite"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Favorite dashboard was modified successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to favorite item.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiUpdateFavorite"
            }
        },
        "/v5.0/dashboards/export": {
            "post": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Export Dashboard",
                "description": "Users who have read access to the dashboard can export the dashboard to the export types (Excel, PDF, and Image) and get the exported dashboard as an array of bytes in response.<br /><br />When exporting multi-tabbed dashboard in image format, the response bytes must be saved in ZIP format.",
                "operationId": "Dashboards_ExportDashboard",
                "requestBody": {
                    "description": "Details about the dashboard passed will be exported.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiExportDashboard"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Dashboard exported successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExportDashboardResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to Export item.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiExportDashboard"
            }
        },
        "/v5.0/dashboards/{dashboardId}": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get Dashboard by Id",
                "description": "Users who have created the dashboard can view the dashboard detail.",
                "operationId": "Dashboards_GetDashboard",
                "parameters": [
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "Dashboard ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dashboard detail was retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiDashboardSpecifiedItemDetail"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Item id invalid.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied for the item.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Delete Dashboard",
                "description": "Users who have delete access to the item type dashboard can delete the item by providing the Dashboard Id.",
                "operationId": "Dashboards_DeleteDashboard",
                "parameters": [
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "Dashboard ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content.",
                        "content": {}
                    },
                    "400": {
                        "description": "Item ID is empty.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not DELETE.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to delete item.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/dashboards/{dashboardId}/widgets": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get Widgets of Dashboard",
                "description": "Users who created the dashboard can view their widgets details.",
                "operationId": "Dashboards_GetWidgets",
                "parameters": [
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "ID of the dashboard to get widget list.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of widgets was retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiGetWidget"
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Widget list is empty.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/dashboards/download/job": {
            "post": {
                "tags": [
                    "Download Dashboard"
                ],
                "summary": "Prepare Dashboard For Download",
                "description": "Initiates the download of the dashboard for users with read and download access.",
                "operationId": "Dashboards_DownloadDashboard",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiDownloadDashboard"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Download job has been initiated for the given dashboards.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Dashboard list is empty.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "The maximum number of dashboards that can be downloaded at a time is 15. Please list 15 or fewer dashboards and try again.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiDownloadDashboard"
            }
        },
        "/v5.0/dashboards/download/job/{jobId}": {
            "get": {
                "tags": [
                    "Download Dashboard"
                ],
                "summary": "Download Dashboard",
                "description": "Download the content of a dashboard file.",
                "operationId": "Dashboard_DownloadDashboardFile",
                "parameters": [
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "Download Job ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dashboard files downloaded successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiDownloadDashboardResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid job ID",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/dashboards/upload/meta": {
            "post": {
                "tags": [
                    "Upload Dashboard"
                ],
                "summary": "Get Meta Info For Dashboard",
                "description": "Retrieve meta information for the downloaded dashboard files.",
                "operationId": "Dashboards_GetMetaInfo",
                "requestBody": {
                    "description": "Dashboard file content",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiGetMetaInfo"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Metadata for the given dashboard file has been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetMetaInfoResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "File content is empty.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiGetMetaInfo"
            }
        },
        "/v5.0/dashboards/upload": {
            "post": {
                "tags": [
                    "Upload Dashboard"
                ],
                "summary": "Upload Dashboard File",
                "description": "Users who have create access to the dashboard can upload the dashboard.",
                "operationId": "Dashboards_UploadDashboard",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiUploadDashboard"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Dashboard upload started.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "File content is empty.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiUploadDashboard"
            },
            "put": {
                "tags": [
                    "Upload Dashboard"
                ],
                "summary": "Update upload Dashboard",
                "description": "Users who have the write access to the dashboard can update the dashboard.",
                "operationId": "Dashboards_UpdateUploadDashboard",
                "requestBody": {
                    "description": "Details of the dashboard passed will be updated.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiUpdateUploadDashboard"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Dashboard update started.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "ApiUpdateUploadDashboard"
            }
        },
        "/v5.0/dashboards/upload/job/{jobId}": {
            "get": {
                "tags": [
                    "Upload Dashboard"
                ],
                "summary": "Upload Dashboard Status",
                "description": "Get the status of an upload dashboard job.",
                "operationId": "Dashboard_GetUploadDashboardJobStatus",
                "parameters": [
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "Upload Job ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Upload job status retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUploadStatusResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid job ID",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/dashboards/{itemId}/move": {
            "post": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Move Dashboard",
                "description": "Moving the Dashboard from one category to another category.",
                "operationId": "Dashboards_MoveDashboard",
                "parameters": [
                    {
                        "name": "itemId",
                        "in": "path",
                        "description": "ID of the dashboard will be moved",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "The provided dashboard will be moved to another category.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiMoveDashboard"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The dashboard has been moved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMoveDashboardResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied. You don't have permission to move the dashboard.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "409": {
                        "description": "Item name already exists.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to move the dashboard.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/multi-tab": {
            "post": {   
                "tags": [
                    "Dashboard"
                ],
                "summary": "Add Multi-Tab Dashboard",
                "description": "Only users who have permission to create a dashboard can create new multi-tab dashboards within their permitted dashboards.",
                "operationId": "Dashboard_AddmultitabDashboard",
                "requestBody": {
                    "description": "Details of the dashboards passed will be added.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiAddmultitabDashboardRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Multi-tab dashboard has been added successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "409": {
                        "description": "Item name already exists.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiAddmultitabDashboard"
            }
        },
        "/v5.0/dashboards/{dashboardId}/unlist": {
            "put" : {
               "tags": [
                   "Dashboard"
               ],
               "summary" : "Update Unlisting Dashboard",
               "description" : "Users with access to the dashboard and access to manage permission can update the dashboard as unlisted.",
               "operationId": "Dashboards_UpdateUnlistDashboard",
               "parameters":[
                   {
                       "name": "dashboardId",
                       "in": "path",
                       "description": "Dashboard ID.",
                       "required" : true,
                       "style": "simple",
                       "explode": false,
                       "schema": {
                           "type": "string",
                           "format": "guid",
                           "nullable": false
                       }
                   }
               ],
               "requestBody": {
                   "description": "Unlisted value passed will be updated to the specified dashboard.",
                   "content": {
                       "application/json": {
                           "schema": {
                               "$ref" : "#/components/schemas/ApiUpdateDashboardUnlist"
                           }
                       }
                   },
                   "required": true
               },
               "responses": {
                   "200": {
                       "description" : "Dashboard marked unlist successfully.",
                       "content": {
                           "application/json": {
                               "schema": {
                                   "$ref" : "#/components/schemas/ApiResponse"
                               }
                           }
                       }
                   },
                   "400": {
                       "description" : "The content of the request body is missing or incomplete.",
                       "content": {}
                   },
                   "401": {
                       "description": "Access denied",
                       "content": {}
                   },
                   "412" : {
                       "description": "Mark as public has been restricted.",
                       "content": {}
                   },
                   "417": {
                       "description": "Failed to mark dashboard as unlist.",
                       "content": {}
                   }
               }
           }
        },
        "/v5.0/dashboards/drafts": {
            "post": {
                "tags": [
                    "Draft Dashboard"
                ],
                "summary": "Add Draft Dashboard",
                "description": "Users who have access to create a dashboard can add the draft dashboard.",
                "operationId": "Dashboards_AddDraftDashboard",
                "parameters": [
                    {
                        "type": "string",
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "description": "Draft dashboard detail.",
                        "x-nullable": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Draft Dashboard has been created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DraftItemDetail"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "403": {
                        "description": "Access denied for the item.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "Item name already exists.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "name"
            },
            "get": {
                "tags": [
                    "Draft Dashboard"
                ],
                "summary": "Get Draft Dashboards",
                "description": "Users who have created the draft dashboard can view the draft dashboard lists.",
                "operationId": "Dashboards_GetDraftDashboard",
                "responses": {
                    "200": {
                        "description": "List of draft dashboards has been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiItemsV4"
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Items not found.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "403": {
                        "description": "Access denied for the item.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/dashboards/drafts/{itemId}": {
            "put": {
                "tags": [
                    "Draft Dashboard"
                ],
                "summary": "Update Draft Dashboard",
                "description": "Users who have created the draft dashboard can update dashboard details.",
                "operationId": "Items_UpdateDraftItemDetail",
                "parameters": [
                    {
                        "name": "itemId",
                        "in": "path",
                        "description": "ItemId of the draft dashboard.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "Details of the draft dashboard item.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateDraftItemDetail"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Draft dashboard detail has been modified successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "Item name already exists.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to update draft item details.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "updateDraftItemDetail"
            }
        },
        "/v5.0/dashboards/views": {
            "post": {
                "tags": [
                    "Dashboard Views"
                ],
                "summary": "Add Dashboard View",
                "description": "Users who have access to the dashboard can save a view by providing proper dashboard filter details.",
                "operationId": "ItemViews_AddItemView",
                "requestBody": {
                    "description": "Details about the dashboard filter to save the view.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiItemViewsAdd"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "A view has been created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "View name already exists.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to add view.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiItemViewsAdd"
            },
            "put": {
                "tags": [
                    "Dashboard Views"
                ],
                "summary": "Edit Dashboard View",
                "description": "Users who have created a view can edit the view by providing proper dashboard filter details.",
                "operationId": "ItemViews_UpdateItemView",
                "requestBody": {
                    "description": "Details about the dashboard filter to edit the view.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiItemViewsUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "A view has been updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "View name already exists.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to edit view.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiItemViewsUpdate"
            }
        },
        "/v5.0/dashboards/{id}/views": {
            "get": {
                "tags": [
                    "Dashboard Views"
                ],
                "summary": "Get Dashboard Views",
                "description": "Retrieves the list of views of the particular dashboard for the current user.",
                "operationId": "ItemViews_ItemViewsByItemId",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Dashboard ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Views have been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiItemViewResponse"
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "View list was empty.",
                        "content": {}
                    },
                    "400": {
                        "description": "Dashboard ID invalid.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to get views.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/dashboards/views/{id}": {
            "get": {
                "tags": [
                    "Dashboard Views"
                ],
                "summary": "Get Dashboard View by Id",
                "description": "Retrieves the view detail for the current user.",
                "operationId": "ItemViews_ItemViewByViewId",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "View ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A view has been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiItemViewResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "View ID invalid.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "View detail not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to get item view.",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": [
                    "Dashboard Views"
                ],
                "summary": "Delete Dashboard View",
                "description": "Users who have created a view can delete them.",
                "operationId": "ItemViews_ItemViewDelete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "View ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content.",
                        "content": {}
                    },
                    "400": {
                        "description": "View ID invalid.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Itemview is not active.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not DELETE.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to delete view.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/datasources": {
            "get": {
                "tags": [
                    "DataSource"
                ],
                "summary": "Get Datasources",
                "description": "Users who have created the data source can view the data source lists.",
                "operationId": "DataSource_GetDataSources",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage number",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  1 ",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage size",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  10 ",
                        "default": 25,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, and CreatedByDisplayName</code>",
                        "x-nullable": true,
                        "example": "  sales "
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
                        "x-nullable": true,
                        "example": "  + "
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of data sources has been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedApiResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Items not found.",
                        "content": {}
                    },
                    "400": {
                        "description": "Page does not exists.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "403": {
                        "description": "Access denied for the item.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": [
                    "DataSource"
                ],
                "summary": "Create Data Source",
                "description": "Create a data source.",
                "operationId": "DataSource_CreateDataSource",
                "requestBody": {
                    "description": "The following documentation explains how a user can create a data source using the API",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiDataSourceAttribute"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The data source has been created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebAPItemResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Item name is empty",
                        "content": {}
                    },
                    "401": {
                        "description": " Unauthorized.",
                        "content": {}
                    },
                    "404": {
                        "description": "Requested resource is not found.",
                        "content": {}
                    },
                    "409": {
                        "description": "Item name already exists.",
                        "content": {}
                    },
                    "411": {
                        "description": "Content-length is required.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiDataSourceConnectionAdd"
            },
            "put": {
                "tags": [
                    "DataSource"
                ],
                "summary": "Update Data Source",
                "description": "Updates an existing data source in a particular site. \n\n Note: Update data source API is only applicable for a live SQL data source.",
                "operationId": "DataSource_UpdateDataSource",
                "requestBody": {
                    "description": "Details about the data source passed will be updated.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiUpdateDataSourceAttribute"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The data source has been updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebAPItemResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Item name is empty",
                        "content": {}
                    },
                    "401": {
                        "description": " Unauthorized.",
                        "content": {}
                    },
                    "404": {
                        "description": "Requested resource is not found.",
                        "content": {}
                    },
                    "409": {
                        "description": "Item name already exists.",
                        "content": {}
                    },
                    "411": {
                        "description": "Content-length is required.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiUpdateDataSourceV4"
            }
        },
        "/v5.0/datasources/{itemId}/copy": {
            "post": {
                "tags": [
                    "DataSource"
                ],
                "summary": "Copy Datasource",
                "description": "Users who have create access to the data source, can copy the data source.",
                "operationId": "DataSource_CopyDataSource",
                "parameters": [
                    {
                        "name": "itemId",
                        "in": "path",
                        "description": "ItemId of the data source will be copied.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "Details of the passed data source will be copied.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiCopyDataSourceRequestV4"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The data source has been copied successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCopyItemResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "Data source name already exist.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to copy the data source.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiCopyDatasource"
            }
        },
        "/v5.0/datasources/{datasourceID}/user-filter":{
            "put": {
                "tags": [
                    "DataSource"
                ],
                "summary": "Create User Filter",
                "description": "Creating an user filter.",
                "operationId": "DataSource_CreateUserFilter",
                "requestBody": {
                    "description": "The following documentation explains how a user can create a user based filter using the API.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiCreateUserFilter"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "User Filter created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebAPItemResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Item name is empty",
                        "content": {}
                    },
                    "401": {
                        "description": " Unauthorized.",
                        "content": {}
                    },
                    "404": {
                        "description": "Requested resource is not found.",
                        "content": {}
                    },
                    "409": {
                        "description": "Item name already exists.",
                        "content": {}
                    },
                    "411": {
                        "description": "Content-length is required.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiCreateUserFilter"
            }
        },
        "/v5.0/datasources/{datasourceId}": {
            "get": {
                "tags": [
                    "DataSource"
                ],
                "summary": "Get Datasource by Id",
                "description": "Users who have created the data source can view the data source details.",
                "operationId": "DataSource_GetDataSource",
                "parameters": [
                    {
                        "name": "datasourceId",
                        "in": "path",
                        "description": "Datasource ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data source detail was retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiDataSourceSpecifiedItemDetail"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Item id invalid.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": [
                    "DataSource"
                ],
                "summary": "Delete Datasource",
                "description": "Users who have delete access to the item type data source can delete the item by providing the Datasource Id.",
                "operationId": "DataSource_DeleteDataSource",
                "parameters": [
                    {
                        "name": "datasourceId",
                        "in": "path",
                        "description": "Datasource ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content.",
                        "content": {}
                    },
                    "400": {
                        "description": "Item id invalid.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not DELETE.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to delete item.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/data-sources/{datasourceId}/dashboards": {
            "get": {
                "tags": [
                    "DataSource"
                ],
                "summary": "Get Linked Dashboards",
                "description": "Users who have read access to the data source can get the list of the linked dashboards.",
                "operationId": "DataSource_GetLinkedDataSourceDashboards",
                "parameters": [
                    {
                        "name": "datasourceId",
                        "in": "path",
                        "description": "Datasource ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Linked dashboards retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetLinkedDatasourceDashboards"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Item id invalid.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/items": {
          "get": {
            "tags": [
              "Items"
            ],
            "summary": "Get Items",
            "description": "Retrieves the respective list of items for the item types (Category, Dashboard, Datasource, and Schedule) for the current user.",
            "operationId": "Items_GetItems",
            "parameters": [
              {
                "name": "itemType",
                "in": "query",
                "description": "Item type.<br />(Values allowed are <code>Category, Dashboard, Datasource, and Schedule</code>)",
                "required": true,
                "style": "form",
                "explode": true,
                "schema": {
                  "type": "string",
                  "nullable": false,
                  "x-schema": {
                    "$ref": "#/components/schemas/ItemType"
                  }
                },
                "x-schema": {
                  "$ref": "#/components/schemas/ItemType"
                }
              },
              {
                "type": "string",
                "name": "serverPath",
                "in": "query",
                "required": false,
                "description": "<br />`\"/\"` + `\"Category name\"`",
                "x-nullable": true,
                "example": " /sales "
              }
            ],
            "responses": {
              "200": {
                "description": "List of items has been retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ApiItems"
                      }
                    }
                  }
                }
              },
              "204": {
                "description": "Item list is empty.",
                "content": {}
              },
              "400": {
                "description": "Invalid item type.",
                "content": {}
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "405": {
                "description": "Request type was not GET.",
                "content": {}
              }
            }
          }
        },
        "/v5.0/items/{id}": {
          "get": {
            "tags": [
              "Items"
            ],
            "summary": "Get Item by Id",
            "description": "Retrieves the respective item detail for the current users? item types (Category, Dashboard, Datasource, and Schedule).",
            "operationId": "Items_GetItemDetail",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Item ID",
                "required": true,
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "format": "guid",
                  "nullable": false
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Item detail was retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiSpecifiedItemDetail"
                    }
                  }
                }
              },
              "400": {
                "description": "Item id invalid.",
                "content": {}
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "404": {
                "description": "Item details not found.",
                "content": {}
              },
              "405": {
                "description": "Request type was not GET.",
                "content": {}
              }
            }
          },
          "delete": {
            "tags": [
              "Items"
            ],
            "summary": "Delete Item",
            "description": "Users who have delete access to the item types Category, Dashboard, Datasource, and Schedule can delete the item by providing the item ID (Category Id, Dashboard Id, Datasource Id, and Schedule Id).",
            "operationId": "Items_DeleteItem",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Item ID",
                "required": true,
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "format": "guid",
                  "nullable": false
                }
              }
            ],
            "responses": {
              "204": {
                "description": "No content.",
                "content": {}
              },
              "400": {
                "description": "Item id invalid.",
                "content": {}
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "404": {
                "description": "Item details not found.",
                "content": {}
              },
              "405": {
                "description": "Request type was not DELETE.",
                "content": {}
              },
              "417": {
                "description": "Failed to delete item.",
                "content": {}
              }
            }
          }
        },
        "/v5.0/items/is-name-exists": {
          "post": {
            "tags": [
              "Items"
            ],
            "summary": "Check Item name existence",
            "description": "Current user can check whether the item (category, dashboard, data source, schedule, slideshow) is already exists or not by providing item name (category name, dashboard name, data source name, schedule name, slideshow name) and itemtype (Category, Dashboard, Data source, Schedule, Slideshow) in the request body.",
            "operationId": "Items_IsItemNameExists",
            "requestBody": {
              "description": "Details about the item passed will be checked.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiValidateItemName"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Returns an item existence",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete",
                "content": {}
              },
              "404": {
                "description": "Category details not found.",
                "content": {}
              },
              "405": {
                "description": "Request type was not POST",
                "content": {}
              },
              "406": {
                "description": "Invalid item type.",
                "content": {}
              },
              "417": {
                "description": "Failed to validate item name.",
                "content": {}
              }
            }
          }
        },
        "/v5.0/slideshows": {
            "post": {
                "tags": [
                    "Slideshow"
                ],
                "summary": "Add Slideshow",
                "description": "Users who have create access to the slideshow can add a new slideshow.",
                "operationId": "SlideShow_AddSlideshow",
                "requestBody": {
                    "description": "Details about the slideshow passed will be added.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiSlideshowAdd"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "A slideshow was created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "Item name already exists.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to add slideshow.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiSlideshowAdd"
            },
            "get": {
                "tags": [
                    "Slideshow"
                ],
                "summary": "Get Slideshows",
                "description": "Retrieves the list of slideshow details.",
                "operationId": "SlideShow_GetSlideshows",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage number",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  1 ",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage size",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  10 ",
                        "default": 25,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, and CreatedByDisplayName</code>",
                        "x-nullable": true,
                        "example": "  sales "
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
                        "x-nullable": true,
                        "example": "  + "
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of slideshows was retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedSlideshowApiResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Items not found.",
                        "content": {}
                    },
                    "400": {
                        "description": "Page does not exists.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to retrieve the slideshows.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/slideshows/{slideshowId}": {
            "get": {
                "tags": [
                    "Slideshow"
                ],
                "summary": "Get Slideshow by Id",
                "description": "Users who have read access to the slideshow can get slideshow detail.",
                "operationId": "SlideShow_GetSlideshowDetail",
                "parameters": [
                    {
                        "name": "slideshowId",
                        "in": "path",
                        "description": "Slideshow ID.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Slideshow detail was retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SlideshowResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to retrieve the slideshows.",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "Slideshow"
                ],
                "summary": "Update Slideshow",
                "description": "Users who have write access to the slideshow can update the slideshow detail.",
                "operationId": "SlideShow_EditSlideshow",
                "parameters": [
                    {
                        "name": "slideshowId",
                        "in": "path",
                        "description": "Slideshow ID.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "Details about the slideshow passed will be updated.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiSlideshowEdit"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "A slideshow was modified successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to update slideshow.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiSlideshowEdit"
            },
            "delete": {
                "tags": [
                    "Slideshow"
                ],
                "summary": "Delete Slideshow",
                "description": "Users can delete the specific slideshow.",
                "operationId": "SlideShow_DeleteSlideshow",
                "parameters": [
                    {
                        "name": "slideshowId",
                        "in": "path",
                        "description": "Slideshow ID.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content.",
                        "content": {}
                    },
                    "400": {
                        "description": "Slideshow id is empty.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not DELETE.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to delete slideshow.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/dashboards/schedules": {
            "post": {
                "tags": [
                    "Schedule"
                ],
                "summary": "Add Dashboard Schedule",
                "description": "Users who have create access to the schedule can add new dashboard schedule.",
                "operationId": "Dashboards_AddSchedule",
                "requestBody": {
                    "description": "Details about the schedule passed will be added.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiScheduleRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The schedule was created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiScheduleResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "Item name already exists.",
                        "content": {}
                    },
                    "412": {
                        "description": "FTP details invalid.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to add schedule.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiScheduleRequest"
            },
            "get": {
                "tags": [
                    "Schedule"
                ],
                "summary": "Get Dashboard Schedules",
                "description": "Users who have read access to the schedule can get the list of dashboard schedules.",
                "operationId": "Dashboards_GetScheduleItems",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage number",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  1 ",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage size",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  10 ",
                        "default": 25,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name, Description, and CreatedByDisplayName</code>",
                        "x-nullable": true,
                        "example": "  sales "
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
                        "x-nullable": true,
                        "example": "  + "
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedule details have been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedScheduleApiResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "400": {
                        "description": "Page does not exists.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to retrieve the schedules.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/dashboards/schedules/{scheduleId}": {
            "get": {
                "tags": [
                    "Schedule"
                ],
                "summary": "Get Dashboard Schedule by Id",
                "description": "Users who have read access to the schedule can get the particular dashboard schedule.",
                "operationId": "Dashboards_GetSchedule",
                "parameters": [
                    {
                        "name": "scheduleId",
                        "in": "path",
                        "description": "Schedule ID.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedule detail has been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiScheduleItemDetail"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to retrieve the schedule.",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "Schedule"
                ],
                "summary": "Update Dashboard Schedule",
                "description": "Users who have write access for schedule can update an existing dashboard schedule.",
                "operationId": "Dashboards_UpdateSchedule",
                "parameters": [
                    {
                        "name": "scheduleId",
                        "in": "path",
                        "description": "Schedule ID.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "Details about the schedule passed will be updated.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiUpdateScheduleRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The schedule was modified successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiScheduleResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "Item name already exists.",
                        "content": {}
                    },
                    "412": {
                        "description": "FTP details invalid.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to update schedule.",
                        "content": {}
                    },
                    "500": {
                        "description": "Error in the database while executing the query.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "apiUpdateScheduleRequest"
            }
        },
        "/v5.0/schedules/{scheduleId}/run": {
            "get": {
                "tags": [
                    "Schedule"
                ],
                "summary": "Run Schedule",
                "description": "Users who have read access for schedule can run the particular schedule.",
                "operationId": "Scheduler_RunSchedule",
                "parameters": [
                    {
                        "name": "scheduleId",
                        "in": "path",
                        "description": "Schedule ID.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The schedule started successfully. Schedule recipients will receive notification once a schedule has been completed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to run the schedule.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/schedules/{scheduleId}": {
            "delete": {
                "tags": [
                    "Schedule"
                ],
                "summary": "Delete Schedule",
                "description": "Users who have delete access to the item type schedule can delete the particular dashboards schedule by providing the Schedule Id.",
                "operationId": "Scheduler_DeleteSchedule",
                "parameters": [
                    {
                        "name": "scheduleId",
                        "in": "path",
                        "description": "Schedule ID.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content.",
                        "content": {}
                    },
                    "400": {
                        "description": "Item id invalid.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not DELETE.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to delete item.",
                        "content": {}
                    }
                }
            }
        },
        "/pinboard": {
          "post": {
            "tags": [
              "Pinboard"
            ],
            "summary": "Add Pinboard",
            "description": "Adds the new pinboard into a particular site.",
            "operationId": "Pinboard_AddEmbedPinBoard",
            "requestBody": {
              "description": "Details about adding pinboard.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiAddEmbedPinboard"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Pinboard has been added successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiAddPinboardResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete.",
                "content": {}
              },
              "405": {
                "description": "Request type was not POST.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              },
              "409": {
                "description": "Pinboard name already exists.",
                "content": {}
              },
              "417": {
                "description": "Failed to add pinboard details.",
                "content": {}
              }
            },
            "x-codegen-request-body-name": "apiPinboardAdd"
          }
        },
        "/pinboard/copy": {
          "post": {
            "tags": [
              "Pinboard"
            ],
            "summary": "Copy Pinboard",
            "description": "Copies the pinboard in the particular site.",
            "operationId": "Pinboard_CopyEmbedPinBoard",
            "requestBody": {
              "description": "Details about the copy pinboard.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiSiteCopyPinboard"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Pinboard has been copied successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiAddPinboardResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete.",
                "content": {}
              },
              "405": {
                "description": "Request type was not POST.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              },
              "409": {
                "description": "Pinboard name already exists.",
                "content": {}
              },
              "417": {
                "description": "Failed to copy pinboard details.",
                "content": {}
              }
            },
            "x-codegen-request-body-name": "apiPinboardCopy"
          }
        },
        "/pinboards": {
            "get": {
                "tags": [
                    "Pinboard"
                ],
                "summary": "Get Pinbords",
                "description": "Retrieves the list of pinboard details.",
                "operationId": "Pinboard_GetPinboards",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage number",
                        "x-nullable": true,
                        "schema" : {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "  1 ",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nPage size",
                        "x-nullable": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example" : "  10 ",
                         "default": 25,
                         "minimum":1,
                         "Maximum":100
                    },
                    {
                        "type": "string",
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSearch Keyword<br />Keyword searched in <code>Name</code>",
                        "x-nullable": true,
                        "example": " Bold "
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "description": "<br />\nSorting type<br />Values allowed are <code>+(ascending), -(descending)</code>",
                        "x-nullable": true,
                        "example": "  + "
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of pinboards has been retrieved successfully.",
                        "content":{
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetPinboardPaginatedResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Pinboard list is empty.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/pinboard/{name}": {
          "get": {
            "tags": [
              "Pinboard"
            ],
            "summary": "Get Pinboard by Name",
            "description": "Users who have create access for dashboard can retrieve pinboard item.",
            "operationId": "Dashboards_GetEmbedPinBoard",
            "parameters": [
              {
                "name": "name",
                "in": "path",
                "description": "Pinboard name",
                "required": true,
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "nullable": false
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Pinboard detail have been retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete.",
                "content": {}
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "405": {
                "description": "Request type was not GET.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              },
              "417": {
                "description": "Failed to retrieve the pinboard detail.",
                "content": {}
              }
            }
          },
          "put": {
            "tags": [
              "Pinboard"
            ],
            "summary": "Update Pinboard",
            "description": "Updates an existing pinboard in a particular site.",
            "operationId": "Pinboard_UpdateEmbedPinBoard",
            "parameters": [
              {
                "name": "pinboard",
                "in": "path",
                "description": "Pinboard name",
                "required": true,
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "nullable": false
                }
              }
            ],
            "requestBody": {
              "description": "Details about the pinboard passed will be updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiUpdateEmbedPinboard"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Pinboard Updated successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete"
              },
              "401": {
                "description": "Access denied for the item."
              },
              "404": {
                "description": "Item not found"
              },
              "405": {
                "description": "Request type was not PUT."
              },
              "412": {
                "description": "Pinboard is not available as default page."
              },
              "417": {
                "description": "Failed to update pinboard details."
              }
            },
            "x-codegen-request-body-name": "apiEmbedPinbaord"
          },
          "delete": {
            "tags": [
              "Pinboard"
            ],
            "summary": "Delete Pinboard",
            "description": "Users who have created a pinboard can delete that pinboard.",
            "operationId": "Pinboard_RemoveEmbedPinBoard",
            "parameters": [
              {
                "name": "name",
                "in": "path",
                "description": "Pinboard name",
                "required": true,
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "nullable": false
                }
              }
            ],
            "responses": {
              "204": {
                "description": "No content.",
                "content": {}
              },
              "400": {
                "description": "Item name is empty.",
                "content": {}
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "405": {
                "description": "Request type was not DELETE.",
                "content": {}
              },
              "417": {
                "description": "Failed to delete the pinboard details.",
                "content": {}
              }
            }
          }
        },
        "/pinboard/rename/{name}":{
            "put": {
                "tags": [
                    "Pinboard"
                ],
                "summary": "Update Rename Pinboard",
                "description": "Users who have create the dashboard can update rename pinboard",
                "operationId": "Pinboard_UpdateRenamePinboard",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Existing Pinboard name",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    }
                ],
                "requestBody":{
                    "description": "Details about the rename pinboard passed will be updated.",
                    "content": {
                        "application/json":{
                            "schema": {
                                "$ref": "#/components/schemas/ApiPinboard"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Pinboard have been renamed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400":{
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "405":{
                        "description": "Request type was not PUT.",
                        "content": {}
                    },
                    "409":{
                        "description": "Item name already exists.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/pinboard/is-name-exists": {
          "post": {
            "tags": [
              "Pinboard"
            ],
            "summary": "Check Pinboard name existence",
            "description": "Current user can check whether the pinboard is already exists or not by providing name in the request body.",
            "operationId": "Pinboard_IsPinBoardNameExists",
            "requestBody": {
              "description": "Details about the item passed will be checked.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiValidatePinboardName"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Returns an item existence",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete",
                "content": {}
              },
              "405": {
                "description": "Request type was not POST",
                "content": {}
              },
              "500": {
                "description": "Error in the database while executing the query.",
                "content": {}
              }
            }
          }
        },
        "/v5.0/attribute/user": {
          "post": {
            "tags": [
              "Attributes"
            ],
            "summary": "Add User Attribute",
            "description": "Adds the attribute for a particular user.",
            "operationId": "Attribute_AddUserAttribute",
            "requestBody": {
              "description": "Attribute object, which is sent as request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiUserAddAttribute"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Attribute details created successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete.",
                "content": {}
              },
              "405": {
                "description": "Request type was not POST.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              },
              "409": {
                "description": "Attribute name already exists.",
                "content": {}
              },
              "417": {
                "description": "Failed to add attribute details.",
                "content": {}
              }
            },
            "x-codegen-request-body-name": "attribute"
          },
          "put": {
            "tags": [
              "Attributes"
            ],
            "summary": "Update User Attribute",
            "description": "Updates the specific attribute of a particular user.",
            "operationId": "Attribute_UpdateUserAttribute",
            "requestBody": {
              "description": "Attribute object, which is sent as request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiUserUpdateAttribute"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Attribute details was modified successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete.",
                "content": {}
              },
              "405": {
                "description": "Request type was not PUT.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              },
              "409": {
                "description": "Attribute name already exists.",
                "content": {}
              },
              "417": {
                "description": "Failed to update attribute details.",
                "content": {}
              }
            },
            "x-codegen-request-body-name": "attribute"
          }
        },
        "/v5.0/attribute/user/{id}": {
          "get": {
            "tags": [
              "Attributes"
            ],
            "summary": "Get User Attributes",
            "description": "Retrieves the list of attributes of the particular user.",
            "operationId": "Attribute_GetUserCustomAttribute",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "User ID",
                "required": true,
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": false
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Attribute details has been retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "User ID invalid.",
                "content": {}
              },
              "404": {
                "description": "Attributes not found.",
                "content": {}
              },
              "405": {
                "description": "Request type was not GET.",
                "content": {}
              },
              "417": {
                "description": "Failed to get attribute details.",
                "content": {}
              }
            }
          },
          "delete": {
            "tags": [
              "Attributes"
            ],
            "summary": "Delete User Attribute",
            "description": "Deletes the attribute of the particular user.",
            "operationId": "Attribute_DeleteUserAttribute",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "User attribute ID",
                "required": true,
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": false
                }
              }
            ],
            "responses": {
              "204": {
                "description": "No content.",
                "content": {}
              },
              "400": {
                "description": "Attribute ID invalid.",
                "content": {}
              },
              "405": {
                "description": "Request type was not DELETE.",
                "content": {}
              },
              "417": {
                "description": "Failed to delete attribute details.",
                "content": {}
              }
            }
          }
        },
        "/v5.0/attribute/group": {
          "post": {
            "tags": [
              "Attributes"
            ],
            "summary": "Add Group Attribute",
            "description": "Adds the attribute for a particular group.",
            "operationId": "Attribute_AddGroupAttribute",
            "requestBody": {
              "description": "Attribute object, which is sent as request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiGroupAddAttribute"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Attribute details created successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete.",
                "content": {}
              },
              "405": {
                "description": "Request type was not POST.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              },
              "409": {
                "description": "Attribute name already exists.",
                "content": {}
              },
              "417": {
                "description": "Failed to add attribute details.",
                "content": {}
              }
            },
            "x-codegen-request-body-name": "attribute"
          },
          "put": {
            "tags": [
              "Attributes"
            ],
            "summary": "Update Group Attribute",
            "description": "Updates the specific attribute of a particular group.",
            "operationId": "Attribute_UpdateGroupAttribute",
            "requestBody": {
              "description": "Attribute object, which is sent as request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiGroupUpdateAttribute"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Attribute details was modified successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete.",
                "content": {}
              },
              "405": {
                "description": "Request type was not PUT.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              },
              "409": {
                "description": "Attribute name already exists.",
                "content": {}
              },
              "417": {
                "description": "Failed to update attribute details.",
                "content": {}
              }
            },
            "x-codegen-request-body-name": "attribute"
          }
        },
        "/v5.0/attribute/group/{id}": {
          "get": {
            "tags": [
              "Attributes"
            ],
            "summary": "Get Group Attributes",
            "description": "Retrieves the list of attributes of the particular group.",
            "operationId": "Attribute_GetGroupCustomAttribute",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Group ID",
                "required": true,
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": false
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Attribute details has been retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "Group ID invalid.",
                "content": {}
              },
              "404": {
                "description": "Attributes not found.",
                "content": {}
              },
              "405": {
                "description": "Request type was not GET.",
                "content": {}
              },
              "417": {
                "description": "Failed to get attribute details.",
                "content": {}
              }
            }
          },
          "delete": {
            "tags": [
              "Attributes"
            ],
            "summary": "Delete Group Attribute",
            "description": "Deletes the attribute of the particular group.",
            "operationId": "Attribute_DeleteGroupAttribute",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Group attribute ID",
                "required": true,
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": false
                }
              }
            ],
            "responses": {
              "204": {
                "description": "No content.",
                "content": {}
              },
              "400": {
                "description": "Attribute ID invalid.",
                "content": {}
              },
              "405": {
                "description": "Request type was not DELETE.",
                "content": {}
              },
              "417": {
                "description": "Failed to delete attribute details.",
                "content": {}
              }
            }
          }
        },
        "/v5.0/attribute/site": {
          "post": {
            "tags": [
              "Attributes"
            ],
            "summary": "Add Site Attribute",
            "description": "Adds the attribute for a particular site.",
            "operationId": "Attribute_SaveSiteAttribute",
            "requestBody": {
              "description": "Attribute object, which is sent as request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiSiteAddAttribute"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Attribute details created successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete.",
                "content": {}
              },
              "405": {
                "description": "Request type was not POST.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              },
              "409": {
                "description": "Attribute name already exists.",
                "content": {}
              },
              "417": {
                "description": "Failed to add attribute details.",
                "content": {}
              }
            },
            "x-codegen-request-body-name": "attribute"
          },
          "get": {
            "tags": [
              "Attributes"
            ],
            "summary": "Get Site Attributes",
            "description": "Retrieves the list of attributes of the particular site.",
            "operationId": "Attribute_GetSiteAttributes",
            "responses": {
              "200": {
                "description": "Attribute details has been retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "404": {
                "description": "Attributes not found.",
                "content": {}
              },
              "405": {
                "description": "Request type was not GET.",
                "content": {}
              },
              "417": {
                "description": "Failed to get attribute details.",
                "content": {}
              }
            }
          },
          "put": {
            "tags": [
              "Attributes"
            ],
            "summary": "Update Site Attribute",
            "description": "Updates the specific attribute of a particular site.",
            "operationId": "Attribute_UpdateSiteAttributes",
            "requestBody": {
              "description": "Attribute object, which is sent as request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiSiteUpdateAttribute"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Attribute details was modified successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete.",
                "content": {}
              },
              "405": {
                "description": "Request type was not PUT.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              },
              "409": {
                "description": "Attribute name already exists.",
                "content": {}
              },
              "417": {
                "description": "Failed to update attribute details.",
                "content": {}
              }
            },
            "x-codegen-request-body-name": "attribute"
          }
        },
        "/v5.0/attribute/site/{id}": {
          "delete": {
            "tags": [
              "Attributes"
            ],
            "summary": "Delete Site Attribute",
            "description": "Deletes the attribute of the particular site.",
            "operationId": "Attribute_DeleteSiteAttributes",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Site attribute ID",
                "required": true,
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": false
                }
              }
            ],
            "responses": {
              "204": {
                "description": "No content.",
                "content": {}
              },
              "400": {
                "description": "Attribute ID invalid.",
                "content": {}
              },
              "405": {
                "description": "Request type was not DELETE.",
                "content": {}
              },
              "417": {
                "description": "Failed to delete attribute details.",
                "content": {}
              }
            }
          }
        },
        "/v5.0/settings/site": {
          "get": {
            "tags": [
              "Settings"
            ],
            "summary": "Get Site Settings",
            "description": "Retrieves the list of site setting details of the particular site if the user has admin rights for the site settings.",
            "operationId": "Administration_GetSiteSettings",
            "parameters": [
              {
                "type": "string",
                "name": "key",
                "in": "query",
                "required": false,
                "description": "<br />\nList of site setting keys separated by <code>,</code>",
                "x-nullable": true,
                "default": null,
                "example": " OrganizationName,SiteUrl "
              }
            ],
            "responses": {
              "200": {
                "description": "Site setting details has been retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiSiteSettingList"
                    }
                  }
                }
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "405": {
                "description": "Request type was not GET.",
                "content": {}
              },
              "417": {
                "description": "Failed to retrieve site settings details.",
                "content": {}
              }
            }
          },
          "put": {
            "tags": [
              "Settings"
            ],
            "summary": "Update Site Settings",
            "description": "Users who have admin rights to the site can update the site settings.",
            "operationId": "Administration_UpdateSiteSettings",
            "requestBody": {
              "description": "Details of the site settings passed will be updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateApiSiteSettingList"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Site settings has been updated successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiUpdateSiteSettingsResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete.",
                "content": {}
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "405": {
                "description": "Request type was not PUT.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              },
              "417": {
                "description": "Failed to update site setting details.",
                "content": {}
              }
            },
            "x-codegen-request-body-name": "apiUpdateSiteSettings"
          }
        },
        "/v5.0/settings/dashboard-settings": {
          "get": {
            "tags": [
              "Settings"
            ],
            "summary": "Get Dashboard Settings",
            "description": "Retrieves the dashboard setting details of the particular site if the user has admin rights for the dashboard settings.",
            "operationId": "Administration_GetDashboardSettings",
            "responses": {
              "200": {
                "description": "Dashboard setting details have been retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiDashboardSettings"
                    }
                  }
                }
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "405": {
                "description": "Request type was not GET.",
                "content": {}
              },
              "417": {
                "description": "Failed to retrieve dashboard settings.",
                "content": {}
              }
            }
          },
          "put": {
            "tags": [
              "Settings"
            ],
            "summary": "Update Dashboard Settings",
            "description": "Users who have admin rights permission to dashboard settings can update the dashboard settings.",
            "operationId": "Administration_UpdateDashboardSettings",
            "requestBody": {
              "description": "The details of the dashboard settings that have been passed will be updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiUpdateDashboardSettings"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Dashboard settings have been updated successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete",
                "content": {}
              },
              "401": {
                "description": "Access denied",
                "content": {}
              },
              "405": {
                "description": "Request type was not PUT",
                "content": {}
              },
              "417": {
                "description": "Failed to update site setting details",
                "content": {}
              },
              "500": {
                "description": "Error in the database while executing the query.",
                "content": {}
              }
            }
          }
        },
        "/v5.0/settings/email": {
          "get": {
                "tags": [
                  "Settings"
                ],
                "summary": "Get Email Settings",
                "description": "Retrieves the email setting details of the particular site if the user has admin rights for the email settings.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
                "operationId": "Administration_GetEmailSettings",
                "responses": {
                  "200": {
                    "description": "Email setting details have been retrieved successfully.",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ApiEmailSettings"
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Access denied.",
                    "content": {}
                  },
                  "405": {
                    "description": "Request type was not GET.",
                    "content": {}
                  },
                  "417": {
                    "description": "Failed to retrieve Email settings.",
                    "content": {}
                  }
                }
          },
          "put": {
            "tags": [
              "Settings"
            ],
            "summary": "Update Email Settings",
            "description": "Users who have admin rights permission to email settings can update the email settings.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
            "operationId": "Administration_UpdateEmailSettings",
            "requestBody": {
              "description": "The details of the email settings that have been passed will be updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiUpdateEmailSettings"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Email settings have been updated successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete",
                "content": {}
              },
              "401": {
                "description": "Access denied",
                "content": {}
              },
              "405": {
                "description": "Request type was not PUT",
                "content": {}
              },
              "412": {
                "description": "Email address is invalid (or) Authentication type is invalid",
                "content": {}
              },
              "417": {
                "description": "Failed to update email settings",
                "content": {}
              }
            }
          }
        },
        "/v5.0/settings/azure-active-directory": {
          "get": {
                "tags": [
                  "Settings"
                ],
                "summary": "Get Azure AD Settings",
                "description": "Retrieves the Azure AD settings details if the user has admin rights for the user directories.",
                "operationId": "Administration_GetAzureADSettings",
                "responses": {
                  "200": {
                    "description": "Azure AD settings details have been retrieved successfully.",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ApiAzureADSettings"
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Access denied.",
                    "content": {}
                  },
                  "405": {
                    "description": "Request type was not GET.",
                    "content": {}
                  },
                  "417": {
                    "description": "Failed to retrieve Azure AD settings.",
                    "content": {}
                  }
                }
          },
          "put": {
            "tags": [
              "Settings"
            ],
            "summary": "Update Azure AD Settings",
            "description": "Users who have admin rights permission to user directories can update the Azure AD settings.",
            "operationId": "Administration_UpdateAzureADSettings",
            "requestBody": {
              "description": "The details of the azure active directory settings that have been passed will be updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiUpdateAzureADSettings"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Azure AD settings have been updated successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete",
                "content": {}
              },
              "401": {
                "description": "Access denied",
                "content": {}
              },
              "405": {
                "description": "Request type was not PUT",
                "content": {}
              },
              "412": {
                "description": "Connection details are invalid",
                "content": {}
              },
              "417": {
                "description": "Failed to update azure ad settings",
                "content": {}
              }
            }
          }
        },
        "/v5.0/settings/schedule-synchronization/azure-active-directory": {
          "get": {
                "tags": [
                  "Settings"
                ],
                "summary": "Get Azure AD Schedule Synchronization Settings",
                "description": "Retrieves the Azure AD Schedule Synchronization Settings details if the user has admin rights for the user directories.",
                "operationId": "Administration_GetAzureADScheduleSettings",
                "responses": {
                  "200": {
                    "description": "Azure AD Schedule Synchronization settings details have been retrieved successfully.",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ApiAzureAdScheduleSynchronizationSettings"
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Access denied.",
                    "content": {}
                  },
                  "405": {
                    "description": "Request type was not GET.",
                    "content": {}
                  },
                  "417": {
                    "description": "Failed to retrieve Email settings.",
                    "content": {}
                  }
                }
          },
          "put": {
            "tags": [
              "Settings"
            ],
            "summary": "Update Azure AD Schedule Synchronization Settings",
            "description": "Users who have admin rights permission to user directories can update the Azure AD schedule synchronization settings.",
            "operationId": "Administration_UpdateAzureADScheduleSettings",
            "requestBody": {
              "description": "The details of the azure active directory schedule synchronization settings that have been passed will be updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiUpdateAzureAdScheduleSynchronizationSettings"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Azure AD Schedule Synchronization settings have been updated successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiUpdateAzureAdScheduleSynchronizationSettingsResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete",
                "content": {}
              },
              "401": {
                "description": "Access denied",
                "content": {}
              },
              "405": {
                "description": "Request type was not PUT",
                "content": {}
              },
              "406": {
                "description": "Schedule type is invalid (or) Recurrence type is invalid",
                "content": {}
              },
              "412": {
                "description": "Start time is invalid",
                "content": {}
              },
              "417": {
                "description": "Failed to update azure ad synchronization schedule settings",
                "content": {}
              }
            }
          }
        },
        "/v5.0/settings/accounts": {
          "get": {
            "tags": [
              "Settings"
            ],
            "summary": "Get Account Settings",
            "description": "Retrieves the account setting details of the particular site if the user has admin rights for the account settings.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
            "operationId": "Administration_GetAccountSettings",
            "responses": {
              "200": {
                "description": "Account setting details have been retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiAccountSettings"
                    }
                  }
                }
              },
              "401": {
                "description": "Access denied",
                "content": {}
              },
              "405": {
                "description": "Request type was not GET",
                "content": {}
              },
              "417": {
                "description": "Failed to retrieve account settings",
                "content": {}
              }
            }
          },
          "put": {
            "tags": [
              "Settings"
            ],
            "summary": "Update Account Settings",
            "description": "Users who have admin rights permission to account settings can update the account settings.",
            "operationId": "Administration_UpdateAccountSettings",
            "requestBody": {
              "description": "The details of the account settings that have been passed will be updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiUpdateAccountSettings"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Account settings have been updated successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete",
                "content": {}
              },
              "401": {
                "description": "Access denied",
                "content": {}
              },
              "405": {
                "description": "Request type was not PUT",
                "content": {}
              },
              "412": {
                "description": "Email settings are not configured (or) user email field is set as false for Email activation type"
              },
              "417": {
                "description": "Failed to update account settings"
              }
            }
          }
        },
        "/v5.0/settings/security/cors": {
          "get": {
                "tags": [
                  "Settings"
                ],
                "summary": "Get CORS Settings",
                "description": "Retrieves the cors setting details if the user has admin rights for the security settings.",
                "operationId": "Administration_GetCorsSettings",
                "responses": {
                  "200": {
                    "description": "CORS settings details have been retrieved successfully.",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ApiCorsSettings"
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Access denied.",
                    "content": {}
                  },
                  "405": {
                    "description": "Request type was not GET.",
                    "content": {}
                  },
                  "417": {
                    "description": "Failed to retrieve cors settings.",
                    "content": {}
                  }
                }
          },
          "put": {
            "tags": [
              "Settings"
            ],
            "summary": "Update Cors Settings",
            "description": "Users who have admin rights permission to security settings can update the cors settings.",
            "operationId": "Administration_UpdateCorsSettings",
            "requestBody": {
              "description": "The details of the cors settings that have been passed will be updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiUpdateCorsSettings"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Cors settings have been updated successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete",
                "content": {}
              },
              "401": {
                "description": "Access denied",
                "content": {}
              },
              "405": {
                "description": "Request type was not PUT",
                "content": {}
              },
              "417": {
                "description": "Failed to update cors settings",
                "content": {}
              }
            }
          }
        },
        "/v5.0/settings/embed-secret/generate": {
          "post": {
            "tags": [
              "Settings"
            ],
            "summary": "Generate Embed Secret",
            "description": "Generate the embed secret of the particular site if the user has admin rights for the site settings.",
            "operationId": "Administration_GenerateEmbedSecret",
            "responses": {
              "200": {
                "description": "Embed Secret has been generated successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiEmbedSecretSettings"
                    }
                  }
                }
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "405": {
                "description": "Request type was not POST.",
                "content": {}
              },
              "417": {
                "description": "Failed to retrieve embed secret.",
                "content": {}
              }
            }
          }
        },
        "/v5.0/settings/datastore": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Get Datastore Settings",
                "description": "Retrieves the datastore setting details of a particular site if the user has admin rights for the datastore settings.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
                "operationId": "Administration_GetDatastoreSettings",
                "responses": {
                    "200": {
                        "description": "Datastore settings details have been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetDatastoreSettings"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "Settings"
                ],
                "summary": "Update Datastore Settings",
                "description": "Users who have admin rights permission to datastore settings can update the datastore settings.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
                "operationId": "Administration_UpdateDatastoreSettings",
                "requestBody": {
                    "description": "The details of the datastore settings that have been passed will be updated.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiUpdateDatastoreSettings"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Datastore settings details have been updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or empty.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {}
                    },
                    "404": {
                        "description": "Database not found",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT",
                        "content": {}
                    },
                    "409": {
                        "description": "Database already exists",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/settings/look-and-feel": {
            "get": {
              "tags": [
                "Settings"
              ],
              "summary": "Get Look and Feel Settings",
              "description": "Retrieves the Look and Feel settings details of the particular site if the user has admin rights for the look and feel settings.",
              "operationId": "Administration_GetLookandFeelSettings",
              "responses": {
                "200": {
                  "description": "Look and Feel setting details has been retrieved successfully.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ApiLookandFeelSettings"
                      }
                    }
                  }
                },
                "401": {
                  "description": "Access denied",
                  "content": {}
                },
                "405": {
                  "description": "Request type was not GET",
                  "content": {}
                },
                "417": {
                  "description": "Failed to get look and feel settings",
                  "content": {}
                }
              }
            },
            "put": {
              "tags": [
                "Settings"
              ],
              "summary": "Update Look and Feel Settings",
              "description": "Users who have admin rights permission to the site can update the look and feel settings",
              "operationId": "Administration_UpdateLookandFeelSettings",
              "requestBody": {
                "description": "The details of the Look and Feel settings that have been passed will be updated.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiUpdateLookAndSettings"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "description": "Look and Feel settings have been updated successfully.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ApiResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "The content of the request body is missing or incomplete",
                  "content": {}
                },
                "401": {
                  "description": "Access denied",
                  "content": {}
                },
                "405": {
                  "description": "Request type was not PUT",
                  "content": {}
                },
                "417": {
                  "description": "Failed to update Look and Feel settings"
                }
              }
            }
        },
        "/v5.0/deployment-dashboards": {
            "post": {
                "tags": [
                    "Settings"
                ],
                "summary": "Add Deployment Dashboards",
                "description": "In the master site, the user who have admin rights for the dashboard settings can add the deployment dashboards.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
                "operationId": "Administration_AddDeploymentDashboards",
                "requestBody": {
                    "description": "Deployment dashboard details, which is sent as request.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiAddDeploymentDashboards"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Deployment dashboard has been added successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "409": {
                        "description": "Dashboard details already exists.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "Settings"
            },
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Get Deployment Dashboards",
                "description": "Retrieves the list of deployment dashboards details of the master site if the user has admin rights for the dashboard settings.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
                "operationId": "Administration_GetDeploymentDashboards",
                "responses": {
                    "200": {
                        "description": "The Deployment dashboard has been retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetDeploymentDashboards"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "There is no deployment dashboards.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404": {
                        "description": "Request not found(When access the url with slave site).",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": [
                    "Settings"
                ],
                "summary": "Delete Deployment Dashboard",
                "description": "Delete the deployment dashboards by their respective dashboard IDs.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
                "operationId": "Administration_DeleteDeploymentDashboards",
                "parameters": [
                    {
                        "name": "itemId",
                        "in": "query",
                        "description": "Item ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "Guid",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content.",
                        "content": {}
                    },
                    "404": {
                        "description": "One or more dashboard details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not DELETE.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/settings/security/x-frame-options": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Get X-Frame-Options Settings",
                "description": "Retrieves the x-frame-options-setting details of the particular site if the user has admin rights for the x-frame-option settings.",
                "operationId": "Administartion_GetX-Frame-OptionsSettings",
                "responses": {
                    "200": {
                        "description": "X-Frame-Options settings details have been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiXFrameOptionsSettings "
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "Settings"
                ],
                "summary": "Update X-Frame-Options settings",
                "description": "Users who have admin rights permission to x-frame-option settings can update the x-frame-option settings.",
                "operationId": "Administartion_UpdateX-Frame-OptionsSettings",
                "requestBody": {
                    "description": "The details of the updated x-frame-options settings that have been passed will be updated.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiXFrameOptionsSettings "
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "X-Frame-Options settings details has been updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/settings/security/csp": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Get Content-Security-Policy settings",
                "description": "Retrieves the Content-Security-Policy settings details of the particular site if the user has admin rights for the Content-Security-Policy settings",
                "operationId": "Administration_GetCSPSecuritySettings",
                "responses": {
                    "200": {
                        "description": "Content-Security-Policy settings details have been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCSPSecuritySettings"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "Settings"
                ],
                "summary": "Update Content-Security-Policy settings",
                "description": "Users who have admin rights permission to Content-Security-Policy settings can update the Content-Security-Policy settings.",
                "operationId": "Administration_UpdateCSPSecuritysettings",
                "requestBody": {
                    "description": "The details of the updated Content-Security-Policy settings that have been passed will be updated.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiCSPSecuritySettings"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Content-Security-Policy settings details has been updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/settings/notifications": {
            "put": {
                "tags": [
                    "Settings"
                ],
                "summary": "Update Notification Settings",
                "description": "Users who have admin rights permission to notification settings can update the notification settings.",
                "operationId": "Administration_UpdateNotificationSettings",
                "requestBody": {
                    "description": "The details of the updated notification settings that have been passed will be updated.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Notification"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Notification settings details has been updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/settings/authentication/oauth": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Get OAuth settings",
                "description": "The OAuth settings details of the particular site are retrieved if the user has admin rights for the authentication settings.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
                "operationId": "Administartion_GetOAuthSettings",
                "responses": {
                    "200": {
                        "description": "OAuth settings have been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetOAuthSettings"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {}
                    },
                    "404":{
                        "description":"OAuth settings are not configured.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "500": {
                        "description": "Failed to retrieve the OAuth settings.",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "Settings"
                ],
                "summary": "Update OAuth settings",
                "description": "Users who have admin rights or permissions for authentication settings can update the OAuth settings.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
                "operationId": "Administration_UpdateOAuthSettings",
                "requestBody": {
                    "description": "Detail of the OAuth settings.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiUpdateOAuthSettings"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OAuth settings have been updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "500": {
                        "description": "Failed to update the OAuth settings.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/settings/authentication/openid": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Get OpenID settings",
                "description": "The OpenID settings details of the particular site are retrieved if the user has admin rights for the authentication settings.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
                "operationId": "Administartion_GetOpenIDSettings",
                "responses": {
                    "200": {
                        "description": "OpenID settings have been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetOpenIDSettings"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "404":{
                        "description":"OpenID settings are not configured.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    },
                    "500": {
                        "description": "Failed to retrieve OpenID settings.",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "Settings"
                ],
                "summary": "Update OpenID settings",
                "description": "Users who have admin rights or permission to access authentication settings are able to update the OpenID settings.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
                "operationId": "Administration_UpdateOpenIDSettings",
                "requestBody": {
                    "description": "Detail of the OpenID settings.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiUpdateOpenIDSettings"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OpenID settings have been updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "401": {
                        "description": "Access denied.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "500": {
                        "description": "Failed to update the OpenID settings.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/settings/windows-active-directory": {
            "get": {
                "tags": [
                  "Settings"
                ],
                "summary": "Get Windows AD Settings",
                "description": "Retrieves the Windows AD settings details if the user has admin rights for the user directories.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
                "operationId": "Administration_GetWindowsADSettings",
                "responses": {
                  "200": {
                    "description": "Windows AD settings details have been retrieved successfully.",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ApiWindowsADSettings"
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Access denied.",
                    "content": {}
                  },
                  "404": {
                    "description": "Windows Active Directory details are not configured.",
                    "content": {}
                  },
                  "405": {
                    "description": "Request type was not GET.",
                    "content": {}
                  },
                  "417": {
                    "description": "Failed to retrieve Windows AD settings.",
                    "content": {}
                  }
                }
          },
          "put": {
            "tags": [
              "Settings"
            ],
            "summary": "Update Windows AD Settings",
            "description": "Users who have admin rights permission to user directories can update the Windows AD settings.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
            "operationId": "Administration_UpdateWindowsADSettings",
            "requestBody": {
              "description": "The details of the windows active directory settings that have been passed will be updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiUpdateWindowsADSettings"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Windows AD settings have been updated successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or incomplete",
                "content": {}
              },
              "401": {
                "description": "Access denied",
                "content": {}
              },
              "405": {
                "description": "Request type was not PUT",
                "content": {}
              },
              "412": {
                "description": "Connection details are invalid.",
                "content": {}
              },
              "417": {
                "description": "Failed to update Windows AD settings.",
                "content": {}
              }
            }
          }
        },
        "/v5.0/settings/windows-active-directory/schedule-synchronization": {
            "get": {
                  "tags": [
                    "Settings"
                  ],
                  "summary": "Get Windows AD Schedule Synchronization Settings",
                  "description": "Retrieves the Windows AD Schedule Synchronization Settings details if the user has admin rights for the user directories.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
                  "operationId": "Administration_GetWindowsADScheduleSettings",
                  "responses": {
                    "200": {
                      "description": "Windows AD Schedule Synchronization settings details have been retrieved successfully.",
                      "content": {
                        "application/json": {
                          "schema": {
                            "$ref": "#/components/schemas/ApiAzureAdScheduleSynchronizationSettings"
                          }
                        }
                      }
                    },
                    "401": {
                      "description": "Access denied.",
                      "content": {}
                    },
                    "404": {
                      "description": "Windows AD synchronization schedule settings are not configured.",
                      "content": {}
                    },
                    "405": {
                      "description": "Request type was not GET.",
                      "content": {}
                    }
                  }
            },
            "put": {
              "tags": [
                "Settings"
              ],
              "summary": "Update Windows AD Schedule Synchronization Settings",
              "description": "Users who have admin rights permission to user directories can update the Windows AD schedule synchronization settings.\n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
              "operationId": "Administration_UpdateWindowsADScheduleSettings",
              "requestBody": {
                "description": "The details of the Windows Active Directory schedule synchronization settings that have been passed will be updated.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiUpdateAzureAdScheduleSynchronizationSettings"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "description": "Windows AD Schedule Synchronization settings have been updated successfully.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ApiUpdateAzureAdScheduleSynchronizationSettingsResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "The content of the request body is missing or incomplete.",
                  "content": {}
                },
                "401": {
                  "description": "Access denied.",
                  "content": {}
                },
                "405": {
                  "description": "Request type was not PUT.",
                  "content": {}
                },
                "406": {
                  "description": "Schedule type is invalid (or) Recurrence type is invalid.",
                  "content": {}
                },
                "412": {
                  "description": "Start time is invalid.",
                  "content": {}
                },
                "417": {
                  "description": "Failed to update Windows AD schedule synchronization.",
                  "content": {}
                }
              }
            }
        },
        "/v5.0/publish/item": {
          "post": {
            "tags": [
              "Publish to another site"
            ],
            "summary": "Publish Dashboard",
            "description": "Publish the dashboard from one site to other site(s). \n\n<B> **NOTE:** </B> This API is not available in Syncfusion Managed Cloud Server.",
            "operationId": "Publish_Dashboard",
            "requestBody": {
              "description": "Details about the publish dashboard, which is sent as request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiPublishItemDetail"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "The dashboard is being published to one or more sites.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or empty.",
                "content": {}
              },
              "401": {
                "description": "Access denied.",
                "content": {}
              },
              "404": {
                "description": "Site not found.",
                "content": {}
              },
              "405": {
                "description": "Request type was not POST.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              }
            },
            "x-codegen-request-body-name": "ApiPublishItemDetail"
          }
        },
        "/v5.0/publish/items": {
            "get": {
              "tags": [
                  "Publish to another site"
              ],
              "summary": "Get Published Items",
              "description": "Get Published Items details.",
              "operationId": "Publish_GetPublishedItemsDetails",
              "parameters": [
                  {
                      "name": "itemType",
                      "in": "query",
                      "description": "Item type.<br />(Values allowed are <code>Dashboard, Datasource</code>)",
                      "required": true,
                      "style": "form",
                      "explode": true,
                      "schema": {
                        "type": "string",
                        "nullable": false,
                        "x-schema": {
                          "$ref": "#/components/schemas/ItemType"
                        }
                      },
                      "x-schema": {
                        "$ref": "#/components/schemas/ItemType"
                      }
                  },
                  {
                      "name": "page",
                      "in": "query",
                      "required": false,
                      "description": "<br />\nPage number",
                      "x-nullable": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      },
                      "example": "  1 ",
                      "default": 1,
                      "minimum": 1
                  },
                  {
                      "name": "page_size",
                      "in": "query",
                      "required": false,
                      "description": "<br />\nPage size",
                      "x-nullable": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      },
                      "example": "  10 ",
                      "default": 25,
                      "minimum": 1,
                      "maximum": 100
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Published items details have been retrieved successfully.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/GetItemsPaginatedApiResponse"
                              }
                          }
                      }
                  },
                  "204": {
                    "description": "No content.",
                    "content": {}
                  },
                  "405": {
                      "description": "Request type is not GET.",
                      "content": {}
                  }
              }
            }
        },
        "/v5.0/publish/external-sites/add": {
          "post": {
            "tags": [
              "Publish to another site"
            ],
            "summary": "Add External Site",
            "description": "Adds the external site details.",
            "operationId": "Add_External_Sites",
            "requestBody": {
              "description": "Details about the add external site, which is sent as request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExternalSites"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "The external site was created successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "The content of the request body is missing or empty.",
                "content": {}
              },
              "405": {
                "description": "Request type was not POST.",
                "content": {}
              },
              "406": {
                "description": "The content of the request body is invalid.",
                "content": {}
              },
              "409": {
                "description": "External site name is duplicated.",
                "content": {}
              }
            },
            "x-codegen-request-body-name": "ExternalSites"
          }
        },
        "/v5.0/external-sites":{
            "get": {
                "tags": [
                  "Publish to another site"
                ],
                "summary": "Get External Site Details",
                "description": "External site details for the currently logged-in user.",
                "operationId": "Get_External_Sites",
                "responses": {
                  "200": {
                    "description": "The External site has been updated successfully.",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ApiExternalSiteDetails"
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Access denied",
                    "content": {}
                  },
                  "405": {
                    "description": "Request type was not GET",
                    "content": {}
                  }
                }
              }
        },
        "/v5.0/external-sites/{id}":{
            "put": {
                "tags": [
                  "Publish to another site"
                ],
                "summary": "Update External site details",
                "description": "Update the respective external sites.",
                "operationId": "Edit_External_Sites",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the External site",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "int32",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                  "description": "Details about the edit external site, which is sent as request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ApiEditExternalSites"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "External site has been updated successfully.",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ApiResponse"
                        }
                      }
                    }
                  },
                  "400": {
                    "description": "The content of the request body is missing or incomplete",
                    "content": {}
                  },
                  "401": {
                    "description": "Access denied",
                    "content": {}
                  },
                  "405": {
                    "description": "Request type was not PUT",
                    "content": {}
                  },
                  "409": {
                    "description": "Name already exists.",
                    "content": {}
                  }
                }
            },
            "delete": {
                "tags": [
                  "Publish to another site"
                ],
                "summary": "Delete External Site",
                "description": "Delete the added external sites.",
                "operationId": "Delete_External_Sites",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "description": "Id of the External site",
                    "required": true,
                    "style": "simple",
                    "explode": false,
                    "schema": {
                        "type": "string",
                        "format": "int32",
                        "nullable": false
                      }
                  }
                ],
                "responses": {
                  "204": {
                    "description": "No content.",
                    "content": {}
                  },
                  "401": {
                    "description": "Access denied",
                    "content": {}
                  },
                  "404": {
                    "description": "Site details not found.",
                    "content": {}
                  },
                  "405": {
                    "description": "Request type was not DELETE.",
                    "content": {}
                  }
                }
            }
        },
        "/v5.0/publish/items/{itemId}/synchronize":{
            "post": {
                "tags": [
                    "Publish to another site"
                ],
                "summary": "Synchronize Published Dashboard",
                "description": "Users who have created access to the Item can synchronize.",
                "operationId": "Synchronize_Published_Dashboard",
                "parameters": [
                    {
                        "name": "itemId",
                        "in": "path",
                        "description": "ID of the item will be Synchronized.",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "guid",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "Details of the item passed will be synchronized.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiItemSynchronize"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The dashboard is being synchronized to one or more sites.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The content of the request body is missing or incomplete.",
                        "content": {}
                    },
                    "403": {
                        "description": "Access denied for the item.",
                        "content": {}
                    },
                    "404": {
                        "description": "Item details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type is not POST.",
                        "content": {}
                    },
                    "406": {
                        "description": "The content of the request body is invalid.",
                        "content": {}
                    },
                    "417": {
                        "description": "The published dashboard failed to synchronize.",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "Item synchronization"
            } 
        },
        "/v5.0/profile/notifications": {
            "get": {
                "tags": [
                    "User Profile"
                ],
                "summary": "Get User Notifications Settings",
                "description": "Retrieves the user notifications settings details of the particular site.",
                "operationId": "UserProfile_GetUserNotificationSettings",
                "responses": {
                    "200": {
                        "description": "User notification settings details have been retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserNotificationSettings"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "User Profile"
                ],
                "summary": "Update User Notification Settings",
                "description": "Users can update the user notification settings.",
                "operationId": "UserProfile_UpdateUserNotificationSettings",
                "requestBody": {
                    "description": "The details of the user notification settings that have been passed will be updated.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserNotificationSettings"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "User notification settings details have been updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not PUT.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/activity-logs":{
            "get":{
                "tags":[
                    "Audit Logs"
                ],
                "summary": "All Activity Logs",
                "description": "With this endpoint, site administrator can retrieve list of all activities performed in the site.",
                "operationId": "ActivityLogs_GetAllActivityLogs",
                "parameters": [
                    {
                        "type": "string",
                        "name": "startDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "endDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of activities retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetActivityLogs"
                                }
                            }
                        }
                    },
                    "204":{
                        "description": "Log is empty",
                        "content": {}
                    },
                    "400": {
                        "description": "Invalid log module",
                        "content": {}
                    },
                    "401":{
                        "description":"Access denied",
                        "content":{}
                    },
                    "405": {
                        "description": "Request type was not GET",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/activity-logs?activitymodule=group":{
            "get":{
                "tags":[
                    "Audit Logs"
                ],
                "summary": "Group Activity Logs",
                "description": "With this endpoint, site administrator can retrieve the list of activities performed in group module.",
                "operationId": "ActivityLogs_GetGroupActivityLogs",
                "parameters":[
                    {
                        "name": "activity",
                        "in": "query",
                        "required": false,
                        "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code> Add, Update, Delete, Sychroniztion, Import, Visit, UserAdd, UserRemove </code>",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "startDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "endDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    }
                ],
                "responses":{
                    "200":{
                        "description": "List of group activities retrieved successfully.",
                        "content":{
                            "application/json":{
                                "schema":{
                                    "$ref": "#/components/schemas/ApiGetGroupActivityLogs"
                                }
                            }
                        }
                    },
                    "204":{
                        "description": "Log is empty",
                        "content": {}
                    },
                    "400": {
                        "description": "Invalid log module",
                        "content": {}
                    },
                    "401":{
                        "description":"Access denied",
                        "content":{}
                    },
                    "405": {
                        "description": "Request type was not GET",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/activity-logs?activitymodule=grouppermission":{
            "get":{
                "tags":[
                    "Audit Logs"
                ],
                "summary": "Group Permission Activity Logs",
                "description": "With this endpoint, site administrator can retrieve the list of activities performed in group permission module.",
                "operationId": "ActivityLogs_GetGroupPermissionActivityLogs",
                "parameters":[
                    {
                        "type": "string",
                        "name": "activity",
                        "in": "query",
                        "required": false,
                        "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>PermissionAdded, PermissionRemoved</code>",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "startDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "endDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    }
                ],
                "responses":{
                    "200":{
                        "description": "List of group permission activities retrieved successfully.",
                        "content":{
                            "application/json":{
                                "schema":{
                                    "$ref": "#/components/schemas/ApiGetGrouppermissionActivityLogs"
                                }
                            }
                        }
                    },
                    "204":{
                        "description": "Log is empty",
                        "content": {}
                    },
                    "400": {
                        "description": "Invalid log module",
                        "content": {}
                    },
                    "401":{
                        "description":"Access denied",
                        "content":{}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/activity-logs?activitymodule=user":{
            "get":{
                "tags":[
                    "Audit Logs"
                ],
                "summary": "User Activity Logs",
                "description": "With this endpoint, site administrator can retrieve the list of activities performed in user module.",
                "operationId": "ActivityLogs_GetUserActivityLogs",
                "parameters":[
                    {
                        "type": "string",
                        "name": "activity",
                        "in": "query",
                        "required": false,
                        "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>Add, Update, Delete, Sychroniztion, Import, Visit</code>",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "startDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "endDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    }
                ],
                "responses":{
                    "200":{
                        "description": "List of user activities retrieved successfully.",
                        "content":{
                            "application/json":{
                                "schema":{
                                    "$ref": "#/components/schemas/ApiGetUserActivityLogs"
                                }
                            }
                        }
                    },
                    "204":{
                        "description": "Log is empty",
                        "content": {}
                    },
                    "400": {
                        "description": "Invalid log module",
                        "content": {}
                    },
                    "401":{
                        "description":"Access denied",
                        "content":{}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/activity-logs?activitymodule=userpermission":{
            "get":{
                "tags":[
                    "Audit Logs"
                ],
                "summary": "User Permission Activity Logs",
                "description": "With this endpoint, site administrator can retrieve the list of activities performed in user permission module.",
                "operationId": "ActivityLogs_GetUserPermissionActivityLogs",
                "parameters":[
                    {
                        "type": "string",
                        "name": "activity",
                        "in": "query",
                        "required": false,
                        "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>PermissionAdded, PermissionRemoved</code>",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "startDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "endDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    }
                ],
                "responses":{
                    "200":{
                        "description": "List of user permission activities retrieved successfully.",
                        "content":{
                            "application/json":{
                                "schema":{
                                    "$ref": "#/components/schemas/ApiGetUserPermissionActivityLogs"
                                }
                            }
                        }
                    },
                    "204":{
                        "description": "Log is empty",
                        "content": {}
                    },
                    "400": {
                        "description": "Invalid log module",
                        "content": {}
                    },
                    "401":{
                        "description":"Access denied",
                        "content":{}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/activity-logs?activitymodule=comment":{
            "get":{
                "tags":[
                    "Audit Logs"
                ],
                "summary": "Comment Activity Logs",
                "description": "With this endpoint, site administrator can retrieve the list of activities performed in the dashboard comment module.",
                "operationId": "ActivityLogs_GetCommentActivityLogs",
                "parameters":[
                    {
                        "type": "string",
                        "name": "activity",
                        "in": "query",
                        "required": false,
                        "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>Added, Edited, Deleted, Replied, UserMention</code>",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "startDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "endDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    }
                ],
                "responses":{
                    "200":{
                        "description": "List of comment activities retrieved successfully.",
                        "content":{
                            "application/json":{
                                "schema":{
                                    "$ref": "#/components/schemas/ApiGetCommentActivityLogs"
                                }
                            }
                        }
                    },
                    "204":{
                        "description": "Log is empty",
                        "content": {}
                    },
                    "400": {
                        "description": "Invalid log module",
                        "content": {}
                    },
                    "401":{
                        "description":"Access denied",
                        "content":{}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/activity-logs?activitymodule=schedule":{
            "get":{
                "tags":[
                    "Audit Logs"
                ],
                "summary": "Schedule Activity Logs",
                "description": "With this endpoint, site administrator can retrieve the list of activities performed in schedule module.",
                "operationId": "ActivityLogs_GetScheduleActivityLogs",
                "parameters":[
                    {
                        "type": "string",
                        "name": "activity",
                        "in": "query",
                        "required": false,
                        "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>Success, Failure</code>",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "startDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "endDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    }
                ],
                "responses":{
                    "200":{
                        "description": "List of schedule activities retrieved successfully.",
                        "content":{
                            "application/json":{
                                "schema":{
                                    "$ref": "#/components/schemas/ApiGetScheduleActivityLogs"
                                }
                            }
                        }
                    },
                    "204":{
                        "description": "Log is empty",
                        "content": {}
                    },
                    "400": {
                        "description": "Invalid log module",
                        "content": {}
                    },
                    "401":{
                        "description":"Access denied",
                        "content":{}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/activity-logs?activitymodule=system":{
            "get":{
                "tags":[
                    "Audit Logs"
                ],
                "summary": "System Activity Logs",
                "description": "With this endpoint, site administrator can retrieve the list of activities performed in system settings module.",
                "operationId": "ActivityLogs_GetSystemActivityLogs",
                "parameters":[
                    {
                        "type": "string",
                        "name": "activity",
                        "in": "query",
                        "required": false,
                        "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>Add, Update, Delete, Visit, Enable, Disable</code>",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "startDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "endDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    }
                ],
                "responses":{
                    "200":{
                        "description": "List of system activities retrieved successfully.",
                        "content":{
                            "application/json":{
                                "schema":{
                                    "$ref": "#/components/schemas/ApiGetSystemActivityLogs"
                                }
                            }
                        }
                    },
                    "204":{
                        "description": "Log is empty",
                        "content": {}
                    },
                    "400": {
                        "description": "Invalid log module",
                        "content": {}
                    },
                    "401":{
                        "description":"Access denied",
                        "content":{}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/activity-logs?activitymodule=item":{
            "get":{
                "tags":[
                    "Audit Logs"
                ],
                "summary": "Item Activity Logs",
                "description": "With this endpoint, site administrator can retrieve the list of activities performed in item module.",
                "operationId": "ActivityLogs_GetItemActivityLogs",
                "parameters":[
                    {
                        "type": "string",
                        "name": "activity",
                        "in": "query",
                        "required": false,
                        "description": "You can either ignore this or only pass the single activity value. <br/>Values allowed are <code>Added, Edited, Deleted, Moved, Copied, Cloned, Trashed, Restored, Rollbacked, Visited, Downloaded</code>",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "itemType",
                        "in": "query",
                        "required": false,
                        "description": "Type of the Item. <br/>Values allowed are <code>Category, Dashboard, DataSource, Schedule</code>",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "startDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC start date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    },
                    {
                        "type": "string",
                        "name": "endDate",
                        "in": "query",
                        "required": false,
                        "description": "Specify the UTC end date to filter the logs with a particular date range.<br /> The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.",
                        "format":"date-time",
                        "schema": {
                            "type": "string",
                            "nullable": false
                        }
                    }
                ],
                "responses":{
                    "200":{
                        "description": "List of item activities retrieved successfully.",
                        "content":{
                            "application/json":{
                                "schema":{
                                    "$ref": "#/components/schemas/ApiGetitemActivityLogs"
                                }
                            }
                        }
                    },
                    "204":{
                        "description": "Log is empty",
                        "content": {}
                    },
                    "400": {
                        "description": "Invalid log module",
                        "content": {}
                    },
                    "401":{
                        "description":"Access denied",
                        "content":{}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            }
        },
        "/v5.0/settings/webhooks":{
            "get":{
                "tags":[
                    "Webhooks"
                ],
                "summary":"Get Webhooks",
                "description": "Using this endpoint, the user can obtain a list of webhooks.",
                "operationId": "Webhooks_GetWebhooks",
                "responses":{
                    "200":{
                        "description": "Wehbooks details have been retrived successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WehbooksSettings"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {}
                    },
                    "204": {
                        "description": "Wehbooks list is empty.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not GET.",
                        "content": {}
                    }
                }
            },
            "delete":{
                "tags":[
                    "Webhooks"
                ],
                "summary":"Delete Webhook",
                "description":"Delete the webhook.",
                "operationId":"Delete_Webhooks",
                "parameters":[
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the webhook",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema":{
                            "type": "string",
                            "format": "int32",
                            "nullable": false 
                        }
                    }
                ],
                "responses":{
                    "400": {
                        "description": "Invalid webhook ID.",
                        "content": {}
                    },
                    "401":{
                        "description":"Access denied",
                        "content":{}
                    },
                    "404": {
                        "description": "Webhook details not found.",
                        "content": {}
                    },
                    "405": {
                        "description": "Request type was not DELETE.",
                        "content": {}
                    },
                    "417": {
                        "description": "Failed to delete webhook.",
                        "content": {}
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Response": {
                "type": "object",
                "properties": {
                    "access_token": {
                        "type": "string",
                        "description": "Authentication token of the user."
                    },
                    "token_type": {
                        "type": "string",
                        "description": "Type of token assigned by the authorization server."
                    },
                    "expires_in": {
                        "type": "string",
                        "description": "The lifetime in seconds of the access token."
                    },
                    "Email": {
                        "type": "string",
                        "description": "Email of the authenticated user."
                    }
                },
                "x-typeName": "Response"
            },
            "PasswordAuth": {
                "required": [
                    "grant_type",
                    "password",
                    "username"
                ],
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Email address of the user.",
                        "nullable": false
                    },
                    "password": {
                        "type": "string",
                        "description": "Password of the user",
                        "nullable": false
                    },
                    "grant_type": {
                        "type": "string",
                        "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>password</code>",
                        "nullable": false
                    }
                }
            },
            "EmbedSecretAuth": {
                "required": [
                    "embed_secret",
                    "grant_type",
                    "username"
                ],
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Email address of the user.",
                        "nullable": false
                    },
                    "embed_secret": {
                        "type": "string",
                        "description": "Embed secret of the site",
                        "nullable": false
                    },
                    "grant_type": {
                        "type": "string",
                        "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>embed_secret</code>",
                        "nullable": false
                    }
                }
            },
            "ApiResponse": {
                "required": [
                    "ApiStatus",
                    "Status"
                ],
                "type": "object",
                "properties": {
                    "ApiStatus": {
                        "type": "boolean",
                        "description": "Returns the status of the API."
                    },
                    "Data": {
                        "type": "object",
                        "description": "Returns data from the API."
                    },
                    "Status": {
                        "type": "boolean",
                        "description": "Returns status of the API request."
                    },
                    "StatusMessage": {
                        "type": "string",
                        "description": "Returns the status message from the API."
                    },
                    "Message": {
                        "type": "string",
                        "description": "Returns the message from the API."
                    }
                }
            },
            "ApiGroupAdd": {
                "type": "array",
                "description": "Group detail.",
                "items": {
                    "$ref": "#/components/schemas/Group"
                }
            },
            "Group": {
                "required": [
                    "Name"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Name of the group."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Description of the group."
                    }
                },
                "description": "Group detail"
            },
            "DirectoryType": {
                "type": "string",
                "enum": [
                    "All",
                    "Local",
                    "AzureAD",
                    "ExternalDatabase"
                ],
                "x-enumNames": [
                    "All",
                    "Local",
                    "AzureAD",
                    "ExternalDatabase"
                ]
            },
            "ApiGroupUsers": {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "array",
                        "description": "List of user IDs",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                },
                "description": "User(s) added/removed from the group."
            },
            "UserStatus": {
                "type": "string",
                "enum": [
                    "Active",
                    "InActive"
                ],
                "x-enumNames": [
                    "Active",
                    "InActive"
                ]
            },
            "ApiGroup": {
                "required": [
                    "Id",
                    "IsAzureADGroup"
                ],
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "integer",
                        "description": "ID of the group.",
                        "format": "int32"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Name of the group."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Description of the group."
                    },
                    "IsAzureADGroup": {
                        "type": "boolean",
                        "description": "Returns true, if the group is added from Azure Active Directory."
                    }
                },
                "description": "Group detail"
            },
            "ApiGroupEdit": {
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Name of the group."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Description of the group."
                    }
                },
                "description": "Group detail"
            },
            "ApiAzureADGroup": {
                "required": [
                    "GroupName"
                ],
                "type": "object",
                "properties": {
                    "GroupName": {
                        "type": "array",
                        "description": "List of group names",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ApiAzureGroupImportResponse": {
                "type": "object",
                "properties": {
                    "ApiStatus": {
                        "type": "boolean",
                        "description": "Returns the status of the API."
                    },
                    "ImportStatus": {
                        "type": "array",
                        "description": "Returns Azure AD group import status.",
                        "items": {
                            "$ref": "#/components/schemas/ApiAzureGroupImportStatus"
                        }
                    }
                }
            },
            "ApiAzureGroupImportStatus": {
                "type": "object",
                "properties": {
                    "FailedUsers": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Failed users count ."
                    },
                    "GroupName": {
                        "type": "string",
                        "description": "Name of the Azure AD group."
                    },
                    "StatusMessage": {
                        "type": "string",
                        "description": "Status message of the imported group."
                    },
                    "ImportedUsers": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Imported users count ."
                    },
                    "Status": {
                        "type": "boolean",
                        "description": "Status of the group import."
                    }
                }
            },
            "ApiUserAdd": {
                "required": [
                    "Email",
                    "FirstName",
                    "Username"
                ],
                "type": "object",
                "properties": {
                    "Username": {
                        "type": "string",
                        "description": "Username of the user. \n\n<B>If you are using a cloud analytics server, then the username field is not required to be used</B>."
                    },
                    "Email": {
                        "type": "string",
                        "description": "Email address of the user (Email required only in [Email required](/site-administration/account-settings/#email-required) mode)."
                    },
                    "FirstName": {
                        "type": "string",
                        "description": "First name of the user"
                    },
                    "Lastname": {
                        "type": "string",
                        "description": "Last name of the user"
                    },
                    "Password": {
                        "type": "string",
                        "description": "Password of the user (Password accepted only in [Automatic activation](/site-administration/account-settings/#automatic-activation) mode)."
                    }
                },
                "description": "User detail"
            },
            "ApiDownloadCsvTemplate": {
                "required": [
                    "ApiStatus",
                    "Status"
                ],
                "type": "object",
                "properties": {
                    "ApiStatus": {
                        "type": "boolean",
                        "description": "Returns the status of the API."
                    },
                    "Status": {
                        "type": "boolean",
                        "description": "Returns status of the API request."
                    },
                    "StatusMessage": {
                        "type": "string",
                        "description": "Returns the status message from the API."
                    },
                    "FileContent": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "description": "Returns CSV file in array of bytes.",
                        "format": "byte"
                    }
                },
                "description": "Contains response of downloaded CSV template file."
            },
            "ApiCsvUserImportRequest": {
                "required": [
                    "CsvFileContent"
                ],
                "type": "object",
                "properties": {
                    "CsvFileContent": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "description": "Provides the CSV file in an array of bytes.",
                        "format": "byte"
                    }
                },
                "description": "Contains CSV user import request."
            },
            "ApiCsvUserImportResponse": {
                "required": [
                    "ApiStatus",
                    "Status"
                ],
                "type": "object",
                "properties": {
                    "ApiStatus": {
                        "type": "boolean",
                        "description": "Returns the status of the API."
                    },
                    "Status": {
                        "type": "boolean",
                        "description": "Returns status of the API request."
                    },
                    "JobId": {
                        "type": "integer",
                        "description": "Returns job id of current CSV import job."
                      },
                      "JobStatus": {
                        "type": "boolean",
                        "description": "Returns job status current CSV import job"
                      },
                      "CreatedDate": {
                        "type": "string",
                        "description": "Date created of the job in string format.",
                        "format": "datetime"
                      },
                      "ImportSource": {
                        "type": "string",
                        "description": "Returns import source of the user import."
                      },
                    "StatusMessage": {
                        "type": "string",
                        "description": "Returns the status message from the API."
                    }
                },
                "description": "Contains response of Csv user import"
            },
            "ApiBulkImportJobDetailsResponse": {
                "type": "object",
                "properties": {
                  "ApiStatus": {
                    "type": "boolean",
                    "description": "Returns the status of the API."
                  },
                  "Data":{
                    "properties":{
                      "JobId": {
                        "type": "integer",
                        "description": "Returns job id of current CSV import job."
                      },
                      "ImportSource": {
                        "type": "string",
                        "description": "Returns import source of the user import."
                      },
                      "Status": {
                        "type": "boolean",
                        "description": "Returns job status current CSV import job"
                      },
                      "CreatedDate": {
                        "type": "string",
                        "description": "Date created of the job in string format.",
                        "format": "datetime"
                      },
                      "LastUpdatedDate": {
                        "type": "string",
                        "description": "Date created of the job in string format.",
                        "format": "datetime"
                      },
                      "TotalUser": {
                        "type": "integer",
                        "description": "Returns total user count of current CSV import job."
                      },
                      "FailedImport": {
                        "type": "integer",
                        "description": "Returns failed import users count current CSV import job."
                      },
                      "ImportUser": {
                        "type": "integer",
                        "description": "Returns imported user count of current CSV import job."
                      },
                      "YetToImport": {
                        "type": "integer",
                        "description": "Returns yet to import user count of current CSV import job."
                      }
                    }
                  },
                  "Status": {
                    "type": "boolean",
                    "description": "Returns status of the API request."
                  },
                  "StatusMessage": {
                    "type": "string",
                    "description": "Returns the status message from the API."
                  }
                },
                "description": "Contains response of Csv user import"
              },
              "ApiFailedImportUsersDetailResponse": {
                "type": "object",
                "properties": {
                  "ApiStatus": {
                    "type": "boolean",
                    "description": "Returns the status of the API."
                  },
                  "Data":{
                    "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ApiFailedUsers"
                          }
                  },
                  "Status": {
                    "type": "boolean",
                    "description": "Returns status of the API request."
                  },
                  "StatusMessage": {
                    "type": "string",
                    "description": "Returns the status message from the API."
                  }
                },
                "description": "Contains response of failed import users detail"
              },
            "ApiUserDetailV4": {
                "type": "object",
                "properties": {
                    "ContactNumber": {
                        "type": "string",
                        "description": "Phone number of the user"
                    },
                    "DisplayName": {
                        "type": "string",
                        "description": "Display name of the user"
                    },
                    "Email": {
                        "type": "string",
                        "description": "Email address of the user"
                    },
                    "FirstName": {
                        "type": "string",
                        "description": "First name of the user"
                    },
                    "IsActive": {
                        "type": "boolean",
                        "description": "Returns true, if the user is an active user"
                    },
                    "Lastname": {
                        "type": "string",
                        "description": "Last name of the user"
                    },
                    "UserStatus": {
                        "description": "Returns the status of the user",
                        "$ref": "#/components/schemas/UserStatus"
                    },
                    "UserId": {
                        "type": "integer",
                        "description": "ID of the user",
                        "format": "int32"
                    },
                    "Username": {
                        "type": "string",
                        "description": "Username of the user"
                    },
                    "DirectoryType": {
                        "$ref": "#/components/schemas/DirectoryType"
                    },
                    "Avatar": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "description": "Profile picture of the user",
                        "format": "byte"
                    }
                },
                "description": "Detail of the User"
            },
            "ApiUserEdit": {
                "type": "object",
                "properties": {
                    "Username": {
                        "type": "string",
                        "description": "Username of the user"
                    },
                    "Email": {
                        "type": "string",
                        "description": "Email address of the user"
                    },
                    "FirstName": {
                        "type": "string",
                        "description": "First name of the user"
                    },
                    "Lastname": {
                        "type": "string",
                        "description": "Last name of the user"
                    },
                    "ContactNumber": {
                        "type": "string",
                        "description": "Phone number of the user"
                    }
                },
                "description": "User detail"
            },
            "ApiItemViewsAdd": {
                "required": [
                    "IsPublic",
                    "ItemId",
                    "QueryString",
                    "ViewName"
                ],
                "type": "object",
                "properties": {
                    "ViewName": {
                        "type": "string",
                        "description": "Specify name of the view."
                    },
                    "ItemId": {
                        "type": "string",
                        "description": "Specify ID of the dashboard.",
                        "format": "guid"
                    },
                    "ChildItemId": {
                        "type": "string",
                        "description": "Specify ID of the child dashboard.",
                        "format": "guid"
                    },
                    "QueryString": {
                        "type": "string",
                        "description": "Specify the filter query.",
                        "example": "Year(OrderDate)=1996"
                    },
                    "IsPublic": {
                        "type": "boolean",
                        "description": "Specify <i>true</i> to set the view as public"
                    }
                },
                "description": "Add dashboard view request details."
            },
            "ApiItemViewsUpdate": {
                "required": [
                    "DashboardId",
                    "ViewId"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Specify name of the view."
                    },
                    "ViewId": {
                        "type": "string",
                        "description": "Specify ID of the dashboard view.",
                        "format": "guid"
                    },
                    "DashboardId": {
                        "type": "string",
                        "description": "Specify ID of the dashboard.",
                        "format": "guid"
                    },
                    "QueryString": {
                        "type": "string",
                        "description": "Specify the filter query.",
                        "example": "Year(OrderDate)=1996"
                    }
                },
                "description": "Update dashboard view request details."
            },
            "ApiItemViewResponse": {
                "required": [
                    "CanDelete",
                    "CanEdit",
                    "CanShare",
                    "IsPublic",
                    "ItemId",
                    "UserId",
                    "ViewId"
                ],
                "type": "object",
                "properties": {
                    "CanDelete": {
                        "type": "boolean",
                        "description": "Specifies the delete permission of the view."
                    },
                    "CanEdit": {
                        "type": "boolean",
                        "description": "Specifies the write permission of the view."
                    },
                    "CanShare": {
                        "type": "boolean",
                        "description": "Specifies the share permission of the view."
                    },
                    "IsPublic": {
                        "type": "boolean",
                        "description": "Returns true, if the view is public."
                    },
                    "ItemId": {
                        "type": "string",
                        "description": "Specifies the ID of the dashboard.",
                        "format": "guid"
                    },
                    "QueryString": {
                        "type": "string",
                        "description": "Specifies the filter query string."
                    },
                    "UserId": {
                        "type": "integer",
                        "description": "Specifies the ID of the user.",
                        "format": "int32"
                    },
                    "ViewId": {
                        "type": "string",
                        "description": "Specifies the ID of the view.",
                        "format": "guid"
                    },
                    "ViewName": {
                        "type": "string",
                        "description": "Specifies the name of the view."
                    }
                },
                "description": "Dashboard view response details."
            },
            "PaginatedApiResponse": {
                "type": "object",
                "properties": {
                    "Data": {
                        "type": "array",
                        "description": "Returns data from the API.",
                        "items": {
                            "$ref": "#/components/schemas/ApiItems"
                        }
                    },
                    "TotalResults": {
                        "type": "integer",
                        "description": "Returns items count of the API request.",
                        "format": "int32"
                    },
                    "Links": {
                        "type": "array",
                        "description": "Returns pagination links.",
                        "items": {
                            "$ref": "#/components/schemas/Links"
                        }
                    }
                }
            },
            "ApiItems": {
                "type": "object",
                "properties": {
                    "CanRead": {
                        "type": "boolean",
                        "description": "Specifies the read permission of the item."
                    },
                    "CanWrite": {
                        "type": "boolean",
                        "description": "Specifies the write permission of the item."
                    },
                    "CanDelete": {
                        "type": "boolean",
                        "description": "Specifies the delete permission of the item."
                    },
                    "CanDownload": {
                        "type": "boolean",
                        "description": "Specifies the download permission of the item."
                    },
                    "CanSchedule": {
                        "type": "boolean",
                        "description": "Specifies the schedule permission of the item."
                    },
                    "CanOpen": {
                        "type": "boolean",
                        "description": "Specifies the open permission of the item."
                    },
                    "CanMove": {
                        "type": "boolean",
                        "description": "Specifies the move permission of the item."
                    },
                    "CanCopy": {
                        "type": "boolean",
                        "description": "Specifies the copy permission of the item."
                    },
                    "CanClone": {
                        "type": "boolean",
                        "description": "Specifies the clone permission of the item."
                    },
                    "CanCreateItem": {
                        "type": "boolean",
                        "description": "Specifies the create permission of the item."
                    },
                    "Id": {
                        "type": "string",
                        "description": "Item ID.",
                        "format": "guid"
                    },
                    "ItemType": {
                        "type": "string",
                        "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Datasource, Schedule</code>"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Item name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Item description."
                    },
                    "ItemLocation": {
                        "type": "string",
                        "description": "Item location."
                    },
                    "CreatedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item creator.",
                        "format": "int32"
                    },
                    "CreatedByDisplayName": {
                        "type": "string",
                        "description": "Specifies the display name of the user who created the item."
                    },
                    "ModifiedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item modifier.",
                        "format": "int32"
                    },
                    "ModifiedByFullName": {
                        "type": "string",
                        "description": "Specifies the full name of the user who modified the item."
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "CategoryName": {
                        "type": "string",
                        "description": "Category name."
                    },
                    "CreatedDate": {
                        "type": "string",
                        "description": "Date created of item in string format."
                    },
                    "ModifiedDate": {
                        "type": "string",
                        "description": "Date modified of item in string format."
                    },
                    "ItemModifiedDate": {
                        "type": "string",
                        "description": "Date modified of item in date format.",
                        "format": "date-time"
                    },
                    "ItemCreatedDate": {
                        "type": "string",
                        "description": "Date created of item in date format.",
                        "format": "date-time"
                    },
                    "IsMultiDashboard": {
                        "type": "boolean",
                        "description": "Returns true, if the dashboard is multi-dashboard."
                    },
                    "IsFavorite": {
                        "type": "boolean",
                        "description": "Returns true, if it is a favorite item."
                    },
                    "IsPublic": {
                        "type": "boolean",
                        "description": "Returns true, if the item is public."
                    },
                    "TabDetail": {
                        "type": "array",
                        "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
                        "items": {
                            "$ref": "#/components/schemas/ApiTabDetail"
                        }
                    }
                },
                "description": "Details of items."
            },
            "ApiCopyDashboardRequestV4": {
                "required": [
                    "CategoryId",
                    "IsCopyDatasource",
                    "IsPublic",
                    "Name"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Dashboard name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Dashboard description."
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "IsPublic": {
                        "type": "boolean",
                        "description": "Specify <i>true</i> to set the item as a public."
                    },
                    "IsCopyDatasource": {
                        "type": "boolean",
                        "description": "Copy the data source of dashboard based on this value "
                    }
                },
                "description": "Dashboard details."
            },
            "ApiCopyItemResponse": {
                "required": [
                    "ApiStatus",
                    "PublishedItemId",
                    "Status",
                    "Version"
                ],
                "type": "object",
                "properties": {
                    "ApiStatus": {
                        "type": "boolean",
                        "description": "Returns the status of the API."
                    },
                    "Status": {
                        "type": "boolean",
                        "description": "Returns status of the API request."
                    },
                    "PublishedItemId": {
                        "type": "string",
                        "description": "Returns the published item id",
                        "format": "guid"
                    },
                    "Version": {
                        "type": "integer",
                        "description": "Returns the version number of the item",
                        "format": "int32"
                    },
                    "StatusMessage": {
                        "type": "string",
                        "description": "Returns the status message from the API."
                    }
                },
                "description": "Response details of the copied item."
            },
            "ItemType": {
                "type": "string",
                "description": "Item type"
            },
            "ApiPublicItems": {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "string",
                        "description": "Item ID.",
                        "format": "guid"
                    },
                    "ItemType": {
                        "type": "string",
                        "description": "Item type.<br />Value allowed is <code>Dashboard</code>"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Item name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Item description."
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "CategoryName": {
                        "type": "string",
                        "description": "Category name."
                    },
                    "CategoryDescription": {
                        "type": "string",
                        "description": "Category discription."
                    },
                    "CreatedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item creator.",
                        "format": "int32"
                    },
                    "CreatedByDisplayName": {
                        "type": "string",
                        "description": "Specifies the display name of the user who created the item."
                    },
                    "ModifiedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item modifier.",
                        "format": "int32"
                    },
                    "ModifiedByFullName": {
                        "type": "string",
                        "description": "Specifies the full name of the user who modified the item."
                    },
                    "CreatedDate": {
                        "type": "string",
                        "description": "Date created of item in string format."
                    },
                    "ModifiedDate": {
                        "type": "string",
                        "description": "Date modified of item in string format."
                    },
                    "ItemCreatedDate": {
                        "type": "string",
                        "description": "Date created of item in date format.",
                        "format": "date-time"
                    },
                    "ItemModifiedDate": {
                        "type": "string",
                        "description": "Date modified of item in date format.",
                        "format": "date-time"
                    },
                    "IsMultiTabbedDashboard": {
                        "type": "boolean",
                        "description": "Returns true, if the dashboard is a multi-tabbed dashboard."
                    },
                    "TabDetail": {
                        "type": "array",
                        "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
                        "items": {
                            "$ref": "#/components/schemas/ApiTabDetail"
                        }
                    },
                    "IsFavorite": {
                        "type": "boolean",
                        "description": "Returns true, if it is a favorite item."
                    }
                },
                "description": "Details of public items."
            },
            "ApiUpdateDashboardPublicV5": {
                "required":[
                    "Public"
                ],
                "type" : "object",
                "properties": {
                    "Public": {
                        "type" : "boolean",
                        "description" : "Specify true to update the dashboard as public."
                    },
                    "Unlisted": {
                        "type": "boolean",
                        "description" : "Specify true to update the dashboard as unlisted."
                    }
                },
                "description" : "Details of the public or private dashboards item."
            },
            "ApiTabDetail": {
                "type": "object",
                "properties": {
                    "DashboardId": {
                        "type": "string",
                        "description": "Specifies the dashboard ID of the tab.",
                        "format": "guid"
                    },
                    "DashboardName": {
                        "type": "string",
                        "description": "Specifies the name of the dashboard."
                    },
                    "TabName": {
                        "type": "string",
                        "description": "Specifies the name of the tab."
                    },
                    "CreatedDate": {
                        "type": "string",
                        "description": "Date created of the item in string format.",
                        "format": "datetime"
                    },
                    "ModifiedDate": {
                        "type": "string",
                        "description": "Date modified of the item in string format.",
                        "format": "datetime"
                    }
                },
                "description": "Multitab dashboard item detail."
            },
            "ApiFavoriteitems": {
                "type": "object",
                "properties": {
                    "DashboardId": {
                        "type": "string",
                        "description": "Dashboard ID.",
                        "format": "guid"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Dashboard name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Dashboard description."
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "CategoryName": {
                        "type": "string",
                        "description": "Category name."
                    },
                    "CategoryDescription": {
                        "type": "string",
                        "description": "Category description."
                    },
                    "CreatedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item creator.",
                        "format": "int32"
                    },
                    "CreatedByDisplayName": {
                        "type": "string",
                        "description": "Specifies the display name of the user who created the item."
                    },
                    "ModifiedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item modifier.",
                        "format": "int32"
                    },
                    "ModifiedByFullName": {
                        "type": "string",
                        "description": "Specifies the full name of the user who modified the item."
                    },
                    "CreatedDate": {
                        "type": "string",
                        "description": "Date created of item in string format."
                    },
                    "ModifiedDate": {
                        "type": "string",
                        "description": "Date modified of item in string format."
                    },
                    "ItemCreatedDate": {
                        "type": "string",
                        "description": "Date created of item in date format.",
                        "format": "date-time"
                    },
                    "ItemModifiedDate": {
                        "type": "string",
                        "description": "Date modified of item in date format.",
                        "format": "date-time"
                    },
                    "IsMultiTabbedDashboard": {
                        "type": "boolean",
                        "description": "Returns true, if the dashboard is a multi-tabbed dashboard."
                    },
                    "IsPublic": {
                        "type": "boolean",
                        "description": "Returns true, if the item is public."
                    }
                },
                "description": "Details of favorite items."
            },
            "ApiUpdateFavorite": {
                "required": [
                    "DashboardId",
                    "Favorite"
                ],
                "type": "object",
                "properties": {
                    "DashboardId": {
                        "type": "string",
                        "description": "Dashboard ID.",
                        "format": "guid"
                    },
                    "Favorite": {
                        "type": "boolean",
                        "description": "Specify true to set the item as a favorite item."
                    }
                },
                "description": "Details about the favorite item."
            },
            "ApiExportDashboard": {
                "required": [
                    "DashboardId",
                    "ExportType"
                ],
                "type": "object",
                "properties": {
                    "DashboardId": {
                        "type": "string",
                        "description": "Dashboard ID.",
                        "format": "guid"
                    },
                    "ServerPath": {
                        "type": "string",
                        "description": "Specifies the category name of the dashboard."
                    },
                    "ExportType": {
                        "type": "string",
                        "description": "Export type.<br />Values allowed are <code>Excel, Pdf, Image</code>"
                    },
                    "FilterParameter": {
                        "type": "string",
                        "description": "Specify the filter parameter. \n\n**Note:**  To know more about supported operators and funtions in filter parameter, refer to [this](/working-with-dashboards/preview-dashboard/urlparameters/#supported-operators/).",
                        "example": "Department= Cardiology & Year(Date)=2021"
                    }
                },
                "description": "Details about the dashboard to be exported."
            },
            "ApiExportDashboardResponse": {
                "type": "object",
                "properties": {
                    "ApiStatus": {
                        "type": "boolean",
                        "description": "Returns the status of the API."
                    },
                    "Status": {
                        "type": "boolean",
                        "description": "Returns status of the API request."
                    },
                    "StatusMessage": {
                        "type": "string",
                        "description": "Returns the status message from the API."
                    },
                    "FileContent": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "description": "Returns the exported dashboard in an array of bytes.",
                        "format": "byte"
                    }
                }
            },
            "ApiSpecifiedItemDetail": {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "string",
                        "description": "Item ID.",
                        "format": "guid"
                    },
                    "ItemType": {
                        "type": "string",
                        "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Datasource, Schedule</code>"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Item name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Item description."
                    },
                    "CreatedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item creator.",
                        "format": "int32"
                    },
                    "CloneOf": {
                        "type": "string",
                        "description": "Item ID from where the item was cloned.",
                        "format": "guid"
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "CategoryName": {
                        "type": "string",
                        "description": "Category name."
                    },
                    "ItemCreatedDate": {
                        "type": "string",
                        "description": "Date created of item in date format.",
                        "format": "date-time"
                    },
                    "ItemModifiedDate": {
                        "type": "string",
                        "description": "Date modified of item in date format.",
                        "format": "date-time"
                    },
                    "CreatedDate": {
                        "type": "string",
                        "description": "Date created of item in string format."
                    },
                    "ModifiedDate": {
                        "type": "string",
                        "description": "Date modified of item in string format."
                    },
                    "ModifiedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item modifier.",
                        "format": "int32"
                    },
                    "Extension": {
                        "type": "string",
                        "description": "Item extension."
                    },
                    "IsPublic": {
                        "type": "boolean",
                        "description": "Returns true, if the item is public."
                    },
                    "IsActive": {
                        "type": "boolean",
                        "description": "Returns true, if the item is active."
                    }
                },
                "description": "Item Details."
            },
            "ApiGetWidget": {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "string",
                        "description": "Widget ID.",
                        "format": "guid"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Widget name."
                    },
                    "ItemType": {
                        "type": "string",
                        "description": "Item type.<br />Value allowed is <code>Widget</code>"
                    },
                    "CreatedByDisplayName": {
                        "type": "string",
                        "description": "Specifies the display name of the widget creator."
                    },
                    "CreatedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the widget creator.",
                        "format": "int32"
                    },
                    "CreatedDate": {
                        "type": "string",
                        "description": "Date created of widget in string format."
                    },
                    "ModifiedByFullName": {
                        "type": "string",
                        "description": "Specifies the full name of the widget modifier."
                    },
                    "ModifiedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the widget modifier.",
                        "format": "int32"
                    },
                    "ModifiedDate": {
                        "type": "string",
                        "description": "Date modified of widget in string format."
                    },
                    "WidgetInfo": {
                        "properties": {
                            "Id": {
                                "type": "string",
                                "description": "Specifies the widget ID.",
                                "format": "guid"
                            },
                            "Name": {
                                "type": "string",
                                "description": "Specifies the widget name."
                            },
                            "DisplayName": {
                                "type": "string",
                                "description": "Specifies the display name of the widget."
                            },
                            "Type": {
                                "type": "string",
                                "description": "Specifies the type of the widget."
                            },
                            "SubType": {
                                "type": "string",
                                "description": "Specifies the sub-type of the widget."
                            }
                        },
                        "description": "Return the details of widget Id, Name, DisplayName, Type and SubType."
                    }
                }
            },
            "ApiDownloadDashboard": {
                "required": [
                    "DashboardId"
                ],
                "type": "object",
                "properties": {
                    "DashboardId": {
                        "type": "array",
                        "description": "List of dashboard IDs",
                        "items": {
                            "type": "string",
                            "format": "guid"
                        }
                    },
                    "CanIncludeSensitiveInformation": {
                        "type": "boolean",
                        "description": "Include sensitive information for data sources based on this value. Default value is <i>true</i>"
                    }
                },
                "description": "Details about the dashboard to download."
            },
            "ApiDownloadDashboardResponse": {
                "type": "object",
                "properties": {
                    "ApiStatus": {
                        "type": "boolean",
                        "description": "Returns the status of the API."
                    },
                    "Data": {
                        "properties": {
                            "JobStatus": {
                                "type": "string",
                                "description": "Status of the download job."
                            },
                            "ItemContent": {
                                "type": "string",
                                "description": "File content of the dashboard(s).",
                                "format": "base64"
                            },
                            "ItemExtension": {
                                "type": "string",
                                "description": "Extension of the dashboard file.<br />Values allowed are <code>.zip, .bbix.</code>.",
                                "format": "base64"
                            },
                            "FailedDownload": {
                                "type": "array",
                                "description": "Details of failed download stages.",
                                "items": {
                                    "$ref": "#/components/schemas/ApiDownloadFailedResponse"
                                }
                            }
                        },
                        "description": "Download job process response."
                    },
                    "Status": {
                        "type": "boolean",
                        "description": "Returns status of the API request."
                    }
                }
            },
            "ApiDownloadFailedResponse": {
                "type": "object",
                "properties": {
                    "DashboardId": {
                        "type": "string",
                        "description": "Dashboard ID.",
                        "format": "guid"
                    },
                    "ProgressJson": {
                        "type": "array",
                        "description": "Download Progress Details.",
                        "items": {
                            "$ref": "#/components/schemas/DownloadUploadProgressJson"
                        }
                    }
                },
                "description": "Download dashboard failed response."
            },
            "DownloadUploadProgressJson": {
                "type": "object",
                "description": "Download/Upload Progress Details.",
                "properties": {
                    "Stage": {
                        "type": "integer",
                        "description": "Download/Upload process stage.",
                        "format": "int32"
                    },
                    "Label": {
                        "type": "string",
                        "description": "Label of the stage."
                    },
                    "Status": {
                        "type": "string",
                        "description": "Download stage status."
                    },
                    "ErrorMessage": {
                        "type": "string",
                        "description": "Error message of the failed stage."
                    }
                }
            },
            "ApiGetMetaInfo": {
                "required": [
                    "FileContent",
                    "FileExtension"
                ],
                "type": "object",
                "properties": {
                    "FileContent": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "description": "Dashboard files in an array of bytes.",
                        "format": "byte"
                    },
                    "FileExtension": {
                        "type": "string",
                        "description": "Extension of the dashboard file.<br />Values allowed are <code>.zip, .bbix.</code>."
                    }
                },
                "description": "Details about the dashboard file content."
            },
            "ApiGetMetaInfoResponse": {
                "type": "object",
                "properties": {
                    "ApiStatus": {
                        "type": "boolean",
                        "description": "Returns the status of the API."
                    },
                    "Data": {
                        "type": "array",
                        "description": "Returns data from the API.",
                        "items": {
                            "$ref": "#/components/schemas/ApiMetaInfo"
                        }
                    },
                    "Status": {
                        "type": "boolean",
                        "description": "Returns status of the API request."
                    }
                },
                "description": "Meta info details."
            },
            "ApiMetaInfo": {
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Dashboard name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Dashboard description."
                    },
                    "Id": {
                        "type": "string",
                        "description": "Dashboard ID.",
                        "format": "guid"
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "ShouldValidateSchema": {
                        "type": "boolean",
                        "description": "Specify <i>false</i> to avoid the schema validation. Default value is <i>true</i>."
                    },
                    "ReplaceDashboardId": {
                        "type": "string",
                        "description": "Dashboard ID.",
                        "format": "guid"
                    },
                    "Datasources": {
                        "type": "array",
                        "description": "Data sources",
                        "items": {
                          "$ref": "#/components/schemas/ApiDataSources"
                        }
                    }
                },
                "description": "Details about the data sources."
            },
            "ApiUploadDashboard": {
                "required": [
                    "ItemContent",
                    "ItemExtension"
                ],
                "type": "object",
                "properties": {
                    "ItemContent": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "description": "Dashboard files in an array of bytes.",
                        "format": "byte"
                    },
                    "ItemExtension": {
                        "type": "string",
                        "description": "Extension of the dashboard file.<br />Values allowed are <code>.zip, .bbix.</code>."
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "ItemMetaInfo": {
                        "type": "array",
                        "description": "Meta information of the item content.",
                        "items": {
                            "$ref": "#/components/schemas/ApiMetaInfo"
                        }
                    }
                },
                "description": "Details about the dashboard for upload."
            },
            "ApiUploadStatusResponse": {
                "type": "object",
                "properties": {
                    "ApiStatus": {
                        "type": "boolean",
                        "description": "Returns the status of the API."
                    },
                    "Data": {
                        "type": "array",
                        "description": "Returns data from the API.",
                        "items": {
                            "$ref": "#/components/schemas/ApiUploadJobResponse"
                        }
                    },
                    "Status": {
                        "type": "boolean",
                        "description": "Returns status of the API request."
                    }
                },
                "description": "Upload dashboard job status details."
            },
            "ApiUploadJobResponse": {
                "type": "object",
                "properties": {
                    "DashboardId": {
                        "type": "string",
                        "description": "Dashboard ID.",
                        "format": "guid"
                    },
                    "UploadStatus": {
                        "type": "string",
                        "description": "Upload job status."
                    },
                    "Details": {
                        "type": "array",
                        "description": "Details of upload job.",
                        "items": {
                            "$ref": "#/components/schemas/DownloadUploadProgressJson"
                        }
                    }
                },
                "description": "Upload dashboard job response details."
            },
            "ApiMoveDashboard": {
                "required": [
                    "CategoryId",
                    "Name"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Dashboard name."
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    }
                },
                "description": "Dashboard details."
            },
            "ApiMoveDashboardResponse": {
                "required": [
                    "ApiStatus",
                    "Status",
                    "DashboardId",
                    "StatusMessage"
                ],
                "type": "object",
                "properties": {
                    "ApiStatus": {
                        "type": "boolean",
                        "description": "Returns the status of the API."
                    },
                    "Status": {
                        "type": "boolean",
                        "description": "Returns the status of the API request."
                    },
                    "DashboardId": {
                        "type": "string",
                        "description": "Returns the moved dashboard id",
                        "format": "guid"
                    },
                    "StatusMessage": {
                        "type": "string",
                        "description": "Returns the status message from the API."
                    }
                },
                "description": "Response details of the moved item."
            },
            "DraftItemDetail": {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "string",
                        "description": "Item ID of the dashboard.",
                        "format": "guid"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Name of the dashboard."
                    }
                },
                "description": "Dashboard item detail."
            },
            "ApiItemsV4": {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "string",
                        "description": "Item ID of the dashboard.",
                        "format": "guid"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Name of the dashboard."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Description of the dashboard."
                    },
                    "ItemType": {
                        "type": "string",
                        "description": "Type of the Item."
                    },
                    "ItemLocation": {
                        "type": "string",
                        "description": "Item location."
                    },
                    "CreatedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item creator.",
                        "format": "int32"
                    },
                    "CreatedByDisplayName": {
                        "type": "string",
                        "description": "Specifies the display name of the user who created the item."
                    },
                    "ModifiedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item modifier.",
                        "format": "int32"
                    },
                    "ModifiedByFullName": {
                        "type": "string",
                        "description": "Specifies the full name of the user who modified the item."
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "CategoryName": {
                        "type": "string",
                        "description": "Category name."
                    },
                    "CreatedDate": {
                        "type": "string",
                        "description": "Date created of the item in string format.",
                        "format": "datetime"
                    },
                    "ModifiedDate": {
                        "type": "string",
                        "description": "Date modified of the item in string format.",
                        "format": "datetime"
                    },
                    "ItemModifiedDate": {
                        "type": "string",
                        "description": "Date modified of the item in date format.",
                        "format": "datetime"
                    },
                    "ItemCreatedDate": {
                        "type": "string",
                        "description": "Date created of the item in date format.",
                        "format": "datetime"
                    },
                    "IsMultiDashboard": {
                        "type": "boolean",
                        "description": "Returns true, if the dashboard is multi-dashboard."
                    },
                    "IsFavorite": {
                        "type": "boolean",
                        "description": "Returns true, if it is a favorite item."
                    },
                    "IsPublic": {
                        "type": "boolean",
                        "description": "Returns true, if the item is public."
                    },
                    "IsDraft": {
                        "type": "boolean",
                        "description": "Returns true, if the item is draft."
                    },
                    "CanRead": {
                        "type": "boolean",
                        "description": "Specifies the read permission of the item."
                    },
                    "CanWrite": {
                        "type": "boolean",
                        "description": "Specifies the write permission of the item."
                    },
                    "CanDelete": {
                        "type": "boolean",
                        "description": "Specifies the delete permission of the item."
                    },
                    "CanDownload": {
                        "type": "boolean",
                        "description": "Specifies the download permission of the item."
                    },
                    "CanSchedule": {
                        "type": "boolean",
                        "description": "Specifies the schedule permission of the item."
                    },
                    "CanOpen": {
                        "type": "boolean",
                        "description": "Specifies the open permission of the item."
                    },
                    "CanMove": {
                        "type": "boolean",
                        "description": "Specifies the move permission of the item."
                    },
                    "CanCopy": {
                        "type": "boolean",
                        "description": "Specifies the copy permission of the item."
                    },
                    "CanClone": {
                        "type": "boolean",
                        "description": "Specifies the clone permission of the item."
                    },
                    "CanCreateItem": {
                        "type": "boolean",
                        "description": "Specifies the create permission of the item."
                    },
                    "WidgetInfo": {
                        "type": "string",
                        "description": "Returns WidgetInfo for the specified dashboard."
                    },
                    "TabDetail": {
                        "type": "array",
                        "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
                        "items": {
                            "$ref": "#/components/schemas/ApiTabDetail"
                        }
                    }
                },
                "description": "Draft Dashboard item details."
            },
            "UpdateDraftItemDetail": {
                "type": "object",
                "properties": {
                    "ItemName": {
                        "type": "string",
                        "description": "Name of the dashboard."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Description of the dashboard."
                    }
                },
                "description": "Dashboard item detail."
            },
            "ApiCategoryAdd": {
                "required": [
                    "Name"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Category name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Category description."
                    }
                },
                "description": "Category details."
            },
            "ApiCategoryUpdate": {
                "required": [
                    "CategoryId"
                ],
                "type": "object",
                "properties": {
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Category name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Category description."
                    }
                },
                "description": "Category details."
            },
            "ApiDataSourceAttribute": {
                "required": [
                    "Name"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Data source name."
                    },
                    "Type": {
                        "type": "string",
                        "description": "Data source type allowed values are <code>Web Live</code>, <code>MongoDB</code>, <code>amazonathena</code>, <code>amazonauroramysql</code>, <code>amazonaurorapostgresql</code>, <code>amazonrdsmysql</code>, <code>amazonrdsmariadb</code>, <code>amazonrdsamazonauroramysql</code>, <code>amazonrdsamazonaurorapostgresql</code>, <code>amazonrdspostgresql</code>, <code>amazonrdssqlserver</code>, <code>amazonrdsoracle</code>, <code>awsopensearch</code>, <code>redshift</code>, <code>azuresynapseanalytics</code>, <code>cdata</code>, <code>clickhouse</code>, <code>elasticsearch</code>, <code>googlecloudmysql</code>, <code>googlecloudpostgresql</code>, <code>influxdb</code>, <code>mariadb</code>, <code>ssas</code>, <code>mysql</code>, <code>oracle</code>, <code>postgresql</code>, <code>presto</code>, <code>singlestore</code>, <code>sqlserver</code>, <code>snowflake</code>, <code>sparksql</code>, <code>odbc</code>, <code>rockset</code>."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Description of data source."
                    },
                    "Connection": {
                        "type": "object",
                        "description": "You need to send the connection object for each data source based on its type. Please refer its relative documentation for the connection details as follows [Web Live](/working-with-data-sources/data-connectors/live-web/#connecting-bold-bi-to-web-live-data-source-via-rest-api), [MongoDB](/working-with-data-sources/data-connectors/mongodb/#connecting-bold-bi-to-mongodb-data-source-via-rest-api), [amazonathena](/working-with-data-sources/data-connectors/amazon-athena/#connecting-bold-bi-to-amazon-athena-data-source-via-rest-api), [amazonauroramysql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmariadb](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonauroramysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonrdspostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdssqlserver](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsoracle](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [awsopensearch](/working-with-data-sources/data-connectors/aws-opensearch/#connecting-bold-bi-to-aws-open-search-data-source-via-rest-api), [redshift](/working-with-data-sources/data-connectors/amazon-redshift/#connecting-bold-bi-to-amazon-redshift-data-source-via-rest-api), [azuresynapseanalytics](/working-with-data-sources/data-connectors/azure-synapse-analytics/#connecting-bold-bi-to-azure-synapse-analytics-data-source-via-rest-api), [cdata](/working-with-data-sources/data-connectors/cdata/#connecting-bold-bi-to-cdata-data-source-via-rest-api), [clickhouse](/working-with-data-sources/data-connectors/clickhouse/#connecting-bold-bi-to-clickhouse-data-source-via-rest-api), [elasticsearch](/working-with-data-sources/data-connectors/elastic-search/#connecting-bold-bi-to-elastic-search-data-source-via-rest-api), [googlecloudmysql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [googlecloudpostgresql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [influxdb](/working-with-data-sources/data-connectors/influxdb/#connecting-bold-bi-to-influxdb-data-source-via-rest-api), [mariadb](/working-with-data-sources/data-connectors/mariadb/#connecting-bold-bi-to-mariadb-data-source-via-rest-api), [ssas](/working-with-data-sources/data-connectors/ssas/#connecting-bold-bi-to-microsoft-sql-server-analysis-servicesssas-via-rest-api), [mysql](/working-with-data-sources/data-connectors/mysql/#connecting-bold-bi-to-mysql-data-source-via-rest-api), [oracle](/working-with-data-sources/data-connectors/oracle/#connecting-bold-bi-to-oracle-data-source-via-rest-api), [postgresql](/working-with-data-sources/data-connectors/postgresql/#connecting-bold-bi-to-postgresql-data-source-via-rest-api), [presto](/working-with-data-sources/data-connectors/presto/#connecting-bold-bi-to-presto-data-source-via-rest-api), [singlestore](/working-with-data-sources/data-connectors/single-store/#connecting-bold-bi-to-singlestore-data-source-via-rest-api), [sqlserver](/working-with-data-sources/data-connectors/sql-data-source/#connecting-bold-bi-to-microsoft-sql-server-data-source-via-rest-api), [snowflake](/working-with-data-sources/data-connectors/snowflake/#connecting-bold-bi-to-snowflake-data-source-via-rest-api), [sparksql](/working-with-data-sources/data-connectors/sparksql/#connecting-bold-bi-to-sparksql-data-source-via-rest-api), [odbc](/working-with-data-sources/data-connectors/odbc/#connecting-bold-bi-to-odbc-data-source-via-rest-api), [rockset](/working-with-data-sources/data-connectors/rockset/#connecting-bold-bi-to-rockset-data-source-via-rest-api)."
                    },
                    "RefreshSettings": {
                        "properties": {
                            "StartTime": {
                                "type": "string",
                                "description": "Start time of the schedule.<br> The format should be ISO 8601 <br> i.e. yyyy-MM-ddTHH:mm:ssZ. E.g. 2022-02-15T06:55:00Z."
                            },
                            "NeverEnd": {
                                "type": "boolean",
                                "description": "When set to true, it creates a schedule that never ends.<br><div style=margin-left:15px;>NOTE: The NeverEnd is true by default. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise, it remains empty.</strong>"
                            },
                            "EndAfterOccurrence": {
                                "type": "integer",
                                "description": "The number of occurrences after which the schedule will be completed.<br>? For Example: If you provide empty 5, the schedule will end after the completion of 5 occurrences."
                            },
                            "EndTime": {
                                "type": "string",
                                "description": "End time after which the schedule should stop. The format should be ISO 8601 i.e. yyyy-MM-ddTHH:mm:ssZ.<br>? For Example: If you provide empty an end date-time, the schedule will end when the end date-time is reached.<br>? E.g. 2022-02-15T06:55:00Z."
                            },
                            "ScheduleType": {
                                "type": "string",
                                "description": "Schedule frequency.<br>? Values allowed Weekly only."
                            },
                            "WeeklySchedule": {
                                "properties": {
                                    "RecurrenceWeeks": {
                                        "type": "integer",
                                        "description": "Enter the Recurrence week By default 1."
                                    },
                                    "RecurrenceDays": {
                                        "type": "array",
                                        "description": "Enter the day from the list.<br>(Values allowed are <code>Monday, Tuesday, Wednesday, Thursday, Friday</code>).<br> For Example: Monday.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "IsEnabled": {
                                        "type": "boolean",
                                        "description": "By default it is true."
                                    },
                                    "FailureNotificationToOwner": {
                                        "type": "boolean",
                                        "description": "By default it is true."
                                    }
                                }
                            }
                        },
                        "description": "Refer to the JSON syntax below to configure Refresh settings.\n\n Note: Refresh settings is only applicable for the web extract type data source. It will not work for live connection mode data sources."
                    }
                },
                "description": "Data Source details."
            },
            "WebAPItemResponse": {
                "required": [
                    "ApiStatus",
                    "Data",
                    "Status",
                    "StatusMessage"
                ],
                "type": "object",
                "properties": {
                    "ApiStatus": {
                        "type": "boolean",
                        "description": "Returns the status of the API."
                    },
                    "Status": {
                        "type": "boolean",
                        "description": "Returns status of the API request."
                    },
                    "Data": {
                        "properties": {
                            "ScheduleId": {
                                "type": "string",
                                "description": "Returns the Schedule ID."
                            },
                            "PublishedId": {
                                "type": "string",
                                "description": "Returns the Published ID."
                            }
                        },
                        "description": "Return the details of ScheduleId and PublishedID."
                    },
                    "StatusMessage": {
                        "type": "string",
                        "description": "Returns the status message from the API."
                    }
                },
                "description": "Response details of the datasource item."
            },
            "ApiUpdateDataSourceAttribute": {
                "required": [
                    "Name",
                    "DataSourceId"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Data source name."
                    },
                    "Type": {
                        "type": "string",
                        "description": "Data source type allowed values are <code>amazonathena</code>, <code>amazonauroramysql</code>, <code>amazonaurorapostgresql</code>, <code>amazonrdsmysql</code>, <code>amazonrdsmariadb</code>, <code>amazonrdsamazonauroramysql</code>, <code>amazonrdsamazonaurorapostgresql</code>, <code>amazonrdspostgresql</code>, <code>amazonrdssqlserver</code>, <code>amazonrdsoracle</code>, <code>awsopensearch</code>, <code>redshift</code>, <code>azuresynapseanalytics</code>, <code>cdata</code>, <code>clickhouse</code>, <code>elasticsearch</code>, <code>googlecloudmysql</code>, <code>googlecloudpostgresql</code>, <code>influxdb</code>, <code>mariadb</code>, <code>ssas</code>, <code>mysql</code>, <code>oracle</code>, <code>postgresql</code>, <code>presto</code>, <code>singlestore</code>, <code>sqlserver</code>, <code>snowflake</code>, <code>sparksql</code>, <code>odbc</code>,  <code>rockset</code>."
                    },
                    "DataSourceId": {
                        "type": "string",
                        "description": "Data source ID"
                    },
                    "Description": {
                        "type": "string",
                        "description": "Description of data source."
                    },
                    "Connection": {
                        "type": "object",
                        "description": "You need to send the connection object for each data source based on its type. Please refer its relative documentation for the connection details as follows [amazonathena](/working-with-data-sources/data-connectors/amazon-athena/#connecting-bold-bi-to-amazon-athena-data-source-via-rest-api), [amazonauroramysql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmariadb](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonauroramysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonrdspostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdssqlserver](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsoracle](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [awsopensearch](/working-with-data-sources/data-connectors/aws-opensearch/#connecting-bold-bi-to-aws-open-search-data-source-via-rest-api), [redshift](/working-with-data-sources/data-connectors/amazon-redshift/#connecting-bold-bi-to-amazon-redshift-data-source-via-rest-api), [azuresynapseanalytics](/working-with-data-sources/data-connectors/azure-synapse-analytics/#connecting-bold-bi-to-azure-synapse-analytics-data-source-via-rest-api), [cdata](/working-with-data-sources/data-connectors/cdata/#connecting-bold-bi-to-cdata-data-source-via-rest-api), [clickhouse](/working-with-data-sources/data-connectors/clickhouse/#connecting-bold-bi-to-clickhouse-data-source-via-rest-api), [elasticsearch](/working-with-data-sources/data-connectors/elastic-search/#connecting-bold-bi-to-elastic-search-data-source-via-rest-api), [googlecloudmysql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [googlecloudpostgresql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [influxdb](/working-with-data-sources/data-connectors/influxdb/#connecting-bold-bi-to-influxdb-data-source-via-rest-api), [mariadb](/working-with-data-sources/data-connectors/mariadb/#connecting-bold-bi-to-mariadb-data-source-via-rest-api), [ssas](/working-with-data-sources/data-connectors/ssas/#connecting-bold-bi-to-microsoft-sql-server-analysis-servicesssas-via-rest-api), [mysql](/working-with-data-sources/data-connectors/mysql/#connecting-bold-bi-to-mysql-data-source-via-rest-api), [oracle](/working-with-data-sources/data-connectors/oracle/#connecting-bold-bi-to-oracle-data-source-via-rest-api), [postgresql](/working-with-data-sources/data-connectors/postgresql/#connecting-bold-bi-to-postgresql-data-source-via-rest-api), [presto](/working-with-data-sources/data-connectors/presto/#connecting-bold-bi-to-presto-data-source-via-rest-api), [singlestore](/working-with-data-sources/data-connectors/single-store/#connecting-bold-bi-to-singlestore-data-source-via-rest-api), [sqlserver](/working-with-data-sources/data-connectors/sql-data-source/#connecting-bold-bi-to-microsoft-sql-server-data-source-via-rest-api), [snowflake](/working-with-data-sources/data-connectors/snowflake/#connecting-bold-bi-to-snowflake-data-source-via-rest-api), [sparksql](/working-with-data-sources/data-connectors/sparksql/#connecting-bold-bi-to-sparksql-data-source-via-rest-api), [odbc](/working-with-data-sources/data-connectors/odbc/#connecting-bold-bi-to-odbc-data-source-via-rest-api), [rockset](/working-with-data-sources/data-connectors/rockset/#connecting-bold-bi-to-rockset-data-source-via-rest-api)."
                    }
                },
                "description": "Data Source details."
            },
            "ApiCreateUserFilter": {
                "type": "object",
                "properties": {
                    "BasicFilters": {
                        "type": "object",
                        "description": "You need to send the user filter object. Please refer to its related documentation for the user filter details as follows [userfilter](/working-with-data-sources/user-filter/user-filter-manual.md)"
                    }
                },
                "description": "User filter details."
            },
            "ApiCopyDataSourceRequestV4": {
                "required": [
                    "Name"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Data source name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Data source description."
                    }
                },
                "description": "Data Source details."
            },
            "ApiSlideshowAdd": {
                "required": [
                    "Duration",
                    "Name",
                    "Slides"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Slideshow name."
                    },
                    "Duration": {
                        "type": "integer",
                        "description": "The time interval between slides.",
                        "format": "int32",
                        "minimum": 5,
                        "maximum": 300
                    },
                    "Slides": {
                        "type": "array",
                        "description": "Slides? list.",
                        "items": {
                            "$ref": "#/components/schemas/Slide"
                        }
                    }
                },
                "description": "Slideshow details."
            },
            "PaginatedSlideshowApiResponse": {
                "type": "object",
                "properties": {
                    "Data": {
                        "type": "array",
                        "description": "Returns data from the API.",
                        "items": {
                            "$ref": "#/components/schemas/SlideshowResponse"
                        }
                    },
                    "TotalResults": {
                        "type": "integer",
                        "description": "Returns items count of the API request.",
                        "format": "int32"
                    },
                    "Links": {
                        "type": "array",
                        "description": "Returns pagination links.",
                        "items": {
                            "$ref": "#/components/schemas/Links"
                        }
                    }
                }
            },
            "SlideshowResponse": {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "string",
                        "description": "Slideshow ID.",
                        "format": "guid"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Slideshow Name."
                    },
                    "Duration": {
                        "type": "integer",
                        "description": "Time interval between slides.",
                        "format": "int32"
                    },
                    "CreatedBy": {
                        "type": "object",
                        "description": "Created user detail.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ItemUser"
                            }
                        ]
                    },
                    "ModifiedBy": {
                        "type": "object",
                        "description": "Modified user detail.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ItemUser"
                            }
                        ]
                    },
                    "CreatedDate": {
                        "type": "string",
                        "description": "Date created of item in string format."
                    },
                    "ModifiedDate": {
                        "type": "string",
                        "description": "Date modified of item in string format."
                    },
                    "Slides": {
                        "type": "array",
                        "description": "Slides? list.",
                        "items": {
                            "$ref": "#/components/schemas/Slide"
                        }
                    },
                    "Permissions": {
                        "type": "object",
                        "description": "Permission detail.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Permissions"
                            }
                        ]
                    },
                    "IsActive": {
                        "type": "boolean",
                        "description": "Returns true, if the user is an active user"
                    }
                },
                "description": "Slide details."
            },
            "ItemUser": {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "integer",
                        "description": "User ID.",
                        "format": "int32"
                    },
                    "Name": {
                        "type": "string",
                        "description": "User name."
                    }
                },
                "description": "Slideshow details."
            },
            "Slide": {
                "type": "object",
                "properties": {
                    "OrderNumber": {
                        "type": "integer",
                        "description": "Slide order.",
                        "format": "int32"
                    },
                    "ItemType": {
                        "type": "string",
                        "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Widget</code>"
                    },
                    "ItemInfo": {
                        "type": "object",
                        "description": "Slide item details.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SlideInfo"
                            }
                        ]
                    }
                },
                "description": "Slide details."
            },
            "SlideInfo": {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "string",
                        "description": "Item ID.",
                        "format": "guid"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Item Name."
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "CategoryName": {
                        "type": "string",
                        "description": "Category Name."
                    },
                    "TabId": {
                        "type": "string",
                        "description": "Tab ID.",
                        "format": "guid"
                    },
                    "TabName": {
                        "type": "string",
                        "description": "Tab Name."
                    },
                    "ViewId": {
                        "type": "string",
                        "description": "View ID.",
                        "format": "guid"
                    },
                    "ViewName": {
                        "type": "string",
                        "description": "View Name."
                    },
                    "IsActive": {
                        "type": "boolean",
                        "description": "Returns true, if the user is an active user"
                    }
                },
                "description": "Slide item details."
            },
            "Permissions": {
                "type": "object",
                "properties": {
                    "CanRead": {
                        "type": "boolean",
                        "description": "Returns true, if the user has read permission for the slideshow."
                    },
                    "CanWrite": {
                        "type": "boolean",
                        "description": "Returns true, if the user has write permission for the slideshow."
                    },
                    "CanDelete": {
                        "type": "boolean",
                        "description": "Returns true, if the user has delete permission for the slideshow."
                    }
                },
                "description": "Permission details."
            },
            "ApiSlideshowEdit": {
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Slideshow name."
                    },
                    "Duration": {
                        "type": "integer",
                        "description": "Time interval between slides.",
                        "format": "int32"
                    },
                    "Slides": {
                        "type": "array",
                        "description": "Slides? list.",
                        "items": {
                            "$ref": "#/components/schemas/Slide"
                        }
                    }
                },
                "description": "Slideshow details."
            },
            "ApiScheduleRequest": {
                "required": [
                    "ExportType",
                    "ItemId",
                    "Name",
                    "NeverEnd",
                    "ScheduleType",
                    "StartTime",
                    "UserList",
                    "GroupList",
                    "ExternalRecipientsList"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Schedule name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Schedule description."
                    },
                    "ItemId": {
                        "type": "string",
                        "description": "Item ID.",
                        "format": "guid"
                    },
                    "ExportType": {
                        "type": "string",
                        "description": "Specifies the export type to schedule the dashboard.<br />Values allowed are <code>Excel, Pdf, Image</code>"
                    },
                    "StartTime": {
                        "type": "string",
                        "description": "Specifies the UTC start date-time of schedule.<br />The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
                    },
                    "NeverEnd": {
                        "type": "boolean",
                        "description": "When set to true, it creates a schedule with no end.\n\n**Note:** By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
                    },
                    "EndAfterOccurrence": {
                        "type": "integer",
                        "description": "Specifies the number of occurrences after which the schedule will be completed.\n\n**For example:** If you provide 5, the schedule will end after the completion of 5 occurrences.",
                        "format": "int32"
                    },
                    "EndDate": {
                        "type": "string",
                        "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.\n\n**For example:** If you provide an end date-time, the schedule will end when the end date-time is reached."
                    },
                    "UserList": {
                        "type": "array",
                        "description": "Provides a list of email addresses or user IDs to the recipients who will get the schedules.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "GroupList": {
                        "type": "array",
                        "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "ExternalRecipientsList": {
                        "type": "array",
                        "description": "Provides a list of email addresses to the email recipients who will get the schedules. ",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ScheduleType": {
                        "type": "string",
                        "description": "Specifies the schedule type to schedule the dashboard.<br />Values allowed are <code>Hourly, Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
                    },
                    "IsEnabled": {
                        "type": "boolean",
                        "description": "Returns true, if the schedule is enabled."
                    },
                    "FailureNotificationToOwner": {
                        "type": "boolean",
                        "description": "Returns true, if the failure notification to an owner is enabled."
                    },
                    "FailureNotificationToRecipient": {
                        "type": "boolean",
                        "description": "Returns true, if the failure notification to the recipient is enabled."
                    },
                    "FailureOccurrence": {
                        "type": "integer",
                        "description": "Failure occurrence count.",
                        "format": "int32"
                    },
                    "ExportFormatInfo": {
                        "description": "Schedule export format information.",
                        "$ref": "#/components/schemas/ScheduleExportFormat"
                    },
                    "ScheduleExportLocation": {
                        "description": "Schedule export location information.",
                        "$ref": "#/components/schemas/ScheduleExportLocation"
                    },
                    "Email": {
                        "description": "Schedule mail information.",
                        "$ref": "#/components/schemas/ApiScheduleEmail"
                    },
                    "HourlySchedule": {
                        "type": "object",
                        "description": "Runs the schedules on an hourly basis.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiHourlySchedule"
                            }
                        ]
                    },
                    "DailySchedule": {
                        "type": "object",
                        "description": "Runs the schedules on a daily basis. ",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiDailySchedule"
                            }
                        ]
                    },
                    "WeeklySchedule": {
                        "type": "object",
                        "description": "Runs the schedule on a weekly basis.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiWeeklySchedule"
                            }
                        ]
                    },
                    "MonthlySchedule": {
                        "type": "object",
                        "description": "Runs the schedule on a monthly basis.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiMonthlySchedule"
                            }
                        ]
                    },
                    "YearlySchedule": {
                        "type": "object",
                        "description": "Runs the schedules on a yearly basis.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiYearlySchedule"
                            }
                        ]
                    }
                },
                "description": "Details about the schedule passed will be added."
            },
            "ScheduleExportFormat": {
                "type": "object",
                "properties": {
                    "Size": {
                        "type": "string",
                        "description": "PDF page size.<br />Values allowed are <code>A3, A4, A5, Letter</code>",
                        "default": "A4"
                    },
                    "Orientation": {
                        "type": "string",
                        "description": "PDF page orientation.<br />Values allowed are <code>Landscape, Portrait</code>",
                        "default": "Landscape"
                    },
                    "Extension": {
                        "type": "string",
                        "description": "Excel or Image extension.<br />Values allowed for Excel file are <code>xlsx, xls</code><br />Values allowed for Image file are <code>jpg, png</code>",
                        "default": "xlsx for Excel and jpg for image"
                    },
                    "Resolution": {
                        "type": "integer",
                        "description": "Image file resolution.",
                        "format": "int32",
                        "default": 100
                    }
                },
                "description": "Schedule export format information."
            },
            "ScheduleExportLocation": {
                "type": "object",
                "properties": {
                    "FtpURL": {
                        "type": "string",
                        "description": "Use the FTP URL to save the exported file."
                    },
                    "FtpUsername": {
                        "type": "string",
                        "description": "FTP username."
                    },
                    "FtpPassword": {
                        "type": "string",
                        "description": "FTP password."
                    }
                },
                "description": "Schedule export location information."
            },
            "ApiScheduleEmail": {
                "type": "object",
                "properties": {
                    "Subject": {
                        "type": "string",
                        "description": "Specifies Schedule Email subject."
                    },
                    "Body": {
                        "type": "string",
                        "description": "Specifies Schedule Email body."
                    }
                },
                "description": "Schedule mail information."
            },
            "ScheduleExportLocationResponse": {
                "type": "object",
                "properties": {
                    "FtpURL": {
                        "type": "string",
                        "description": "Use the FTP URL to save the exported file."
                    },
                    "FtpUsername": {
                        "type": "string",
                        "description": "FTP username."
                    }
                },
                "description": "Schedule export location information."
            },
            "ApiHourlySchedule": {
                "required": [
                    "ScheduleInterval"
                ],
                "type": "object",
                "properties": {
                    "ScheduleInterval": {
                        "type": "string",
                        "description": "Specifies the hour interval. Based on this interval, the schedule will run continuously until the end time. The format should be `HH:mm`"
                    }
                },
                "description": "Runs the schedules on an hourly basis."
            },
            "ApiDailySchedule": {
                "required": [
                    "EveryNdays",
                    "EveryWeekday",
                    "RecurrenceType"
                ],
                "type": "object",
                "properties": {
                    "RecurrenceType": {
                        "type": "string",
                        "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.<br />Values allowed are <code>EveryNdays, EveryWeekday</code>\n\n**Note:** If you choose the recurrence type as EveryNdays, provide a value to the EveryNdays property, and leave the (EveryWeekday) property empty."
                    },
                    "EveryNdays": {
                        "type": "integer",
                        "description": "Specifies the day interval the schedule recurs.\n\n**For example:** If you provide 2, the schedule recurs every 2 days.",
                        "format": "int32"
                    },
                    "EveryWeekday": {
                        "type": "boolean",
                        "description": "For the schedule to recur every working day, set to true."
                    }
                },
                "description": "Runs the schedules on a daily basis."
            },
            "ApiWeeklySchedule": {
                "required": [
                    "RecurrenceDays",
                    "RecurrenceWeeks"
                ],
                "type": "object",
                "properties": {
                    "RecurrenceWeeks": {
                        "type": "integer",
                        "description": "Specifies the week interval the schedule recurs.\n\n**For example:** If you provide 2, the schedule will recur every 2 weeks.  ",
                        "format": "int32"
                    },
                    "RecurrenceDays": {
                        "type": "array",
                        "description": "Specifies the list of days the schedule recurs.<br />Values allowed are <code>Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</code>\n\n**For example:** If you provide `Sunday`, the schedule will recur sunday's of every 2 weeks.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Runs the schedule on a weekly basis."
            },
            "ApiMonthlySchedule": {
                "required": [
                    "RecurrenceType"
                ],
                "type": "object",
                "properties": {
                    "RecurrenceType": {
                        "type": "string",
                        "description": "Specifies the recurrence type, whether the schedule recurs on a day basis or on the customized day basis.<br />Values allowed are <code>DayRecurrence, CustomRecurrence</code>\n\n**Note:** If you choose the recurrence type as DayRecurrence, provide a value to the `DayRecurrence` property and leave the (CustomRecurrence) property empty."
                    },
                    "DayRecurrence": {
                        "type": "object",
                        "description": "The schedule recurs on the day specified on the month interval.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiMonthlyScheduleDayRecurrence"
                            }
                        ]
                    },
                    "CustomRecurrence": {
                        "type": "object",
                        "description": "The schedule recurs on the customized day of the specified month interval.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiMonthlyScheduleCustomRecurrence"
                            }
                        ]
                    }
                },
                "description": "Runs the schedule on a monthly basis."
            },
            "ApiMonthlyScheduleDayRecurrence": {
                "required": [
                    "DayInterval",
                    "MonthInterval"
                ],
                "type": "object",
                "properties": {
                    "DayInterval": {
                        "type": "integer",
                        "description": "Specifies the number of day interval the schedule recurs.\n\n**For example:** If you provide 10, the schedule will recur every 10th day. ",
                        "format": "int32"
                    },
                    "MonthInterval": {
                        "type": "integer",
                        "description": "Specifies the number of month interval the schedule recurs.\n\n**For example:** If you provide 3, the schedule will recur 10th day of every 3 months.",
                        "format": "int32"
                    }
                },
                "description": "The schedule recurs on the day specified on the month interval."
            },
            "ApiMonthlyScheduleCustomRecurrence": {
                "required": [
                    "DayOfWeek",
                    "MonthInterval",
                    "WeekOfMonth"
                ],
                "type": "object",
                "properties": {
                    "WeekOfMonth": {
                        "type": "string",
                        "description": "Specifies the week of the month the schedule recurs.<br />Values allowed are <code>first, second, third, fourth, last</code>\n\n**For example:** If you provide second, the schedule will recur on the second week."
                    },
                    "DayOfWeek": {
                        "type": "string",
                        "description": "Specifies the day of the week the schedule recurs.<br />Values allowed are <code>day, weekday, weekendday, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</code>\n\n**For example:** If you provide Sunday, the schedule will recur on the second week of sunday."
                    },
                    "MonthInterval": {
                        "type": "integer",
                        "description": "Specifies the number of month interval the schedule recurs.\n\n**For example:** If you provide 5, the schedule will recur second week of sunday's of every 5 months.",
                        "format": "int32"
                    }
                },
                "description": "The schedule recurs on the customized day of the specified month interval."
            },
            "ApiYearlySchedule": {
                "required": [
                    "RecurrenceType",
                    "YearInterval"
                ],
                "type": "object",
                "properties": {
                    "YearInterval": {
                        "type": "integer",
                        "description": "Specifies the number of years the schedule recurs.\n\n**For example:** If you provide 5, the schedule will recur every 5 years.",
                        "format": "int32"
                    },
                    "RecurrenceType": {
                        "type": "string",
                        "description": "Specifies the recurrence type, whether the schedule recurs on a month basis or on the customized month basis.<br />Values allowed are <code>MonthRecurrence, CustomRecurrence</code>\n\n**Note:** If you choose the recurrence type as MonthRecurrence, provide a value to the `MonthRecurrence` property, and leave the (CustomRecurrence) property empty."
                    },
                    "MonthRecurrence": {
                        "type": "object",
                        "description": "The schedule recurs on the month and number of years specified in `YearInterval` property.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiYearlyScheduleMonthRecurrence"
                            }
                        ]
                    },
                    "CustomRecurrence": {
                        "type": "object",
                        "description": "The schedule recurs in the customized month based on the number of years provided in the `YearInterval` property.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiYearlyScheduleCustomRecurrence"
                            }
                        ]
                    }
                },
                "description": "Runs the schedules on a yearly basis."
            },
            "ApiYearlyScheduleMonthRecurrence": {
                "required": [
                    "DayOfMonth",
                    "MonthOfYear"
                ],
                "type": "object",
                "properties": {
                    "MonthOfYear": {
                        "type": "string",
                        "description": "Specifies the month the schedule recurs.<br />Values allowed are <code>January, February, March, April, May, June, July, August, September, October, November, December</code>\n\n**For example:** If you provide April, the schedule will recur in April of every year. Here, the (year) is the value provided in the `YearInterval` property."
                    },
                    "DayOfMonth": {
                        "type": "integer",
                        "description": "Specifies the day of the month the schedule recurs.\n\n**For example:** If you provide 20, the schedule will recur 20th April of every year.  Here, the (year) is the value provided in the `YearInterval` property.",
                        "format": "int32"
                    }
                },
                "description": "The schedule recurs on the month and number of years specified in `YearInterval` property."
            },
            "ApiYearlyScheduleCustomRecurrence": {
                "required": [
                    "DayOfWeek",
                    "MonthOfYear",
                    "WeekOfMonth"
                ],
                "type": "object",
                "properties": {
                    "WeekOfMonth": {
                        "type": "string",
                        "description": "Specifies the week of the month the schedule recurs.<br />Values allowed are <code>first, second, third, fourth, last</code>\n\n**For example:** If you provide second, the schedule will recur on the second week."
                    },
                    "DayOfWeek": {
                        "type": "string",
                        "description": "Specifies the day of week the schedule recurs.<br />Values allowed are <code>day, weekday, weekendday, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</code>\n\n**For example:** If you provide Sunday, the schedule will recur on every sunday's of the second week."
                    },
                    "MonthOfYear": {
                        "type": "string",
                        "description": "Specifies the month the schedule recurs.<br />Values allowed are <code>January, February, March, April, May, June, July, August, September, October, November, December</code>\n\n**For example:** If you provide March, the schedule will recur on the sunday's of the second week of March every year. Here, the (year) is the value provided in the `YearInterval` property."
                    }
                },
                "description": "The schedule recurs in the customized month based on the number of years provided in the `YearInterval` property."
            },
            "ApiScheduleResponse": {
                "type": "object",
                "properties": {
                    "ScheduleName": {
                        "type": "string",
                        "description": "Returns the schedule name."
                    },
                    "ScheduleId": {
                        "type": "string",
                        "description": "Returns the schedule ID.",
                        "format": "guid"
                    },
                    "StatusMessage": {
                        "type": "string",
                        "description": "Returns the status message from the API."
                    },
                    "ScheduleType": {
                        "type": "string",
                        "description": "Returns the schedule type."
                    },
                    "NextRun": {
                        "type": "string",
                        "description": "Returns the schedule?s next run."
                    }
                },
                "description": "Response details of created schedules."
            },
            "PaginatedScheduleApiResponse": {
                "type": "object",
                "properties": {
                    "Data": {
                        "type": "array",
                        "description": "Returns data from the API.",
                        "items": {
                            "$ref": "#/components/schemas/ApiScheduleItemDetail"
                        }
                    },
                    "TotalResults": {
                        "type": "integer",
                        "description": "Returns items count of the API request.",
                        "format": "int32"
                    },
                    "Links": {
                        "type": "array",
                        "description": "Returns pagination links.",
                        "items": {
                            "$ref": "#/components/schemas/Links"
                        }
                    }
                }
            },
            "ApiScheduleItemDetail": {
                "type": "object",
                "properties": {
                    "CanRead": {
                        "type": "boolean",
                        "description": "Returns true, if the user has read permission for the schedule."
                    },
                    "CanWrite": {
                        "type": "boolean",
                        "description": "Returns true, if the user has write permission for the schedule."
                    },
                    "CanOpen": {
                        "type": "boolean",
                        "description": "Returns true, if the user has read permission for the schedule."
                    },
                    "CanSchedule": {
                        "type": "boolean",
                        "description": "Returns true, if the user has create permission for the schedule."
                    },
                    "CanMove": {
                        "type": "boolean",
                        "description": "Returns true, if the user has move permission for the schedule."
                    },
                    "CanClone": {
                        "type": "boolean",
                        "description": "Returns true, if the user has clone permission for the schedule."
                    },
                    "CanCopy": {
                        "type": "boolean",
                        "description": "Returns true, if the user has copy permission for the schedule."
                    },
                    "CanCreateItem": {
                        "type": "boolean",
                        "description": "Returns true, if the user has create permission for the schedule."
                    },
                    "CanDelete": {
                        "type": "boolean",
                        "description": "Returns true, if the user has delete permission for the schedule."
                    },
                    "CanDownload": {
                        "type": "boolean",
                        "description": "Returns true, if the user has download permission for the schedule."
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "CategoryName": {
                        "type": "string",
                        "description": "Category Name."
                    },
                    "CreatedByDisplayName": {
                        "type": "string",
                        "description": "Schedule created user name."
                    },
                    "CreatedById": {
                        "type": "integer",
                        "description": "Created user ID.",
                        "format": "int32"
                    },
                    "CreatedDate": {
                        "type": "string",
                        "description": "Date created of item in string format."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Schedule description."
                    },
                    "ScheduleId": {
                        "type": "string",
                        "description": "Schedule ID.",
                        "format": "guid"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "description": "Schedule Name."
                    },
                    "ItemLocation": {
                        "type": "string",
                        "description": "Schedule item location."
                    },
                    "ItemCreatedDate": {
                        "type": "string",
                        "description": "Date created of item in date format.",
                        "format": "date-time"
                    },
                    "ItemModifiedDate": {
                        "type": "string",
                        "description": "Date modified of item in date format.",
                        "format": "date-time"
                    },
                    "ItemType": {
                        "type": "string",
                        "description": "Item type.<br />Value allowed is <code>Schedule</code>"
                    },
                    "ModifiedByFullName": {
                        "type": "string",
                        "description": "Schedule modified user name."
                    },
                    "ModifiedById": {
                        "type": "integer",
                        "description": "Modified user ID.",
                        "format": "int32"
                    },
                    "ModifiedDate": {
                        "type": "string",
                        "description": "Date modified of item in string format."
                    },
                    "ExportType": {
                        "type": "string",
                        "description": "Specifies the export type to schedule the dashboard. Values allowed are <code>Excel, Image, Pdf</code>."
                    },
                    "DashboardId": {
                        "type": "string",
                        "description": "Dashboard ID.",
                        "format": "guid"
                    },
                    "DashboardName": {
                        "type": "string",
                        "description": "Dashboard Name."
                    },
                    "IsEnabled": {
                        "type": "boolean",
                        "description": "Returns true, if the schedule is enabled."
                    },
                    "IsActive": {
                        "type": "boolean",
                        "description": "Returns true, if the schedule is active."
                    },
                    "FailureNotificationToOwner": {
                        "type": "boolean",
                        "description": "Returns true, if the failure notification to an owner is enabled."
                    },
                    "FailureNotificationToRecipient": {
                        "type": "boolean",
                        "description": "Returns true, if the failure notification to the recipient is enabled."
                    },
                    "FailureOccurrence": {
                        "type": "integer",
                        "description": "Failure occurrence count.",
                        "format": "int32"
                    },
                    "ExportFormatInfo": {
                        "description": "Schedule export format information.",
                        "$ref": "#/components/schemas/ScheduleExportFormat"
                    },
                    "ScheduleExportLocation": {
                        "description": "Schedule export location information.",
                        "$ref": "#/components/schemas/ScheduleExportLocationResponse"
                    },
                    "StartDate": {
                        "type": "string",
                        "description": "Specifies the UTC start date-time of schedule.",
                        "format": "date-time"
                    },
                    "EndDate": {
                        "type": "string",
                        "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed.",
                        "format": "date-time"
                    },
                    "NextSchedule": {
                        "type": "string",
                        "description": "Specifies the UTC date-time of the upcoming schedule.",
                        "format": "date-time"
                    },
                    "NeverEnd": {
                        "type": "boolean",
                        "description": "When set to true, it creates a schedule with no end.\n\n Note: By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
                    },
                    "EndAfterOccurrence": {
                        "type": "integer",
                        "description": "Specifies the number of occurrences after which the schedule will be completed. \n\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
                        "format": "int32"
                    },
                    "UserList": {
                        "type": "array",
                        "description": "Provides a list of user IDs to the recipients who will get the schedules.",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "GroupList": {
                        "type": "array",
                        "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "ExternalRecipientsList": {
                        "type": "array",
                        "description": "Provides a list of email addresses to the email recipients who will get the schedules. ",
                        "items": {
                            "type": "string"
                        }
                    },
                    "HourlySchedule": {
                        "description": "Runs the schedules on an hourly basis.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiHourlySchedule"
                            }
                        ]
                    },
                    "DailySchedule": {
                        "description": "Runs the schedules on a daily basis. ",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiDailySchedule"
                            }
                        ]
                    },
                    "WeeklySchedule": {
                        "description": "Runs the schedule on a weekly basis.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiWeeklySchedule"
                            }
                        ]
                    },
                    "MonthlySchedule": {
                        "description": "Runs the schedule on a monthly basis.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiMonthlySchedule"
                            }
                        ]
                    },
                    "YearlySchedule": {
                        "description": "Runs the schedules on a yearly basis.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiYearlySchedule"
                            }
                        ]
                    },
                    "RecurrenceTypeId": {
                        "type": "string",
                        "description": "Specifies the schedule type to schedule the dashboard.<br />Values allowed are <code>Hourly, Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
                    },
                    "RecurrenceType": {
                        "type": "string",
                        "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.<br />Values allowed are <code>EveryNdays, EveryWeekday</code>\n\n**Note:** If you choose the recurrence type as EveryNdays, provide a value to the `EveryNdays` property, and leave the (EveryWeekday) property empty."
                    }
                },
                "description": "Schedule item detail."
            },
            "ApiUpdateScheduleRequest": {
                "required": [
                    "ItemId",
                    "Name",
                    "ExportType",
                    "ScheduleType",
                    "StartTime",
                    "NeverEnd"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Schedule name."
                    },
                    "ItemId": {
                        "type": "string",
                        "description": "Item ID.",
                        "format": "guid"
                    },
                    "ExportType": {
                        "type": "string",
                        "description": "Specifies the export type to schedule the dashboard.<br />Values allowed are <code>Excel, Pdf, Image</code>"
                    },
                    "Description": {
                        "type": "string",
                        "description": "File description"
                    },
                    "StartTime": {
                        "type": "string",
                        "description": "Specifies the UTC start date-time of schedule.<br />The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
                    },
                    "NeverEnd": {
                        "type": "boolean",
                        "description": "When set to true, it creates a schedule with no end.\n\n**Note:** By default, the NeverEnd is set to true. To set the end time for schedule, fill in the EndAfterOccurrence or EndDate properties; otherwise they remains empty."
                    },
                    "EndAfterOccurrence": {
                        "type": "integer",
                        "description": "Specifies the number of occurrences after which the schedule will be completed.\n\n**For example:** If you provide 5, the schedule will end after the completion of 5 occurrences.",
                        "format": "int32"
                    },
                    "EndDate": {
                        "type": "string",
                        "description": "Specifies the UTC end date-time of schedule, after which schedule will be completed. The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`.\n\n**For example:** If you provide an end date-time, the schedule will end when the end date-time is reached."
                    },
                    "ScheduleType": {
                        "type": "string",
                        "description": "Specifies the schedule type to schedule the dashboard.<br />Values allowed are <code>Hourly, Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) property empty."
                    },
                    "IsEnabled": {
                        "type": "boolean",
                        "description": "Returns true, if the schedule is enabled."
                    },
                    "FailureNotificationToOwner": {
                        "type": "boolean",
                        "description": "Returns true, if the failure notification to an owner is enabled."
                    },
                    "FailureNotificationToRecipient": {
                        "type": "boolean",
                        "description": "Returns true, if the failure notification to the recipient is enabled."
                    },
                    "FailureOccurrence": {
                        "type": "integer",
                        "description": "Failure occurrence count.",
                        "format": "int32"
                    },
                    "UserList": {
                        "type": "array",
                        "description": "Provides a list of email addresses or user IDs to the recipients who will get the schedules.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "GroupList": {
                        "type": "array",
                        "description": "Provides a list of group IDs to the recipients in the group list who will get the schedules.",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "ExternalRecipientsList": {
                        "type": "array",
                        "description": "Provides a list of email addresses to the email recipients who will get the schedules. ",
                        "items": {
                            "type": "string"
                        }
                    },
                    "RemoveUserList": {
                        "type": "array",
                        "description": "Provides a list of email addresses or user IDs to remove recipients from the schedule subscriptions.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "RemoveGroupList": {
                        "type": "array",
                        "description": "Provides a list of group IDs to remove groups from the schedule subscriptions.",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "RemoveExternalRecipientsList": {
                        "type": "array",
                        "description": "Provides a list of email addresses for removing email recipients from the schedule subscriptions.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ExportFormatInfo": {
                        "description": "Schedule export format information.",
                        "$ref": "#/components/schemas/ScheduleExportFormat"
                    },
                    "ScheduleExportLocation": {
                        "description": "Schedule export location information.",
                        "$ref": "#/components/schemas/ScheduleExportLocation"
                    },
                    "Email": {
                        "description": "Schedule mail information.",
                        "$ref": "#/components/schemas/ApiScheduleEmail"
                    },
                    "HourlySchedule": {
                        "type": "object",
                        "description": "Runs the schedules on an hourly basis.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiHourlySchedule"
                            }
                        ]
                    },
                    "DailySchedule": {
                        "type": "object",
                        "description": "Runs the schedules on a daily basis. ",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiDailySchedule"
                            }
                        ]
                    },
                    "WeeklySchedule": {
                        "type": "object",
                        "description": "Runs the schedule on a weekly basis.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiWeeklySchedule"
                            }
                        ]
                    },
                    "MonthlySchedule": {
                        "type": "object",
                        "description": "Runs the schedule on a monthly basis.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiMonthlySchedule"
                            }
                        ]
                    },
                    "YearlySchedule": {
                        "type": "object",
                        "description": "Runs the schedules on a yearly basis.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiYearlySchedule"
                            }
                        ]
                    }
                },
                "description": "Details about the schedule passed will be updated."
            },
            "ApiValidateItemName": {
              "required": [
                "ItemName",
                "ItemType"
              ],
              "type": "object",
              "properties": {
                "ItemName": {
                  "type": "string",
                  "description": "Item name.<br />Values allowed are <code>Category name, Dashboard name, Data source name, Schedule name, Slideshow name</code>"
                },
                "CategoryName": {
                  "type": "string",
                  "description": "Category name should be provided if the item type is <code>Dashboard</code>"
                },
                "ItemType": {
                  "type": "string",
                  "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Datasource, Schedule, Slideshow</code>"
                }
              }
            },
            "ApiAddEmbedPinboard": {
              "required": [
                "HomepageName",
                "Pininfo"
              ],
              "type": "object",
              "properties": {
                "HomepageName": {
                  "type": "string",
                  "description": "Specify the name of the pinboard"
                },
                "Pininfo": {
                  "type": "array",
                  "description": "Provide the list of Widget IDs, Widget Names, and Dashboard IDs to add the pinboard.",
                  "items": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApiAddPininfo"
                      }
                    ]
                  }
                }
              },
              "description": "Add pinboard request details."
            },
            "ApiAddPininfo": {
              "required": [
                "DashboardId",
                "WidgetId",
                "WidgetName"
              ],
              "type": "object",
              "properties": {
                "WidgetName": {
                  "type": "string",
                  "description": "Specify the Widget Name to add within the pinboard."
                },
                "WidgetId": {
                  "type": "string",
                  "description": "Specify the Widget ID to add within the pinboard.",
                  "format": "guid"
                },
                "DashboardId": {
                  "type": "string",
                  "description": "Specify the Dashboard ID where the widget exists.",
                  "format": "guid"
                }
              }
            },
            "ApiAddPinboardResponse": {
              "required": [
                "ApiStatus",
                "Data",
                "Status"
              ],
              "type": "object",
              "properties": {
                "ApiStatus": {
                  "type": "boolean",
                  "description": "Returns the status of the API."
                },
                "Data": {
                  "type": "string",
                  "description": "Returns the pinboard id from the API.",
                  "format": "guid"
                },
                "Status": {
                  "type": "boolean",
                  "description": "Returns status of the API request."
                }
              },
              "description": "Response details of the pinboard."
            },
            "ApiSiteCopyPinboard": {
              "required": [
                "HomepageName",
                "TargetHomepageName",
                "TargetUserEmail"
              ],
              "type": "object",
              "properties": {
                "HomepageName": {
                  "type": "string",
                  "description": "Specify the name of the copy pinboard."
                },
                "TargetHomepageName": {
                  "type": "string",
                  "description": "Specify the name of the pinboard which is needed to copy."
                },
                "TargetUserEmail": {
                  "type": "string",
                  "description": "Specify the mail id of the user from where the pinboard is to be copied."
                }
              },
              "description": "Copy the pinboard request details."
            },
            "ApiGetPinboardPaginatedResponse": {
                "type": "object",
                "properties": {
                    "Data":{
                        "type": "array",
                        "description" : "Returns data from the API.",
                        "items":{
                            "$ref": "#/components/schemas/PinboardItemsResponse"
                        }
                    },
                    "TotalResults": {
                        "type": "integer",
                        "description": "Returns items count of the API request.",
                        "format": "int32"
                    },
                    "Links": {
                        "type": "array",
                        "description": "Returns pagination links.",
                        "items": {
                            "$ref": "#/components/schemas/Links"
                        }
                    }
                }
            },
            "PinboardItemsResponse":{
                "type": "object",
                "properties": {
                    "CreatedDate": {
                        "type": "string",
                        "description": "Date created of the pinboard in string format.",
                        "format": "datetime"
                    },
                    "ColumnInfo":{
                        "type": "object",
                        "description": "Specifies the details of the widget and dashboard.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiColumnInfo"
                            }
                        ]
                    },
                    "Id": {
                        "type": "string",
                        "description": "Specifies the item ID of the pinboard.",
                        "format": "guid"
                    },
                    "IsDefaultHomepage":{
                        "type": "boolean",
                        "description": "Returns true, if it is default homepage."
                    },
                    "ItemType": {
                        "type": "string",
                        "description": "Item type.<br />The possible values are <code>Widget</code>"
                    },
                    "ModifiedDate": {
                        "type": "string",
                        "description": "Date modified of item in string format."
                    },
                    "Name": {
                        "type": "string",
                        "description": "Specifies the name of the pinboard."
                    }
                }
            },
            "ApiColumnInfo":{
                "type": "object",
                "properties": {
                   "Column": {
                    "type": "array",
                    "description":"Specifies the details of the widget column.",
                    "items":{
                        "$ref":"#/components/schemas/Column"
                    }
                },
                "Layout":{
                    "type": "integer",
                    "description": "Specifies the layout."
                }
                }
            }, 
            "Column":{
                "type": "object",
                "properties": {
                    "Item":{
                        "type": "array",
                        "description": "Specifies the details of each widget item.",
                        "items":{
                            "$ref": "#/components/schemas/WidgetDetails"
                        }
                    }
                }
            },
            "WidgetDetails":{
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "string",
                        "description": "Specifies the widget ID.",
                        "format": "guid"
                    },
                    "IsActive": {
                        "type": "boolean",
                        "description": "Returns true, if the item is active."
                    },
                    "ItemId": {
                        "type": "string",
                        "description": "Specifies the ID of the dashboard.",
                        "format": "guid"
                    },
                    "ItemName": {
                        "type": "string",
                        "description": "Specifies the name of the dashboard."
                    },
                    "CategoryName": {
                        "type": "string",
                        "description": "Specifies the name of the category."
                    },
                    "Name": {
                        "type": "string",
                        "description": "Specifies the name of the widget."
                    },
                    "Path": {
                        "type": "string",
                        "description": "Specifies the version path of the pinned widget." 
                    },
                    "WidgetType": {
                        "type": "string",
                        "description": "Specifies the type of the widget."
                    }
                }
            },
            "ApiUpdateEmbedPinboard": {
              "type": "object",
              "required": [
                "Pininfo"
              ],
              "properties": {
                "SetDefault": {
                  "type": "boolean",
                  "description": "Specify whether the pinboard should be set as default or removed from default.\n\n Note: If your pinboard is not a default pinboard, use null or true instead of false."
                },
                "Pininfo": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAddPininfo"
                  },
                  "description": "Provide the list of Widget IDs, Widget Names, and Dashboard IDs to update the pinboard."
                }
              },
              "description": "Update pinboard request details."
            },
            "ApiValidatePinboardName": {
              "required": [
                "ItemName"
              ],
              "type": "object",
              "properties": {
                "ItemName": {
                  "type": "string",
                  "description": "Pinboard name."
                }
              }
            },
            "ApiPinboard": {
                "required" : [
                    "ItemName"
                ],
                "type": "object",
                "properties": {
                    "ItemName": {
                        "type": "string",
                        "description": "New Pinboard name."
                    }
                }
            },
            "ApiUserAddAttribute": {
              "required": [
                "Name",
                "UserId",
                "Value"
              ],
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "Attribute Name"
                },
                "Value": {
                  "type": "string",
                  "description": "Attribute Value"
                },
                "Description": {
                  "type": "string",
                  "description": "Attribute Description"
                },
                "CanEncrypt": {
                  "type": "boolean",
                  "description": "Encrypt Attribute Value"
                },
                "UserId": {
                  "type": "integer",
                  "description": "User Id",
                  "format": "int32"
                }
              }
            },
            "ApiUserUpdateAttribute": {
              "required": [
                "Id",
                "Name",
                "UserId",
                "Value"
              ],
              "type": "object",
              "properties": {
                "Id": {
                  "type": "integer",
                  "description": "Attribute Id",
                  "format": "int32"
                },
                "Name": {
                  "type": "string",
                  "description": "Attribute Name"
                },
                "Value": {
                  "type": "string",
                  "description": "Attribute Value"
                },
                "Description": {
                  "type": "string",
                  "description": "Attribute Description"
                },
                "CanEncrypt": {
                  "type": "boolean",
                  "description": "Encrypt Attribute Value"
                },
                "UserId": {
                  "type": "integer",
                  "description": "User Id",
                  "format": "int32"
                }
              }
            },
            "ApiGroupAddAttribute": {
              "required": [
                "GroupId",
                "Name",
                "Value"
              ],
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "Attribute Name"
                },
                "Value": {
                  "type": "string",
                  "description": "Attribute Value"
                },
                "Description": {
                  "type": "string",
                  "description": "Attribute Description"
                },
                "CanEncrypt": {
                  "type": "boolean",
                  "description": "Encrypt Attribute Value"
                },
                "GroupId": {
                  "type": "integer",
                  "description": "Group Id",
                  "format": "int32"
                }
              }
            },
            "ApiGroupUpdateAttribute": {
              "required": [
                "GroupId",
                "Id",
                "Name",
                "Value"
              ],
              "type": "object",
              "properties": {
                "Id": {
                  "type": "integer",
                  "description": "Attribute Id",
                  "format": "int32"
                },
                "Name": {
                  "type": "string",
                  "description": "Attribute Name"
                },
                "Value": {
                  "type": "string",
                  "description": "Attribute Value"
                },
                "Description": {
                  "type": "string",
                  "description": "Attribute Description"
                },
                "CanEncrypt": {
                  "type": "boolean",
                  "description": "Encrypt Attribute Value"
                },
                "GroupId": {
                  "type": "integer",
                  "description": "Group Id",
                  "format": "int32"
                }
              }
            },
            "ApiSiteAddAttribute": {
              "required": [
                "Name",
                "Value"
              ],
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "Attribute Name"
                },
                "Value": {
                  "type": "string",
                  "description": "Attribute Value"
                },
                "Description": {
                  "type": "string",
                  "description": "Attribute Description"
                },
                "CanEncrypt": {
                  "type": "boolean",
                  "description": "Encrypt Attribute Value"
                }
              }
            },
            "ApiSiteUpdateAttribute": {
              "required": [
                "Id",
                "Name",
                "Value"
              ],
              "type": "object",
              "properties": {
                "Id": {
                  "type": "integer",
                  "description": "Attribute Id",
                  "format": "int32"
                },
                "Name": {
                  "type": "string",
                  "description": "Attribute Name"
                },
                "Value": {
                  "type": "string",
                  "description": "Attribute Value"
                },
                "Description": {
                  "type": "string",
                  "description": "Attribute Description"
                },
                "CanEncrypt": {
                  "type": "boolean",
                  "description": "Encrypt Attribute Value"
                }
              }
            },
            "ApiSiteSettingList": {
              "type": "array",
              "description": "Site settings details.",
              "items": {
                "$ref": "#/components/schemas/ApiSiteSettings"
              }
            },
            "ApiSiteSettings": {
              "type": "object",
              "properties": {
                "Key": {
                  "type": "string",
                  "description": "Site settings name.<br /><br />Valid keys: <code>OrganizationName, SiteUrl, LoginScreenLogo, EmailLogo, FavIcon, ShowCopyrightInformation, ShowPoweredBySyncfusion, Use24HourFormat,  DisableUserPreference, DataLanguage, DateFormat, TimeZone</code>"
                },
                "Value": {
                  "type": "string",
                  "description": "Site settings value.<br /><br />Values of, <br />1. <code>OrganizationName, SiteUrl, DataLanguage, TimeZone</code> are in `string`<br /><br />2. <code>LoginScreenLogo, EmailLogo, FavIcon</code> are in `Base64EncodedString`<br /><br />3. <code>ShowCopyrightInformation, ShowPoweredBySyncfusion, Use24HourFormat, DisableUserPreference</code> are in `true` or `false`<br /><br />4. <code>DateFormat</code> is in `MM/dd/yyyy` `dd/MM/yyyy` `d MMM, yyyy` `MMM d, yyyy`"
                },
                "FileFormat": {
                  "type": "string",
                  "description": "Image format type.<br />Values allowed are <code>svg, png, jpg, jpeg</code>"
                }
              }
            },
            "UpdateApiSiteSettingList": {
              "type": "array",
              "description": "Site settings details.",
              "items": {
                "$ref": "#/components/schemas/UpdateApiSiteSettings"
              }
            },
            "UpdateApiSiteSettings": {
              "required": [
                "Key",
                "Value"
              ],
              "type": "object",
              "properties": {
                "Key": {
                  "type": "string",
                  "description": "Site settings name.<br /><br />Valid keys: <code>OrganizationName, SiteUrl, LoginScreenLogo, EmailLogo, FavIcon, ShowCopyrightInformation, ShowPoweredBySyncfusion, Use24HourFormat,  DisableUserPreference, DataLanguage, DateFormat, TimeZone</code>"
                },
                "Value": {
                  "type": "string",
                  "description": "Site settings value.<br /><br />Values of, <br />1. <code>OrganizationName, SiteUrl, DataLanguage, TimeZone</code> should be `string`<br /><br />2. <code>LoginScreenLogo, EmailLogo, FavIcon</code> should be `Base64EncodedString`<br /><br />3. <code>ShowCopyrightInformation, ShowPoweredBySyncfusion, Use24HourFormat, DisableUserPreference</code> should be `true` or `false`<br /><br />4. <code>DateFormat</code> should be `MM/dd/yyyy` `dd/MM/yyyy` `d MMM, yyyy` `MMM d, yyyy`"
                },
                "FileFormat": {
                  "type": "string",
                  "description": "Image format type. It must required when update image in site settings.<br />Values allowed are <code>svg, png, jpg, jpeg</code>"
                }
              }
            },
            "ApiUpdateSiteSettingsResponse": {
              "required": [
                "ApiStatus",
                "Status"
              ],
              "type": "object",
              "properties": {
                "ApiStatus": {
                  "type": "boolean",
                  "description": "Returns the status of the API."
                },
                "Status": {
                  "type": "boolean",
                  "description": "Returns status of the API request."
                },
                "StatusMessage": {
                  "type": "string",
                  "description": "Returns the status message from the API."
                }
              }
            },
            "ApiDashboardSettings": {
              "type": "object",
              "properties": {
                "MakePublicEnabled": {
                  "type": "boolean",
                  "description": "Returns true, if the public dashboard setting is enabled."
                },
                "DefaultViewsEnabled": {
                  "type": "boolean",
                  "description": "Returns true, if the default views setting is enabled."
                },
                "AutoSaveEnabled": {
                  "type": "boolean",
                  "description": "Returns true, if the autosave filter setting is enabled."
                },
                "ThemingEnabled": {
                  "type": "boolean",
                  "description": "Returns true, if the dashboard theming setting is enabled."
                },
                "UsageAnaylticsEnabled": {
                  "type": "boolean",
                  "description": "Returns true, if the usage analytics dashboard setting is enabled."
                }
              }
            },
            "ApiUpdateDashboardSettings": {
              "type": "object",
              "properties": {
                "MakePublicEnabled": {
                  "type": "boolean",
                  "description": "Specify true to enable public dashboard setting.",
                  "nullable": true
                },
                "DefaultViewsEnabled": {
                  "type": "boolean",
                  "description": "Specify true to enable default views setting.",
                  "nullable": true
                },
                "AutoSaveEnabled": {
                  "type": "boolean",
                  "description": "Specify true to enable autosave filter setting.",
                  "nullable": true
                },
                "ThemingEnabled": {
                  "type": "boolean",
                  "description": "Specify true to enable dashboard theming setting.",
                  "nullable": true
                },
                "UsageAnaylticsEnabled": {
                  "type": "boolean",
                  "description": "Specify true to enable usage analytics dashboard setting.",
                  "nullable": true
                }
              }
            },
            "ApiUpdateEmailSettings": {
              "required": [
                "SenderEmailAddress",
                "AuthenticationType"
              ],
              "type": "object",
              "properties": {
                "EmailAccount":{
                    "type": "string",
                    "description": "Specify the email account.<br />Values allowed are <code>SMTP, Microsoft365</code> <br /> Default value is <code>SMTP</code>"
                },
                "SMTPServer": {
                  "type": "string",
                  "description": "Specify the SMTP server name.<br />Applicable only for <code>SMTP</code>."
                },
                "SMTPPort": {
                  "type": "string",
                  "description": "Specify the SMTP port number.<br />Applicable only for <code>SMTP</code>."
                },
                "SenderName": {
                  "type": "string",
                  "description": "Specify the Sender name for the email.<br />Applicable only for <code>SMTP</code>."
                },
                "SenderEmailAddress": {
                  "type": "string",
                  "description": "Specify the Sender email address."
                },
                "AuthenticationType": {
                  "type": "string",
                  "description": "Specify the Authentication type of the email.<br />Values allowed are <code>Basic, Anonymous, OAuth</code> <br /> OAuth only applicable for <code>Microsoft365</code>"
                },
                "Username": {
                  "type": "string",
                  "description": "Specify the Username for Basic Authentication type.<br />Applicable only for <code>SMTP</code>."
                },
                "Password": {
                  "type": "string",
                  "description": "Specify the Password for Basic Authentication type.<br />Applicable only for <code>SMTP</code>."
                },
                "EnableSSL": {
                  "type": "boolean",
                  "description": "Specify true to enable SSL to connect with SMTP server.<br />Applicable only for <code>SMTP</code>.",
                  "nullable": true
                },
                "TenantId": {
                    "type": "string",
                    "description": "Specify the Tenant name.<br />Applicable only for <code>Microsoft365</code>."
                },
                "ClientId": {
                    "type": "string",
                    "description": "Specify the Client id.<br />Applicable only for <code>Microsoft365</code>."
                },
                "ClientSecret": {
                    "type": "string",
                    "description": "Specify the Client secret.<br />Applicable only for <code>Microsoft365</code>."
                }
              }
            },
            "ApiUpdateAzureADSettings": {
              "required": [
                "TenantId",
                "ClientId",
                "ClientSecret"
              ],
              "type": "object",
              "properties": {
                "TenantId": {
                  "type": "string",
                  "description": "Specify the Tenant Id."
                },
                "ClientId": {
                  "type": "string",
                  "description": "Specify the Client Id."
                },
                "ClientSecret": {
                  "type": "string",
                  "description": "Specify the Client secret."
                },
                "EnableGroupUserImport": {
                  "type": "boolean",
                  "description": "Specify true to enable import users from the group.\n\n**Note:** By default, the value is true."
                }
              }
            },
            "ApiUpdateAzureAdScheduleSynchronizationSettings": {
              "required": [
                "StartTime",
                "ScheduleType"
              ],
              "type": "object",
              "properties": {
                "EnableSchedule": {
                  "type": "boolean",
                  "description": "Specify true to enable Azure AD schedule.\n\n**Note:** By default, the value is true."
                },
                "StartTime": {
                  "type": "string",
                  "description": "Specifies the UTC start date-time of schedule.<br />The format should be ISO 8601 i.e. `yyyy-MM-ddTHH:mm:ssZ`."
                },
                "ScheduleType": {
                  "type": "string",
                  "description": "Specifies the schedule type.<br />Values allowed are <code>Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
                },
                "DailySchedule": {
                  "type": "object",
                  "description": "Runs the schedules on a daily basis.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiDailySchedule"
                    }
                  ]
                },
                "WeeklySchedule": {
                  "type": "object",
                  "description": "Runs the schedule on a weekly basis.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiWeeklySchedule"
                    }
                  ]
                },
                "MonthlySchedule": {
                  "type": "object",
                  "description": "Runs the schedule on a monthly basis.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiMonthlySchedule"
                    }
                  ]
                },
                "YearlySchedule": {
                  "type": "object",
                  "description": "Runs the schedules on a yearly basis.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiYearlySchedule"
                    }
                  ]
                }
              }
            },
            "ApiUpdateAzureAdScheduleSynchronizationSettingsResponse": {
              "type": "object",
              "properties": {
                "ScheduleType": {
                  "type": "string",
                  "description": "Returns the schedule type."
                },
                "NextScheduleDate": {
                  "type": "string",
                  "description": "Returns the schedule?s next run."
                },
                "StatusMessage": {
                  "type": "string",
                  "description": "Returns the status message from the API."
                }
              },
              "description": "Response details of created schedules."
            },
            "ApiAccountSettings": {
              "type": "object",
              "properties": {
                "ActivationType": {
                  "type": "string",
                  "description": "Returns activation type.<br />Values allowed are <code>AutomaticActivation, EmailActivation.</code>"
                },
                "UserEmailRequired": {
                  "type": "boolean",
                  "description": "Returns true, if a user email address is required while creating new users."
                }
              }
            },
            "ApiUpdateAccountSettings": {
              "required": [
                "ActivationType"
              ],
              "type": "object",
              "properties": {
                "ActivationType": {
                  "type": "string",
                  "description": "Specifies the activation type.<br />Values allowed are <code>AutomaticActivation, EmailActivation.</code>."
                },
                "UserEmailRequired": {
                  "type": "boolean",
                  "description": "Specify true to set the user email address field is required while creating new users in Bold BI server.\n\n**Note:** By default, the value is true."
                }
              }
            },
            "ApiUpdateCorsSettings": {
              "type": "object",
              "properties": {
                "EnableCors": {
                  "type": "boolean",
                  "description": "Specify true to enable Cors setting.",
                  "nullable": true
                },
                "AllowAnyOrigin": {
                  "type": "boolean",
                  "description": "Specify true to allow all origins in Cors setting."
                },
                "AllowedOrigins": {
                  "type": "string",
                  "description": "Specified origins will be able to access the resource.\n\n**Note:** Multiple origins are allowed using a comma separator.",
                  "example": "https://www.boldbi.com/,https://onpremise-demo.boldbi.com/"
                },
                "AllowCredentials": {
                  "type": "boolean",
                  "description": "Specify true to allow credentials in Cors setting."
                },
                "AllowedHeaders": {
                  "type": "string",
                  "description": "Specified HTTP header values will be used when making an actual request.\n\n**Note:** Multiple headers are allowed using comma separator.",
                  "example": "Content-Type,Content-Length"
                },
                "AllowedMethods": {
                  "type": "string",
                  "description": "Specified methods will be able to access the resource.<br />Values allowed are <code>GET, HEAD, POST, PUT, DELETE.</code>\n\n**Note:** Multiple headers are allowed using comma separator .",
                  "example": "POST,PUT"
                },
                "ExposeHeaders": {
                  "type": "string",
                  "description": "Specify header values are exposed to browser based scripts.\n\n**Note:** Multiple headers are allowed using comma separator .",
                  "example": "Content-Language, Content-Length, Content-Type"
                },
                "PreflightMaxAge": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Specifies the maximum time a preflight request's results can be cached."
                }
              }
            },
            "ApiEmbedSecretSettings": {
              "type": "object",
              "required": [
                "ApiStatus",
                "Status"
              ],
              "properties": {
                "ApiStatus": {
                  "type": "boolean",
                  "description": "Returns the status of the API"
                },
                "Data": {
                  "type": "string",
                  "description": "Returns the generated embed secret key."
                },
                "Status": {
                  "type": "boolean",
                  "description": "Returns the status of the API request."
                },
                "StatusMessage": {
                  "type": "string",
                  "description": "Returns the status message from the API."
                }
              }
            },
            "ApiPublishItemDetail": {
              "required": [
                "ItemId",
                "TargetSiteDetails"
              ],
              "type": "object",
              "properties": {
                "ItemId": {
                  "type": "string",
                  "description": "Item Id",
                  "format": "guid"
                },
                "TargetSiteDetails": {
                  "type": "array",
                  "description": "Target Site Details",
                  "items": {
                    "$ref": "#/components/schemas/TargetSiteDetails"
                  }
                }
              }
            },
            "TargetSiteDetails": {
              "required": [
                "CategoryName",
                "ClientId",
                "PublishType"
              ],
              "type": "object",
              "properties": {
                "ClientId": {
                  "type": "string",
                  "description": "Client Id",
                  "format": "guid"
                },
                "SiteIdentifier": {
                  "type": "string",
                  "description": "Site Identifier (Not required for external publish type)"
                },
                "CategoryName": {
                  "type": "string",
                  "description": "Category Name"
                },
                "Description": {
                  "type": "string",
                  "description": "Description"
                },
                "LockDashboard": {
                  "type": "boolean",
                  "description": "Lock Dashboard"
                },
                "LockDatasource": {
                  "type": "boolean",
                  "description": "Lock Datasource"
                },
                "ExternalSiteId": {
                    "type": "integer",
                    "description": "External site Id.",
                    "format": "int32"
                },
                "Datasources": {
                  "type": "array",
                  "description": "Data sources",
                  "items": {
                    "$ref": "#/components/schemas/DataSources"
                  }
                },
                "PublishType": {
                  "type": "string",
                  "enum": [
                    "Internal",
                    "External"
                  ]
                }
              }
            },
            "DataSources": {
              "required": [
                "Id"
              ],
              "type": "object",
              "properties": {
                "Id": {
                  "type": "string",
                  "description": "Datasource Id"
                },
                "IsLocked": {
                  "type": "boolean",
                  "description": "Is Datasource Locked"
                }
              }
            },
            "ExternalSites": {
              "required": [
                "ClientId",
                "ClientSecret",
                "Name",
                "SiteURL"
              ],
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "Name"
                },
                "ClientId": {
                  "type": "string",
                  "description": "Client Id"
                },
                "ClientSecret": {
                  "type": "string",
                  "description": "Client Secret"
                },
                "SiteURL": {
                  "type": "string",
                  "description": "Site URL"
                }
              }
            },
            "ApiUserPermissionAdd": {
              "required": [
                "PermissionAccess",
                "UserId",
                "PermissionEntity"
              ],
              "type": "object",
              "properties": {
                "PermissionAccess": {
                  "type": "string",
                  "description": "Specify an access type for item.<br />Values allowed are <code>Create, Read, ReadWrite, ReadWriteDelete</code>"
                },
                "UserId": {
                  "type": "integer",
                  "description": "User ID.",
                  "format": "int32"
                },
                "PermissionEntity": {
                    "type": "string",
                    "description": "Specify an entity of item for permission.<br />Values allowed are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard, AllDataSources, SpecificDataSource, AllSlideshow, SpecificSlideshow, AllPermissions , SpecificPermissions, AllSettings, SpecificSettings, AllGroups, SpecificGroup, UserandGroups</code>"
                },
                "ItemId": {
                  "type": "string",
                  "description": "Specify the item ID while assigning permission to particular item.",
                  "format": "guid",
                  "nullable": true
                },
                "ScopeId":{
                    "type": "string",
                    "description": "Specify the group ID, settings name or item type to add. <br />Values allowed are </br> SpecificGroup - <code>Specify the group ID</code> </br> SpecificSettings - <code>Category, Dashboard, Datasource, Schedule, Slideshow</code> </br> SpecificPermissions - <code>SiteSettings, DashboardSettings, EmbedSettings, DataStoreSettings, Connectors, Email, Accounts, UserDirectorySettings, AuthenticationSettings, NotificationSettings, Widgets, Security,  CORSPolicySettings, LookAndFeel, SiteCredentials</code>.",
                    "nullable":true
                }
              },
              "description": "Permission details."
            },
            "ApiUserPermissionDetail": {
              "type": "object",
              "properties": {
                "PermissionAccess": {
                  "type": "string",
                  "description": "Specify an access type for item.<br />Values allowed are <code>Create, Read, ReadWrite, ReadWriteDelete</code>"
                },
                "PermissionEntity": {
                  "type": "string",
                  "description": "Specify an entity of item for permission.<br />Values allowed are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard</code>"
                },
                "UserId": {
                  "type": "integer",
                  "description": "User ID.",
                  "format": "int32"
                },
                "GroupId": {
                  "type": "integer",
                  "description": "Group ID.",
                  "format": "int32"
                },
                "InheritedFromGroup": {
                  "type": "boolean",
                  "description": "Inherit from group."
                },
                "ItemName": {
                  "type": "string",
                  "description": "Item name."
                },
                "PermissionId": {
                  "type": "integer",
                  "description": "Permission ID.",
                  "format": "int32"
                },
                "ItemId": {
                  "type": "string",
                  "description": "Item ID.",
                  "format": "guid",
                  "nullable": true
                }
              },
              "description": "User permission details."
            },
            "ApiGroupPermissionAdd": {
                "required":[
                    "GroupId",
                    "Permission"
                ],
                "type": "object",
                "properties": {
                  "GroupId": {
                    "type": "integer",
                    "description": "Group ID.",
                    "format": "int32"
                  },
                  "Permission": {
                      "type" : "array",
                      "description": "Specify the details of the group permissions.", 
                      "items":{
                          "$ref":"#/components/schemas/Permission"
                        }
                    }
                }
            },
            "Permission": {
                  "type": "object",
                  "properties":{
                  "PermissionAccess": {
                      "type": "string",
                      "description": "Specify an access type for item.<br />Values allowed are <code>Create, Read, ReadWrite, ReadWriteDelete, Manage</code>"
                    },
                  "PermissionEntity": {
                    "type": "string",
                    "description": "Specify an entity of item for permission.<br />Values allowed are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard, AllDataSources, SpecificDataSource, AllSlideshow, SpecificSlideshow, AllPermissions , SpecificPermissions, AllSettings, SpecificSettings, AllGroups, SpecificGroup, UserandGroups</code>"
                  },
                  "ItemId": {
                    "type": "string",
                    "description": "Specify the item ID while assigning permission to particular item.",
                    "format": "guid",
                    "nullable": true
                  },
                  "ScopeId":{
                    "type": "string",
                    "description": "Specify the group name, settings name or item type to add. <br/>Values  allowed are </br> SpecificGroup - <code>Specify the group name</code> </br> SpecificSettings - <code>Category, Dashboard, Datasource, Schedule, Slideshow</code> </br> SpecificPermissions - <code>SiteSettings, DashboardSettings, EmbedSettings, DataStoreSettings, Connectors, Email, Accounts, UserDirectorySettings, AuthenticationSettings, NotificationSettings, Widgets, Security,  CORSPolicySettings, LookAndFeel, SiteCredentials</code>.",
                    "nullable":true
                  }
                }
            },
            "BulkGroupPermission":{
                "type": "object",
                "properties":{
                    "AddedPermissions": {
                        "type": "array",
                        "description": "Specifies the added permission details.",
                        "items":{
                            "$ref":"#/components/schemas/AddedPermission"
                        }
                    },
                    "FailedPermissions":{
                        "type": "array",
                        "description": "Specifies the failed permission details.",
                        "items":{
                            "$ref":"#/components/schemas/FailedPermission"
                        }
                    }
                }
            },
            "AddedPermission": {
                "type": "object",
                "properties": {
                    "GroupId": {
                        "type": "integer",
                        "description": "Specifies the group ID."
                    },
                    "Permission": {
                        "type": "array",
                        "description": "Specifies the group permission details.",
                        "items":{
                            "$ref":"#/components/schemas/BulkGroupAddPermission"
                        }
                    }
                }
            },
            "FailedPermission":{
                "type": "object",
                "properties":{
                    "GroupId":{
                        "type": "integer",
                        "description": "Specifies the group ID."
                    },
                    "FailedGroupPermissions":
                    {
                        "type": "array",
                        "description": "Specifies the group permission details.",
                        "items": {
                            "$ref":"#/components/schemas/BulkGroupFailedPermissions"
                        }
                    }
                }
            },
            "BulkGroupAddPermission":{
                "type":"object",
                "properties": {
                    "PermissionAccess": {
                        "type": "string",
                        "description": "Specifies an access type for item.<br />The possible values are <code>Create, Read, ReadWrite, ReadWriteDelete, Manage</code>"
                    },
                    "PermissionEntity": {
                      "type": "string",
                      "description": "Specifies an entity of item for permission.<br />The possible values are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard, AllDataSources, SpecificDataSource, AllSlideshow, SpecificSlideshow, AllPermissions , SpecificPermissions, AllSettings, SpecificSettings, AllGroups, SpecificGroup, UserandGroups</code>"
                    },
                    "ItemId": {
                        "type": "string",
                        "description": "Specifies the item ID.",
                        "format": "guid"
                    },
                    "ScopeId": {
                        "type": "string",
                        "description": "Specifies the Scope ID of the added permission type."
                    }
                }
            },
            "BulkGroupFailedPermissions":{
                "type":"object",
                "properties": {
                    "PermissionAccess": {
                        "type": "string",
                        "description": "Specifies an access type for item.<br />The possible values are <code>Create, Read, ReadWrite, ReadWriteDelete, Manage</code>"
                    },
                    "PermissionEntity": {
                      "type": "string",
                      "description": "Specifies an entity of item for permission.<br />The possible values are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard, AllDataSources, SpecificDataSource, AllSlideshow, SpecificSlideshow, AllPermissions , SpecificPermissions, AllSettings, SpecificSettings, AllGroups, SpecificGroup, UserandGroups</code>"
                    },
                    "ItemId": {
                        "type": "string",
                        "description": "Specifies the item ID.",
                        "format": "guid"
                    },
                    "ScopeId": {
                        "type": "string",
                        "description": "Specifies the Scope ID of the added permission type."
                    },
                    "Message": {
                        "type": "string",
                        "description": "Specifies the error message of the permission."
                    }
                }
            },
            "ApiGroupPermissionDetail": {
              "type": "object",
              "properties": {
                "PermissionAccess": {
                  "type": "string",
                  "description": "Specify an access type for item.<br />Values allowed are <code>Create, Read, ReadWrite, ReadWriteDelete</code>"
                },
                "PermissionEntity": {
                  "type": "string",
                  "description": "Specify an entity of item for permission.<br />Values allowed are <code>AllCategories, SpecificCategory, AllSchedules, SpecificSchedule, AllDashboards, DashboardsInCategory, SpecificDashboard</code>"
                },
                "GroupId": {
                  "type": "integer",
                  "description": "Group ID.",
                  "format": "int32"
                },
                "ItemName": {
                  "type": "string",
                  "description": "Item name."
                },
                "PermissionId": {
                  "type": "integer",
                  "description": "Permission ID.",
                  "format": "int32"
                },
                "ItemId": {
                  "type": "string",
                  "description": "Item ID.",
                  "format": "guid",
                  "nullable": true
                }
              },
              "description": "Group Permission details."
            },
            "ApiGetGroupsPermissionPaginatedApiResponse":{
                "type": "object",
                "properties": {
                    "Data": {
                        "type": "array",
                        "description": "Returns data from the API.",
                        "items": {
                            "$ref": "#/components/schemas/ApiGroupPermissionDetail"
                        }
                    },
                    "TotalResults": {
                        "type": "integer",
                        "description": "Returns items count of the API request.",
                        "format": "int32"
                    },
                    "Links": {
                        "type": "array",
                        "description": "Returns pagination links.",
                        "items": {
                            "$ref": "#/components/schemas/Links"
                        }
                    }
                }
            },
            "ApiGetUsersPermissionPaginatedApiResponse":{
                "type": "object",
                "properties": {
                    "Data": {
                        "type": "array",
                        "description": "Returns data from the API.",
                        "items": {
                            "$ref": "#/components/schemas/ApiUserPermissionDetail"
                        }
                    },
                    "TotalResults": {
                        "type": "integer",
                        "description": "Returns items count of the API request.",
                        "format": "int32"
                    },
                    "Links": {
                        "type": "array",
                        "description": "Returns pagination links.",
                        "items": {
                            "$ref": "#/components/schemas/Links"
                        }
                    }
                }
}, 
            "ApiGetUsersPaginatedApiResponse": {
                "type": "object",
                "properties": {
                    "Data": {
                        "type": "array",
                        "description": "Returns data from the API.",
                        "items": {
                            "$ref": "#/components/schemas/ApiUserListV5"
                        }
                    },
                    "TotalResults": {
                        "type": "integer",
                        "description": "Returns items count of the API request.",
                        "format": "int32"
                    },
                    "Links": {
                        "type": "array",
                        "description": "Returns pagination links.",
                        "items": {
                            "$ref": "#/components/schemas/Links"
                        }
                    }
                }
            },
            "ApiUserListV5": {
                "type": "object",
                "properties": {
                    "UserList": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiUserV5"
                        }
                    }
                },
                "description": "List of users"
            },
            "ApiFailedUsers":{
                "type": "object",
                "properties": {
                  "UserName": {
                    "type": "string",
                    "description": "Username of the user."
                  },
                  "DisplayName": {
                    "type": "string",
                    "description": "Display name of the user."
                  },
                  "Email": {
                    "type": "string",
                    "description": "Email address of the user."
                  },
                  "FirstName": {
                    "type": "string",
                    "description": "First name of the user."
                  },
                  "LastName": {
                    "type": "string",
                    "description": "Last name of the user."
                  },
                  "Message":{
                    "type":"array",
                    "description": "List of error messages",
                    "items": {
                      "type": "string"
                    }
                  }
              }
            },
            "ApiUserV5": {
                "type": "object",
                "properties": {
                    "ContactNumber": {
                        "type": "string",
                        "description": "Phone number of the user."
                    },
                    "DisplayName": {
                        "type": "string",
                        "description": "Display name of the user."
                    },
                    "Email": {
                        "type": "string",
                        "description": "Email address of the user."
                    },
                    "FirstName": {
                        "type": "string",
                        "description": "First name of the user."
                    },
                    "IsActive": {
                        "type": "boolean",
                        "description": "Returns true if the user is active."
                    },
                    "DirectoryType": {
                        "$ref": "#/components/schemas/DirectoryType"
                    },
                    "Lastname": {
                        "type": "string",
                        "description": "Last name of the user."
                    },
                    "UserId": {
                        "type": "integer",
                        "description": "ID of the user.",
                        "format": "int32"
                    },
                    "Username": {
                        "type": "string",
                        "description": "Username of the user."
                    },
                    "UserStatus": {
                        "description": "Returns the status of the user.",
                        "$ref": "#/components/schemas/UserStatus"
                    }
                },
                "description": "User detail"
            },
            "ApiGetUserGroupsPaginatedApiResponse": {
                "type": "object",
                "properties": {
                    "Data": {
                        "type": "array",
                        "description": "Returns data from the API.",
                        "items": {
                            "$ref": "#/components/schemas/ApiGroupList"
                        }
                    },
                    "TotalResults": {
                        "type": "integer",
                        "description": "Returns items count of the API request.",
                        "format": "int32"
                    },
                    "Links": {
                        "type": "array",
                        "description": "Returns pagination links.",
                        "items": {
                            "$ref": "#/components/schemas/Links"
                        }
                    }
                }
            },
            "ApiGroupList": {
                "type": "object",
                "properties": {
                    "GroupList": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiGroup"
                        }
                    }
                }
            },
            "ApiGetGroupsPaginatedApiResponse": {
                "type": "object",
                "properties": {
                    "Data": {
                        "type": "array",
                        "description": "Returns data from the API.",
                        "items": {
                            "$ref": "#/components/schemas/ApiGroupListV5"
                        }
                    },
                    "TotalResults": {
                        "type": "integer",
                        "description": "Returns items count of the API request.",
                        "format": "int32"
                    },
                    "Links": {
                        "type": "array",
                        "description": "Returns pagination links.",
                        "items": {
                            "$ref": "#/components/schemas/Links"
                        }
                    }
                }
            },
            "ApiGroupListV5": {
                "type": "object",
                "properties": {
                    "GroupList": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiGroupV5"
                        }
                    }
                }
            },
            "ApiGroupV5": {
                "type": "object",
                "properties": {
                    "Description": {
                        "type": "string",
                        "description": "Description of the group."
                    },
                    "Id": {
                        "type": "integer",
                        "description": "ID of the group.",
                        "format": "int32"
                    },
                    "DirectoryType": {
                        "$ref": "#/components/schemas/DirectoryType"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Name of the group."
                    },
                    "UserCount": {
                        "type": "integer",
                        "description": "User(s) count",
                        "format": "int32"
                    }
                }
            },    
            "ApiGetGroupUsersPaginatedApiResponse": {
                "type": "object",
                "properties": {
                    "Data": {
                        "type": "array",
                        "description": "Returns data from the API.",
                        "items": {
                            "$ref": "#/components/schemas/ApiUserList"
                        }
                    },
                    "TotalResults": {
                        "type": "integer",
                        "description": "Returns items count of the API request.",
                        "format": "int32"
                    },
                    "Links": {
                        "type": "array",
                        "description": "Returns pagination links.",
                        "items": {
                            "$ref": "#/components/schemas/Links"
                        }
                    }
                }
            },
            "ApiUserList": {
                "type": "object",
                "properties": {
                    "UserList": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiUser"
                        }
                    }
                },
                "description": "List of users"
            },
            "ApiUser": {
                "type": "object",
                "properties": {
                    "ContactNumber": {
                        "type": "string",
                        "description": "Phone number of the user."
                    },
                    "DisplayName": {
                        "type": "string",
                        "description": "Display name of the user."
                    },
                    "Email": {
                        "type": "string",
                        "description": "Email address of the user."
                    },
                    "FirstName": {
                        "type": "string",
                        "description": "First name of the user."
                    },
                    "IsActive": {
                        "type": "boolean",
                        "description": "Returns true if the user is active."
                    },
                    "IsAzureAdUser": {
                        "type": "boolean",
                        "description": "Returns true if the user is added from Azure Active Directory."
                    },
                    "Lastname": {
                        "type": "string",
                        "description": "Last name of the user."
                    },
                    "UserId": {
                        "type": "integer",
                        "description": "ID of the user.",
                        "format": "int32"
                    },
                    "Username": {
                        "type": "string",
                        "description": "Username of the user."
                    },
                    "UserStatus": {
                        "description": "Returns the status of the user.",
                        "$ref": "#/components/schemas/UserStatus"
                    }
                },
                "description": "User detail"
            },
            "Links": {
                "type": "object",
                "properties": {
                    "Link": {
                        "type": "string",
                        "description": "Returns the page link."
                    },
                    "Rel": {
                        "type": "string",
                        "description": "Returns link type. Valid values: `First` `Next` `Prev` `Last`."
                    },
                    "Type": {
                        "type": "string",
                        "description": "Returns method type. Valid values: `GET`."
                    }
                }
            },
            "ApiEditExternalSites": {
                "required": [
                  "Name",
                  "ClientId",
                  "ClientSecret",
                  "SiteURL"
                ],
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string",
                    "description": "Name"
                  },
                  "ClientId": {
                    "type": "string",
                    "description": "Client Id"
                  },
                  "ClientSecret": {
                    "type": "string",
                    "description": "Client Secret"
                  },
                  "SiteURL": {
                    "type": "string",
                    "description": "Site URL"
                  }
                }
            },
            "ApiExternalSiteDetails": {
              "type": "object",
              "properties": {
                "Id": {
                    "type": "integer",
                    "description": "Id of the External site",
                    "format": "int32"
                  },
                "Name": {
                  "type": "string",
                  "description": "Name"
                },
                "ClientId": {
                  "type": "string",
                  "description": "Client Id"
                },
                "SiteURL": {
                  "type": "string",
                  "description": "Site URL"
                }
              },
              "description": "External Site details."
            },
            "ApiLookandFeelSettings": {
              "type": "object",
              "properties": {
                "InheritGlobalSettings": {
                  "type": "boolean",
                  "description": "Returns true if a user enables Inherit from Global settings."
                },
                "ThemeMode": {
                  "type": "string",
                  "description": "Returns Theme Mode.<br />Values allowed are <code>Light, Dark.</code>"
                },
                "FontPreference":{
                    "type": "string",
                    "description": "Returns FontPreference."
                },
                "ApplicationCustomTheme": {
                    "type": "string",
                    "description": "Returns Custom Theme."
                },
                "DashboardCustomTheme": {
                    "type": "string",
                    "description": "Returns Dashboard Theme."
                }
              }
            },
            "ApiUpdateLookAndSettings": {
              "required": [
                "InheritGlobalSettings",
                "ThemeMode",
                "FontPreference"
              ],
              "type": "object",
              "properties": {
                "InheritGlobalSettings": {
                  "type": "string",
                  "description": "Specify true will cause the look and feel to be inherited from the UMS settings."
                },
                "ThemeMode": {
                  "type": "boolean",
                  "description": "Specifies the Theme Mode type.<br />Values allowed are <code>Light, Dark.</code>."
                },
                "FontPreference":{
                    "type": "string",
                    "description": "Specifies the FontPreference."
                },
                "ApplicationCustomThemeEnabled": {
                    "type": "boolean",
                    "description": "Specify true to set the Custom Theme."
                },
                "DashboardCustomThemeEnabled": {
                    "type": "boolean",
                    "description": "Specify true to set the Dashboard Theme."
                },
                "ApplicationCustomTheme  ": {
                    "type": "string",
                    "description": "Application Custom Theme."
                },
                "DashboardCustomTheme": {
                    "type": "string",
                    "description": "Dashboard Custom Theme."
                }
              }
            },
            "ApiGetDeploymentDashboards": {
                "type": "array",
                "description": "List of deployment dashboards.",
                "items": {
                    "$ref": "#/components/schemas/ApiDeploymentDashboards"
                }
              },
            "ApiDeploymentDashboards": {
                "type": "object",
                "properties": {
                    "ItemId": {
                        "type": "string",
                        "description": "ID of the dashboard.",
                        "format": "guid"
                    },
                    "ItemName": {
                        "type": "string",
                        "description": "Name of the deployment dashboard."
                    },
                    "CategoryName": {
                        "type": "string",
                        "description": "Category name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Description of the deployment dashboard."
                    },
                    "IsDatasourceLocked": {
                        "type": "boolean",
                        "description": "Returns true if the datasource is locked."
                    },
                    "IsDashboardLocked": {
                        "type": "boolean",
                        "description": "Returns true if the dashboard is locked."
                    },
                    "MakeDashboardPublic": {
                        "type": "boolean",
                        "description": "Returns true if the dashboard is public."
                    }
                }
            },
            "ApiAddDeploymentDashboards": {
                "type": "array",
                "description": "Deployment dashboards details.",
                "items": {
                    "$ref": "#/components/schemas/DeploymentDashboards"
                }
            },
            "DeploymentDashboards": {
                "required": [
                    "ItemId",
                    "ItemName",
                    "CategoryName",
                    "CategoryId"
                ],
                "type": "object",
                "properties": {
                    "ItemId": {
                        "type": "string",
                        "description": "ID of the dashboard.",
                        "format": "guid"
                    },
                    "ItemName": {
                        "type": "string",
                        "description": "Name of the deployment dashboard."
                    },
                    "CategoryName": {
                        "type": "string",
                        "description": "Category name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Description of the deployment dashboard."
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "IsDatasourceLocked": {
                        "type": "boolean",
                        "description": "Specify <i>true</i> to set the datasource is locked."
                    },
                    "IsDashboardLocked": {
                        "type": "boolean",
                        "description": "Specify <i>true</i> to set the dashboard is locked."
                    },
                    "MakeDashboardPublic": {
                        "type": "boolean",
                        "description": "Specify <i>true</i> to set the dashboard is public."
                    }
                },
                "description": "Deployment dashboards details."
            },
            "ApiXFrameOptionsSettings ": {
                "required":[
                    "IsXFrameOptionsEnabled"
                ],
                "type": "object",
                "properties": {
                    "IsXFrameOptionsEnabled": {
                        "type": "boolean",
                        "description": "Specify true to enable X-Frame-Options settings."
                    }
                }
            },
            "ApiCSPSecuritySettings": {
                "type": "object",
                "properties": {
                    "EnableCSP": {
                        "type": "boolean",
                        "description": "Specify true to enable Content Security Policy settings."
                    },
                    "StyleSource": {
                        "type": "string",
                        "description": "Specified Style-Source directive allows access to the style resource only from URLs.\n\n**Note:** Multiple Style-source are allowed using a comma separator.",
                        "example": "https://test1.boldbi.com,https://test2.boldbi.com "
                    },
                    "ScriptSource": {
                        "type": "string",
                        "description": "Specified Script-Source directive allows access to the script resource only from URLs.\n\n**Note:** Multiple Script-source are allowed using a comma separator.",
                        "example": "https://test1.boldbi.com,https://test2.boldbi.com "
                    },
                    "FontSource": {
                        "type": "string",
                        "description": "Specified Font-Source directive allows access to the font resource only from URLs.\n\n**Note:** Multiple Font-source are allowed using a comma separator.",
                        "example": "https://test1.boldbi.com,https://test2.boldbi.com "
                    },
                    "ImageSource": {
                        "type": "string",
                        "description": "Specified Image-Source directive allows access to the image resource only from URLs.\n\n**Note:** Multiple Image-source are allowed using a comma separator.",
                        "example": "https://test1.boldbi.com,https://test2.boldbi.com "
                    },
                    "ConnectSource": {
                        "type": "string",
                        "description": "Specified Connect-Source directive allows the source to make Fetch/XHR requests only from URLs.\n\n**Note:** Multiple connect-source are allowed using a comma separator.",
                        "example": "https://test1.boldbi.com,https://test2.boldbi.com "
                    },
                    "FrameSource": {
                        "type": "string",
                        "description": "Specified Frame-Source directive allows access to the frame resource only from URLs.\n\n**Note:** Multiple Frame-source are allowed using a comma separator.",
                        "example": "https://test1.boldbi.com,https://test2.boldbi.com "
                    },
                    "FrameAncestors":{
                        "type": "string",
                        "description": "Specified Frame-Ancestors directive allows access to valid parent domains that may embed a dashboard or complete application from URLs.\n\n**Note:** Multiple Frame-Ancestors are allowed using a comma separator.",
                        "example": "https://test1.boldbi.com,https://test2.boldbi.com"
                    }
                }
            },
            "Notification": {
                "required":[
                    "MailNotificationSettings",
                    "SystemNotificationSettings"
                ],
                "type": "object",
                "properties": {
                    "MailNotificationSettings": {
                        "type": "object",
                        "description": "Mail notification details.",
                        "allOf":[
                            {
                                "$ref": "#/components/schemas/MailnotificationSettings"
                            }
                        ]
                    },
                    "SystemNotificationSettings": {
                        "type":"object",
                        "description": "System notification details.",
                        "allOf":[
                            {
                                "$ref": "#/components/schemas/SystemNotificationSettings"
                            }
                        ]
                    },
                    "DisableUserPreference": {
                        "type": "boolean",
                        "description": "Specify true to disable the user's preference of not being able to change the settings on the user profile page."
                    }
                }
            },
            "MailnotificationSettings": {
                "type": "object",
                "properties": {
                    "EnableNotificationForDashboardOwner": {
                        "type": "boolean",
                        "description": "Specify true to send an email notification to the dashboard owner when someone comments on the dashboard."
                    },
                    "EnableNotificationForAccessibleUser": {
                        "type": "boolean",
                        "description": "Specify true to send an email notification to all the users who have access to the dashboard when someone comments on the dashboard."
                    },
                    "EnableNotificationOnUserMention": {
                        "type": "boolean",
                        "description": "Specify true to send an email notification to the user whenever someone mentions their name while commenting on the dashboard."
                    },
                    "EnableNotificationWhenWatchEnabled": {
                        "type": "boolean",
                        "description": "Autowatch will be enabled for comments on dashboards whenever you add comments to a dashboard you created or have access to. Specify true to receive notifications for specific dashboards rather than all ones you have created or have access to.."
                    },
                    "EnableUserScheduleNotification": {
                        "type": "boolean",
                        "description": "Specify true to send an email notification to the users for data alert and schedule export."
                    },
                    "EnableUserProfileNotification": {
                        "type": "boolean",
                        "description": "Specify true to send an email notification to the user if their profiles are edited."
                    },
                    "EnableResourceShareNotification": {
                        "type": "boolean",
                        "description": "Specify true to send an email notification to the user whenever they are granted permissions for resources, users, groups, or settings."
                    },
                    "EnableUserSynchronizationNotification": {
                        "type": "boolean",
                        "description": "Specify true to send an email notification to the user about user synchronization schedule."
                    }
                }
            },
            "SystemNotificationSettings": {
                "type": "object",
                "properties": {
                    "EnableNotificationForDashboardOwner": {
                        "type": "boolean",
                        "description": "Specify true to send a system notification to the dashboard owner when someone comments on the dashboard."
                    },
                    "EnableNotificationForAccessibleUser": {
                        "type": "boolean",
                        "description": "Specify true to send a system notification to all the users who have access to the dashboard when someone comments on the dashboard."
                    },
                    "EnableNotificationOnUserMention": {
                        "type": "boolean",
                        "description": "Specify true to send a system notification to the user whenever someone mentions their name while commenting on the dashboard."
                    },
                    "EnableNotificationWhenWatchEnabled": {
                        "type": "boolean",
                        "description": "Autowatch will be enabled for comments on dashboards whenever you add comments to a dashboard you created or have access to. Specify true to receive notifications for specific dashboards rather than all dashboards you have created or have access to."
                    }
                }
            },
            "ApiAddmultitabDashboardRequest": {
                "required": [
                    "Name",
                    "CategoryId",
                    "TabList"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "multi-tab Dashboard name."
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "TabList": {
                        "type": "array",
                        "description": "Tab's list.",
                        "items": {
                            "$ref": "#/components/schemas/TabsList"
                        }
                    }
                },
                "description": "Dashboard details."
            },
            "ApiUpdateDashboardUnlist": {
                "required":[
                    "Unlisted"
                ],
                "type" : "object",
                "properties": {
                    "Unlisted": {
                        "type": "boolean",
                        "description" : "Specify true to update the dashboard as unlisted."  
                    }
                },
                "description" : "Details of the unlist dashboards item."
            },
            "TabsList": {
                "type": "object",
                "properties": {
                    "OrderNumber": {
                        "type": "integer",
                        "description": "Dashboard order.",
                        "format": "int32"
                    },
                    "ItemInfo": {
                        "type": "object",
                        "description": "Dashboard item details.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/TabInfo"
                            }
                        ]
                    }
                },
                "description": "TabsList details."
            },
            "TabInfo": {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "string",
                        "description": "Item ID.",
                        "format": "guid"
                    },
                    "TabName": {
                        "type": "string",
                        "description": "Tab Name."
                    }
                },
                "description": "Tab details."
            },
            "ApiEmailSettings": {
              "type": "object",
              "properties": {
                "EmailAccount":{
                    "type": "string",
                    "description": "Email account.<br />Values allowed are <code>SMTP, Microsoft365</code>"
                },
                "SMTPServer": {
                  "type": "string",
                  "description": "SMTP server name."
                },
                "SMTPPort": {
                    "type": "string",
                    "description": "SMTP port number."
                  },
                  "SenderName": {
                    "type": "string",
                    "description": "Sender name for the email."
                  },
                  "SenderEmailAddress": {
                    "type": "string",
                    "description": "Sender email address."
                  },
                  "AuthenticationType": {
                    "type": "string",
                    "description": "The authentication type of the email.<br /> Values allowed are <code>Basic, Anonymous, OAuth</code> "
                  },
                  "Username": {
                      "type": "string",
                      "description": "Username of the user."
                  },
                  "EnableSSL": {
                    "type": "boolean",
                    "description": "Returns true to enable SSL to connect with SMTP server.",
                    "nullable": true
                  },
                  "TenantId": {
                    "type": "string",
                    "description": "Tenant id."
                  },
                  "ClientId": {
                    "type": "string",
                    "description": "Client id."
                 }
              }
            },
            "ApiCorsSettings": {
                "type": "object",
                "properties": {
                    "EnableCors": {
                        "type": "boolean",
                        "description": "Returns true if Cors setting is enable."
                      },
                      "AllowAnyOrigin": {
                        "type": "boolean",
                        "description": "Returns true if allow all origins in Cors setting."
                      },
                      "AllowCredentials": {
                        "type": "boolean",
                        "description": "Returns true if allow credentials in Cors setting."
                      },
                      "AllowedHeaders": {
                        "type": "string",
                        "description": "Specified HTTP header values will be used when making an actual request.\n\n**Note:** Multiple headers are allowed using comma separator."
                      },
                      "AllowedOrigins": {
                        "type": "string",
                        "description": "Specified origins will be able to access the resource.\n\n**Note:** Multiple origins are allowed using a comma separator."
                      },
                      "AllowedMethods": {
                        "type": "string",
                        "description": "Specified methods will be able to access the resource.<br />Values allowed are <code>GET, HEAD, POST, PUT, DELETE.</code>\n\n**Note:** Multiple headers are allowed using comma separator."
                      },
                      "ExposeHeaders": {
                        "type": "string",
                        "description": "Specify header values are exposed to browser based scripts.\n\n**Note:** Multiple headers are allowed using comma separator ."
                      },
                      "PreflightMaxAge": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Specifies the maximum time a preflight request's results can be cached."
                    }
                }
            },
            "ApiAzureADSettings": {
              "type": "object",
              "properties": {
                "TenantId": {
                    "type": "string",
                    "description": "Tenant id."
                  },
                  "ClientId": {
                    "type": "string",
                    "description": "Client id."
                  },
                  "EnableGroupUserImport": {
                    "type": "boolean",
                    "description": "Returns true if enable import users from the group.\n\n**Note:** By default, the value is true."
                  }
              }
            },
            "ApiAzureAdScheduleSynchronizationSettings": {
              "type": "object",
              "properties": {
                "EnableSchedule": {
                  "type": "boolean",
                  "description": "Returns true if enable Azure AD schedule."
                },
                "StartDate": {
                  "type": "string",
                  "description": "UTC start date-time of schedule."
                },
                "ScheduleType": {
                  "type": "string",
                  "description": "Specifies the schedule type.<br />Values allowed are <code>Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
                }, 
                "RecurrenceTypeId": {
                    "type": "string",
                    "description": "Specifies the schedule type to schedule the dashboard.<br />Values allowed are <code>Daily, Weekly, Monthly, Yearly</code>\n\n**Note:** If you choose the schedule type as `Monthly`, provide a value to the `MonthlySchedule` property, and leave the (DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
                },
                "RecurrenceType": {
                    "type": "string",
                    "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.<br />Values allowed are <code>EveryNdays, EveryWeekday</code>\n\n**Note:** If you choose the recurrence type as EveryNdays, provide a value to the `EveryNdays` property, and leave the (EveryWeekday) property empty."
                },
                "DailySchedule": {
                  "type": "object",
                  "description": "Runs the schedules on a daily basis.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiDailySchedule"
                    }
                  ]
                },
                "WeeklySchedule": {
                  "type": "object",
                  "description": "Runs the schedule on a weekly basis.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiWeeklySchedule"
                    }
                  ]
                },
                "MonthlySchedule": {
                  "type": "object",
                  "description": "Runs the schedule on a monthly basis.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiMonthlySchedule"
                    }
                  ]
                },
                "YearlySchedule": {
                  "type": "object",
                  "description": "Runs the schedules on a yearly basis.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiYearlySchedule"
                    }
                  ]
                }
              }
            },
            "ApiGetDatastoreSettings": {
                "type": "object",
                "properties": {
                    "ServerType": {
                        "type": "string",
                        "description": "The type of the database server."
                    },
                    "ServerName": {
                        "type": "string",
                        "description": "The name of the database server."
                    },
                    "Port": {
                        "type": "integer",
                        "description": "The port number used to connect to the database server."
                    },
                    "MaintenanceDatabase": {
                        "type": "string",
                        "description": "The name of the maintenance database."
                    },
                    "UserName": {
                        "type": "string",
                        "description": "The username used to authenticate with the database."
                    },
                    "IsWindowsAuthentication": {
                        "type": "boolean",
                        "description": "Indicates whether Windows authentication is used to connect to the database."
                    },
                    "DatabaseName": {
                        "type": "string",
                        "description": "The name of the database."
                    },
                    "AdditionalParameters": {
                        "type": "string",
                        "description": "Additional parameters of the database."
                    },
                    "SslEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether SSL is enabled for database connection."
                    }
                }
            },
            "ApiUpdateDatastoreSettings": {
                "type": "object",
                "required": [
                    "ServerType",
                    "ServerName",
                    "Port",
                    "UserName",
                    "Password",
                    "IsNewDatabase",
                    "DatabaseName"                
                ],
                "properties": {
                    "ServerType": {
                        "type": "string",
                        "description": "Specifies the type of the database server.<br />Allowed values: <code>MSSQL, PostgreSQL,MySQL</code>"
                    },
                    "ServerName": {
                        "type": "string",
                        "description": "Specifies the name of the database."
                    },
                    "Port": {
                        "type": "integer",
                        "description": "Specifies the port number for the database server.<br />Applicable only for<code>PostgreSQL</code> and <code>MySQL</code>."
                    },
                    "MaintenanceDatabase": {
                        "type": "string",
                        "description": "Specifies the maintenance database name .<br />Applicable only for <code>PostgreSQL</code>."
                    },
                    "UserName": {
                        "type": "string",
                        "description": "Specifies the database username. If the 'isWindowsAuthentication' is set to 'true,' this field is optional."
                    },
                    "Password": {
                        "type": "string",
                        "description": "Specifies the database password. If the 'isWindowsAuthentication' is set to 'true,' the field is optional."
                    },
                    "IsWindowsAuthentication": {
                        "type": "boolean",
                        "description": "Specifies whether Windows authentication is used for connecting to the database.<br />Applicable only for <code>MSSQL</code>."
                    },
                    "IsNewDatabase": {
                        "type" : "boolean",
                        "description" : "Specify true to create a new database"
                    },
                    "DatabaseName": {
                        "type": "string",
                        "description": "Specifies the name of the database."
                    },
                    "AdditionalParameters": {
                        "type": "string",
                        "description": "Specifies the Additional connection parameters for the database."
                    },
                    "SslEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether SSL is enabled for database connection."
                    }
                }
            },
            "ApiDashboardSpecifiedItemDetail": {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "string",
                        "description": "Item ID.",
                        "format": "guid"
                    },
                    "ItemType": {
                        "type": "string",
                        "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Datasource, Schedule</code>"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Item name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Item description."
                    },
                    "CreatedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item creator.",
                        "format": "int32"
                    },
                    "CloneOf": {
                        "type": "string",
                        "description": "Item ID from where the item is cloned.",
                        "format": "guid"
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "CategoryName": {
                        "type": "string",
                        "description": "Category name."
                    },
                    "ItemCreatedDate": {
                        "type": "string",
                        "description": "Date created of the item in date format.",
                        "format": "date-time"
                    },
                    "ItemModifiedDate": {
                        "type": "string",
                        "description": "Date modified of the item in date format.",
                        "format": "date-time"
                    },
                    "CreatedDate": {
                        "type": "string",
                        "description": "Date created of the item in string format."
                    },
                    "ModifiedDate": {
                        "type": "string",
                        "description": "Date modified of the item in string format."
                    },
                    "ModifiedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item modifier.",
                        "format": "int32"
                    },
                    "Extension": {
                        "type": "string",
                        "description": "Item extension."
                    },
                    "IsPublic": {
                        "type": "boolean",
                        "description": "Returns true if the item is public."
                    },
                    "IsActive": {
                        "type": "boolean",
                        "description": "Returns true if the item is active."
                    },
                    "PublishedInfo": {
                        "type": "array",
                        "description": "Specifies published information of the item.",
                        "items": {
                            "$ref": "#/components/schemas/PublishedInfo"
                        }
                    },
                    "IsMultiDashboard": {
                        "type": "boolean",
                        "description": "Returns true if the dashboard is multi-dashboard."
                    },
                    "TabDetail": {
                        "type": "array",
                        "description": "Specifies the details of the tab in a multi-tabbed dashboard.",
                        "items": {
                            "$ref": "#/components/schemas/ApiTabDetail"
                        }
                    }
                },
                "description": "Item Details."
            },
            "ApiDataSourceSpecifiedItemDetail": {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "string",
                        "description": "Item ID.",
                        "format": "guid"
                    },
                    "ItemType": {
                        "type": "string",
                        "description": "Item type.<br />Values allowed are <code>Category, Dashboard, Datasource, Schedule</code>"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Item name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Item description."
                    },
                    "CreatedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item creator.",
                        "format": "int32"
                    },
                    "CloneOf": {
                        "type": "string",
                        "description": "Item ID from where the item is cloned.",
                        "format": "guid"
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "CategoryName": {
                        "type": "string",
                        "description": "Category name."
                    },
                    "ItemCreatedDate": {
                        "type": "string",
                        "description": "Date created of the item in date format.",
                        "format": "date-time"
                    },
                    "ItemModifiedDate": {
                        "type": "string",
                        "description": "Date modified of the item in date format.",
                        "format": "date-time"
                    },
                    "CreatedDate": {
                        "type": "string",
                        "description": "Date created of the item in string format.  "
                    },
                    "ModifiedDate": {
                        "type": "string",
                        "description": "Date modified of the item in string format."
                    },
                    "ModifiedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the item modifier.",
                        "format": "int32"
                    },
                    "Extension": {
                        "type": "string",
                        "description": "Item extension."
                    },
                    "IsPublic": {
                        "type": "boolean",
                        "description": "Returns true if the item is public."
                    },
                    "IsActive": {
                        "type": "boolean",
                        "description": "Returns true if the item is active."
                    },
                    "PublishedInfo": {
                        "type": "array",
                        "description": "Specifies published information of the item.",
                        "items": {
                            "$ref": "#/components/schemas/PublishedInfo"
                        }
                    }
                },
                "description": "Item Details."
            },
            "PublishedInfo": {
                "type": "object",
                "properties": {
                    "CategoryName": {
                        "type": "string",
                        "description": "Returns target site category name."
                    },
                    "DestinationItemId": {
                        "type": "string",
                        "description": "Returns item Id in target site.",
                        "format": "guid"
                    },
                    "DestinationItemName": {
                        "type": "string",
                        "description": "Returns item name in target site."
                    },
                    "DestinationSiteUrl": {
                        "type": "string",
                        "description": "Returns target site Url."
                    },
                    "IsLocked": {
                        "type": "boolean",
                        "description": "Date modified of the item in string format."
                    },
                    "PublishType": {
                        "type": "string",
                        "description": "Returns publish type."
                    }
                },
                "description": "Published info of item."
            },
            "GetItemsPaginatedApiResponse": {
                "type": "object",
                "properties": {
                    "Data": {
                        "type": "array",
                        "description": "Returns data from the API.",
                        "items": {
                            "$ref": "#/components/schemas/PublishedItemsResponse"
                        }
                    },
                    "TotalResults": {
                        "type": "integer",
                        "description": "Returns items count of the API request.",
                        "format": "int32"
                    },
                    "Links": {
                        "type": "array",
                        "description": "Returns pagination links.",
                        "items": {
                            "$ref": "#/components/schemas/Links"
                        }
                    }
                }
            },
            "PublishedItemsResponse": {
                "type": "object",
                "properties": {
                    "PublishId": {
                        "type": "string",
                        "description": "Return publish Id.",
                        "format": "guid"
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category Id.",
                        "format": "guid"
                    },
                    "ItemId": {
                        "type": "string",
                        "description": "Returns Id of the dashboard.",
                        "format": "guid"
                    },
                    "ItemName": {
                      "type": "string",
                      "description": "Returns name of the dashboard."
                    },
                    "CategoryName": {
                        "type": "string",
                        "description": "Returns category name."
                    },
                    "ItemType": {
                        "type": "string",
                        "description": "Returns item type."
                    },
                    "IsSiteExist": {
                        "type": "boolean",
                        "description": "Returns if site already exists."
                    },
                    "ExternalSiteId": {
                        "type": "integer",
                        "description": "Returns external site Id.",
                        "format": "int32"
                    },
                    "PublishedItemName": {
                        "type": "string",
                        "description": "Returns destination site item name."
                    },
                    "PublishedItemDescription": {
                        "type": "string",
                        "description": "Returns destination site item description."
                    },
                    "PublishedItemCategoryName": {
                        "type": "string",
                        "description": "Returns destination site item category name."
                    },
                    "PublishedItemId": {
                        "type": "string",
                        "description": "Returns destination site item Id.",
                        "format": "guid"
                    },
                    "TenantId": {
                        "type": "string",
                        "description": "Returns tenant Id.",
                        "format": "guid"
                    },
                    "TenantName": {
                        "type": "string",
                        "description": "Returns tenant name."
                    },
                    "TenantURL": {
                        "type": "string",
                        "description": "Returns tenant URL."
                    },
                    "PublishType": {
                        "type": "string",
                        "description": "Returns publish type.<br />Values allowed are <code>Internal, External.</code>."
                    },
                    "IsLocked": {
                        "type": "boolean",
                        "description": "Returns true if the item is locked."
                    },
                    "PublishedById": {
                        "type": "string",
                        "description": "Returns Id of the publisher."
                    },
                    "PublishedOn": {
                        "type": "string",
                        "description": "Date published of the item in date format.",
                        "format": "date-time"
                    },
                    "LastSynchronizedOn": {
                        "type": "string",
                        "description": "Date of the last synchronization in date format.",
                        "format": "date-time"
                    },
                    "LastSynchronizedById": {
                        "type": "string",
                        "description": "Returns last synchronized user Id.",
                        "format": "date-time"
                    },
                    "LastSynchronizedStatus": {
                        "type": "Success",
                        "description": "Returns success if the last synchronization is successful."
                    }
                },
                "description": "Details of the published item."
            },
            "ApiItemSynchronize": {
                "required": [
                    "PublishId"
                ],
                "type": "object",
                "properties": {
                    "IsBulkSynchronize": {
                        "type": "boolean",
                        "description": "To set the bulk synchronize."
                    },
                    "PublishId": {
                        "type": "array",
                        "description": "List of publish Id's.",
                        "items": {
                            "type": "string",
                            "format": "guid"
                        }
                    }
                },
                "description": "Item synchronization details."
            },
            "UserNotificationSettings": {
                "required":[
                    "UserMailNotificationSettings",
                    "UserSystemNotificationSettings"
                ],
                "type": "object",
                "properties": {
                    "InheritMailNotificationSettingsFromGlobalSettings": {
                        "type": "boolean",
                        "description": "Specify true to inherit the global email settings from the system administrator."
                    },
                    "InheritSystemNotificationSettingsFromGlobalSettings": {
                        "type": "boolean",
                        "description": "Specify true to inherit the global system settings from the system administrator."
                    },
                    "UserMailNotificationSettings": {
                        "type": "object",
                        "description": "User mail notification details",
                        "allOf":[
                            {
                                "$ref": "#/components/schemas/UserMailnotificationsettings"
                            }
                        ]
                    },
                    "UserSystemNotificationSettings": {
                        "type": "object",
                        "description": "User system notification details",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UserSystemnotificationsettings"
                            }
                        ]
                    }
                }
            },
            "UserMailnotificationsettings": {
                "type": "object",
                "properties": {
                    "EnableNotificationForDashboardOwner": {
                        "type": "boolean",
                        "description": "Specify true to send a system notification to you when someone comments on the dashboard you created."
                    },
                    "EnableNotificationForAccessibleUser": {
                        "type": "boolean",
                        "description": "Specify true to send an email notification when someone comments on the dashboard you can access."
                    },
                    "EnableNotificationOnUserMention": {
                        "type": "boolean",
                        "description": "Specify true to send an email notification whenever someone mentions your name while commenting on a dashboard."
                    },
                    "EnableNotificationWhenWatchEnabled": {
                        "type": "boolean",
                        "description": "Autowatch will be enabled for comments on dashboards whenever you add comments to a dashboard you created or accessed. Specify true to receive system notifications for specific dashboards rather than all ones you have created or accessed."
                    },
                    "EnableUserScheduleNotification": {
                        "type": "boolean",
                        "description": "Specify true to send an email notification to you for data alert and schedule export."
                    },
                    "EnableUserProfileNotification": {
                        "type": "boolean",
                        "description": "Specify true to send an email notification to you if your profile is edited."
                    },
                    "EnableResourceShareNotification": {
                        "type": "boolean",
                        "description": "Specify true to send an email notification to you whenever you are granted permissions for resources, users, groups, or settings."
                    },
                    "EnableUserSynchronizationNotification": {
                        "type": "boolean",
                        "description": "Specify true to send an email notification to you about user synchronization schedule."
                    }
                }
            },
            "UserSystemnotificationsettings": {
                "type": "object",
                "properties": {
                    "EnableNotificationForDashboardOwner": {
                        "type": "boolean",
                        "description": "Specify true to send a system notification to you when someone comments on the dashboard you created."
                    },
                    "EnableNotificationForAccessibleUser": {
                        "type": "boolean",
                        "description": "Specify true to send a system notification to you when someone comments on the dashboard if you accessed."
                    },
                    "EnableNotificationOnUserMention": {
                        "type": "boolean",
                        "description": "Specify true to send a system notification to you whenever someone mentions your name while commenting on a dashboard."
                    },
                    "EnableNotificationWhenWatchEnabled": {
                        "type": "boolean",
                        "description": "Autowatch will be enabled for comments on dashboards whenever you add comments to a dashboard you created or accessed. Specify true to receive system notifications for specific dashboards rather than all ones you have created or accessed."
                    }
                }
            },
            "ApiGetOAuthSettings": {
                "type": "object",
                "properties": {
                    "IsEnabled": {
                        "type": "boolean",
                        "description": "Returns true if the OAuth settings are enabled."
                    },
                    "ProviderLogo": {
                        "type": "string",
                        "description": "Content of the provider logo."
                    },
                    "LogoType": {
                        "type": "string",
                        "description": "Type of the logo."
                    },
                    "ProviderName": {
                        "type": "string",
                        "description": "Name of the provider."
                    },
                    "ClientId": {
                        "type": "string",
                        "description": "Client ID for the OAuth provider."
                    },
                    "AuthorizationEndPoint": {
                        "type": "string",
                        "description": "URL for the authorization endpoint."
                    },
                    "TokenEndPoint": {
                        "type": "string",
                        "description": "URL of the token endpoint."
                    },
                    "TokenEndPointMethod": {
                        "type": "string",
                        "description": "HTTP methods are used for the token endpoint. </br>The possible values are<code>GET, POST</code>"
                    },
                    "UserInfoEndPoint": {
                        "type": "string",
                        "description": "URL for the user information endpoint."
                    },
                    "UserInfoEndPointMethod": {
                        "type": "string",
                        "description": "HTTP methods are used for the user information endpoint. </br>The possible values are<code>GET, POST</code>"
                    },
                    "Scopes": {
                        "type": "string",
                        "description": "Scopes required for OAuth authorization."
                    },
                    "UserInfoEmail": {
                        "type": "string",
                        "description": "The JSON key in claims mapped with the user's email."
                    },
                    "UserInfoFirstname": {
                        "type": "string",
                        "description": "The JSON key in claims mapped with the user's first name."
                    },
                    "UserInfoLastname": {
                        "type": "string",
                        "description": "The JSON key in claims mapped with the user's last name."
                    },
                    "LogoutEndPoint": {
                        "type": "string",
                        "description": "URL of the logout endpoint."
                    },
                    "RedirectURI": {
                        "type": "string",
                        "description": "Redirect URI for OAuth authentication."
                    },
                    "MobileAppRedirectURI": {
                        "type": "string",
                        "description": "Redirect URI for mobile app authentication."
                    },
                    "CanCreateAccount": {
                        "type": "boolean",
                        "description": "Returns true if the CanCreateAccount is enabled to create a new account."
                    },
                    "GroupImportSettings": {
                        "type": "object",
                        "description": "Details for group import settings.",
                        "allOf": [
                            {
                               "$ref": "#/components/schemas/OAuthGroupImportSettings"
                            }
                        ]
                    }
                }
            },
            "ApiUpdateOAuthSettings": {
                "required": [
                    "IsEnabled",
                    "ProviderLogo",
                    "LogoType",
                    "ProviderName",
                    "ClientId",
                    "ClientSecret",
                    "AuthorizationEndPoint",
                    "TokenEndPoint",
                    "TokenEndPointMethod",
                    "UserInfoEndPoint",
                    "UserInfoEndPointMethod",
                    "Scopes",
                    "UserInfoEmail"
                ],
                "type": "object",
                "properties": {
                    "IsEnabled": {
                        "type": "boolean",
                        "description": "Specify true value to enable the OAuth settings."
                    },
                    "ProviderLogo": {
                        "type": "string",
                        "description": "Specify the provider logo. It should be `Base64EncodedString`"
                    },
                    "LogoType": {
                        "type": "string",
                        "description": "Specify the logo type. </br>Values allowed are <code>image/png, image/jpeg, image/svg+xml</code>"
                    },
                    "ProviderName": {
                        "type": "string",
                        "description": "Specify the name of the provider that you configure."
                    },
                    "ClientId": {
                        "type": "string",
                        "description": "Specify the Client ID of the provider."
                    },
                    "ClientSecret": {
                        "type": "string",
                        "description": "Specify the Client Secret of the provider."
                    },
                    "AuthorizationEndPoint": {
                        "type": "string",
                        "description": "Specify the authorization endpoint URL."
                    },
                    "TokenEndPoint": {
                        "type": "string",
                        "description": "Specify the token endpoint URL."
                    },
                    "TokenEndPointMethod": {
                        "type": "string",
                        "description": "Specify the token endpoint method. </br>Values allowed are <code>GET, POST</code>"
                    },
                    "UserInfoEndPoint": {
                        "type": "string",
                        "description": "Specify the user information endpoint."
                    },
                    "UserInfoEndPointMethod": {
                        "type": "string",
                        "description": "Specify the user information endpoint method. </br>Values allowed are <code>GET, POST</code>"
                    },
                    "Scopes": {
                        "type": "string",
                        "description": "Specify the scopes with comma separator for authorization. <br> For Example: 'openid', 'profile', 'email' "
                    },
                    "UserInfoEmail": {
                        "type": "string",
                        "description": "Specify the JSON key that should be mapped with the user's email."
                    },
                    "UserInfoFirstname": {
                        "type": "string",
                        "description": "Specify the JSON key that should be mapped with the user's first name."
                    },
                    "UserInfoLastname": {
                        "type": "string",
                        "description": "Specify the JSON key that should be mapped with the user's last name."
                    },
                    "LogoutEndPoint": {
                        "type": "string",
                        "description": "Specify the logout endpoint URL."
                    },
                    "CanCreateAccount": {
                        "type": "boolean",
                        "description": "Specify true if you want to create an account."
                    },
                    "GroupImportSettings": {
                        "type": "object",
                        "description": "Specify the group import settings details.",
                        "allOf": [
                            {
                              "$ref": "#/components/schemas/OAuthGroupImportSettings"
                            }
                        ]
                    }
                }
            },
            "OAuthGroupImportSettings":{
                "type": "object",
                "properties": {
                    "ProviderType": {
                        "type": "string",
                        "description": "Provider type to import groups settings. </br>Values allowed are <code>Cognito AWS, Auth0, Okta, OneLogin</code>"
                    },
                    "Setting": {
                        "type": "object",
                        "description": "Group import settings details. Please refer to the link [here](/faq/what-are-the-different-request-object-properties-of-group-imports-setting-for-each-oauth-and-openid-provider-type/) to learn about the details of each provider type's group import settings."
                    }
                }
            },
            "ApiGetOpenIDSettings": {
                "type": "object",
                "properties": {
                    "IsEnabled": {
                        "type": "boolean",
                        "description": "Returns true if the OpenID settings are enabled."
                    },
                    "LogoType": {
                        "type": "string",
                        "description": "Type of the logo."
                    },
                    "ProviderLogo": {
                        "type": "string",
                        "description": "Content for the provider logo."
                    },
                    "ProviderName": {
                        "type": "string",
                        "description": "Name of the provider"
                    },
                    "ClientId": {
                        "type": "string",
                        "description": "Client ID of the OpenID provider."
                    },
                    "Identifier": {
                        "type": "string",
                        "description": "Identifier of the OpenID provider."
                    },
                    "Authority": {
                        "type": "string",
                        "description": "URL of the authority"
                    },
                    "LogoutUrl": {
                        "type": "string",
                        "description": "URL of the logout"
                    },
                    "RedirectURI": {
                        "type": "string",
                        "description": "Redirect URI for OpenID authentication."
                    },
                    "MobileAppRedirectURI": {
                        "type": "string",
                        "description": "Redirect URI for mobile app authentication."
                    },
                    "CanCreateAccount": {
                        "type": "boolean",
                        "description": "Returns true if the CanCreateAccount is enabled to create a new account."
                    },
                    "GroupImportSettings": {
                        "type": "object",
                        "description": "Details for group import settings.",
                        "allOf": [
                            {
                              "$ref": "#/components/schemas/OpenIDGroupImportSettings"
                            }
                        ]
                    }
                }
            },
            "ApiUpdateOpenIDSettings": {
                "required": [
                    "IsEnabled",
                    "ProviderLogo",
                    "LogoType",
                    "ProviderName",
                    "ClientId",
                    "ClientSecret",
                    "Identifier",
                    "Authority"
                ],
                "type": "object",
                "properties": {
                    "IsEnabled": {
                        "type": "boolean",
                        "description": "Specify true value to enable the OpenID settings."
                    },
                    "ProviderLogo": {
                        "type": "string",
                        "description": "Specify the provider logo. It should be `Base64EncodedString`"
                    },
                    "LogoType": {
                        "type": "string",
                        "description": "Specify the logo type. </br>Values allowed are <code>image/png, image/jpeg, image/svg+xml</code>"
                    },
                    "ProviderName": {
                        "type": "string",
                        "description": "Specify the name of the provider that you configure."
                    },
                    "ClientId": {
                        "type": "string",
                        "description": "Specify the Client ID of the provider."
                    },
                    "ClientSecret": {
                        "type": "string",
                        "description": "Specify the Client Secret of the provider."
                    },
                    "Identifier": {
                        "type": "string",
                        "description": "Specify the identifier."
                    },
                    "Authority": {
                        "type": "string",
                        "description": "Specify the authority URL."
                    },
                    "LogoutUrl": {
                        "type": "string",
                        "description": "Specify the logout URL."
                    },
                    "CanCreateAccount": {
                        "type": "boolean",
                        "description": "Specify true if you want to create an account."
                    },
                    "GroupImportSettings": {
                        "type": "object",
                        "description": "Specify the group import settings details.",
                        "allOf": [
                            {
                        "$ref": "#/components/schemas/OpenIDGroupImportSettings"
                            }
                        ]
                    }
                }
            },
            "OpenIDGroupImportSettings":{
                "type": "object",
                "properties": {
                    "ProviderType": {
                        "type": "string",
                        "description": "Provider type to import groups settings. </br>Values allowed are <code>Auth0, Okta, OneLogin</code>"
                    },
                    "Setting": {
                        "type": "object",
                        "description": "Group import settings details. Please refer to the link [here](/faq/what-are-the-different-request-object-properties-of-group-imports-setting-for-each-oauth-and-openid-provider-type/) to learn about the details of each provider type's group import settings."
                    }
                }
            },
            "ApiUpdateUploadDashboard": {
                "required": [
                    "ItemContent",
                    "ItemExtension"
                ],
                "type": "object",
                "properties": {
                    "ItemContent": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "description": "Dashboard files in an array of bytes.",
                        "format": "byte"
                    },
                    "ItemExtension": {
                        "type": "string",
                        "description": "Extension of the dashboard file.<br />Values allowed are <code>.zip, .bbix.</code>."
                    },
                    "ShouldReplaceDataSource": {
                        "type": "boolean",
                        "description": "Specify <i>false</i> if you do not want to replace the data sources. Default value is <i>true</i>"
                    },
                    "ItemMetaInfo": {
                        "type": "array",
                        "description": "Meta information of the item content.",
                        "items": {
                            "$ref": "#/components/schemas/ItemMetaInfoForUpdate"
                        }
                    }
                },
                "description": "Details about the dashboard for update."
            },
            "ItemMetaInfoForUpdate": {
                "required": [
                    "ReplaceDashboardId"
                ],
                "type": "object",
                "properties": {
                    "ReplaceDashboardId": {
                        "type": "string",
                        "description": "Dashboard ID.",
                        "format": "guid"
                    },
                    "Name": {
                        "type": "string",
                        "description": "Dashboard name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Dashboard description."
                    },
                    "Id": {
                        "type": "string",
                        "description": "Dashboard ID.",
                        "format": "guid"
                    },
                    "CategoryId": {
                        "type": "string",
                        "description": "Category ID.",
                        "format": "guid"
                    },
                    "ShouldValidateSchema": {
                        "type": "boolean",
                        "description": "Specify <i>false</i> to avoid the schema validation. Default value is <i>true</i>."
                    },
                    "Datasources": {
                        "type": "array",
                        "description": "Data sources",
                        "items": {
                          "$ref": "#/components/schemas/ApiDataSources"
                        }
                    }
                },
                "description": "Details about the item meta info."
            },
            "ApiDataSources": {
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "Data source name."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Data source description."
                    },
                    "Id": {
                        "type": "string",
                        "description": "Data source ID.",
                        "format": "guid"
                    },
                    "Type": {
                        "type": "string",
                        "description": "Data source type allowed values are <code>Web Live</code>, <code>MongoDB</code>, <code>amazonathena</code>, <code>amazonauroramysql</code>, <code>amazonaurorapostgresql</code>, <code>amazonrdsmysql</code>, <code>amazonrdsmariadb</code>, <code>amazonrdsamazonauroramysql</code>, <code>amazonrdsamazonaurorapostgresql</code>, <code>amazonrdspostgresql</code>, <code>amazonrdssqlserver</code>, <code>amazonrdsoracle</code>, <code>awsopensearch</code>, <code>redshift</code>, <code>azuresynapseanalytics</code>, <code>cdata</code>, <code>clickhouse</code>, <code>elasticsearch</code>, <code>googlecloudmysql</code>, <code>googlecloudpostgresql</code>, <code>influxdb</code>, <code>mariadb</code>, <code>ssas</code>, <code>mysql</code>, <code>oracle</code>, <code>postgresql</code>, <code>presto</code>, <code>singlestore</code>, <code>sqlserver</code>, <code>snowflake</code>, <code>sparksql</code>, <code>odbc</code>."
                    },
                    "Connector": {
                        "type": "string",
                        "description": "Connector information"
                    },
                    "Connection": {
                        "type": "object",
                        "description": "Connection object of the data source. Please refer its relative documentation for the connection details as follows [Web Live](/working-with-data-sources/data-connectors/live-web/#connecting-bold-bi-to-web-live-data-source-via-rest-api), [MongoDB](/working-with-data-sources/data-connectors/mongodb/#connecting-bold-bi-to-mongodb-data-source-via-rest-api), [amazonathena](/working-with-data-sources/data-connectors/amazon-athena/#connecting-bold-bi-to-amazon-athena-data-source-via-rest-api), [amazonauroramysql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsmariadb](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonauroramysql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsamazonaurorapostgresql](/working-with-data-sources/data-connectors/amazon-aurora/#connecting-bold-bi-to-amazon-aurora-data-source-via-rest-api), [amazonrdspostgresql](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdssqlserver](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [amazonrdsoracle](/working-with-data-sources/data-connectors/amazon-rds/#connecting-bold-bi-to-amazon-rds-data-source-via-rest-api), [awsopensearch](/working-with-data-sources/data-connectors/aws-opensearch/#connecting-bold-bi-to-aws-open-search-data-source-via-rest-api), [redshift](/working-with-data-sources/data-connectors/amazon-redshift/#connecting-bold-bi-to-amazon-redshift-data-source-via-rest-api), [azuresynapseanalytics](/working-with-data-sources/data-connectors/azure-synapse-analytics/#connecting-bold-bi-to-azure-synapse-analytics-data-source-via-rest-api), [cdata](/working-with-data-sources/data-connectors/cdata/#connecting-bold-bi-to-cdata-data-source-via-rest-api), [clickhouse](/working-with-data-sources/data-connectors/clickhouse/#connecting-bold-bi-to-clickhouse-data-source-via-rest-api), [elasticsearch](/working-with-data-sources/data-connectors/elastic-search/#connecting-bold-bi-to-elastic-search-data-source-via-rest-api), [googlecloudmysql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [googlecloudpostgresql](/working-with-data-sources/data-connectors/google-cloud-sql/#connecting-bold-bi-to-google-cloud-sql-data-source-via-rest-api), [influxdb](/working-with-data-sources/data-connectors/influxdb/#connecting-bold-bi-to-influxdb-data-source-via-rest-api), [mariadb](/working-with-data-sources/data-connectors/mariadb/#connecting-bold-bi-to-mariadb-data-source-via-rest-api), [ssas](/working-with-data-sources/data-connectors/ssas/#connecting-bold-bi-to-microsoft-sql-server-analysis-servicesssas-via-rest-api), [mysql](/working-with-data-sources/data-connectors/mysql/#connecting-bold-bi-to-mysql-data-source-via-rest-api), [oracle](/working-with-data-sources/data-connectors/oracle/#connecting-bold-bi-to-oracle-data-source-via-rest-api), [postgresql](/working-with-data-sources/data-connectors/postgresql/#connecting-bold-bi-to-postgresql-data-source-via-rest-api), [presto](/working-with-data-sources/data-connectors/presto/#connecting-bold-bi-to-presto-data-source-via-rest-api), [singlestore](/working-with-data-sources/data-connectors/single-store/#connecting-bold-bi-to-singlestore-data-source-via-rest-api), [sqlserver](/working-with-data-sources/data-connectors/sql-data-source/#connecting-bold-bi-to-microsoft-sql-server-data-source-via-rest-api), [snowflake](/working-with-data-sources/data-connectors/snowflake/#connecting-bold-bi-to-snowflake-data-source-via-rest-api), [sparksql](/working-with-data-sources/data-connectors/sparksql/#connecting-bold-bi-to-sparksql-data-source-via-rest-api), [odbc](/working-with-data-sources/data-connectors/odbc/#connecting-bold-bi-to-odbc-data-source-via-rest-api)."
                    },
                    "ReplaceDataSourceId": {
                        "type": "string",
                        "description": "Data source ID.",
                        "format": "guid"
                    }
                },
                "description": "Details about the data sources."
            },
            "ApiWindowsADSettings": {
                "type": "object",
                "properties": {
                    "Username": {
                        "type": "string",
                        "description": "Returns username of the Windows Active Directory."
                    },
                    "LdapURL": {
                      "type": "string",
                      "description": "Returns Ldap URL"
                    },
                    "EnableSsl": {
                      "type": "boolean",
                      "description": "Returns true if SSL was enabled."
                    },
                    "DistinguishedName": {
                        "type": "string",
                        "description": "Returns Distinguished Name"
                    },
                    "PortNo": {
                        "type": "string",
                        "description": "Returns Port Number."
                    },
                    "EnableGroupUserImport": {
                        "type": "boolean",
                        "description": "Returns true if import users from the group was enabled."
                    }
                }
            },
            "ApiUpdateWindowsADSettings": {
                "required": [
                  "Username",
                  "Password",
                  "LdapURL",
                  "EnableSsl",
                  "DistinguishedName",
                  "PortNo"
                ],
                "type": "object",
                "properties": {
                  "Username": {
                    "type": "string",
                    "description": "Specify the user name."
                  },
                  "Password": {
                    "type": "string",
                    "description": "Specify the password"
                  },
                  "LdapURL": {
                    "type": "string",
                    "description": "Specify the Ldap url."
                  },
                  "EnableSsl": {
                    "type": "string",
                    "description": "Specify true to enable SSL."
                  },
                  "DistinguishedName": {
                    "type": "string",
                    "description": "Specify the distinguished name."
                  },
                  "PortNo": {
                    "type": "string",
                    "description": "Specify the port no."
                  },
                  "EnableGroupUserImport": {
                    "type": "boolean",
                    "description": "Specify true to enable import users from the group.\n\n**Note:** By default, the value is true."
                  }
                }
            },
            "ApiGetLinkedDatasourceDashboards": {
                "type": "array",
                "description": "Linked dashboard details list.",
                "items": {
                    "$ref": "#/components/schemas/GetLinkedDatasourceDashboards"
                }
            },
            "GetLinkedDatasourceDashboards": {
                "type": "object",
                "properties": {
                    "DashboardName": {
                      "type": "string",
                      "description": "Returns the linked dashboard name."
                    },
                    "CategoryName": {
                      "type": "string",
                      "description": "Returns the dashboard category name."
                    },
                    "CreatedByDisplayName": {
                        "type": "string",
                        "description": "Specifies the display name of the user who created the linked dashboard."
                    },
                    "CreatedById": {
                        "type": "integer",
                        "description": "Specifies the user ID of the linked dashboard creator.",
                        "format": "int32"
                    },
                    "ModifiedDate": {
                      "type": "string",
                      "description": "Date modified of dashboard in date format.",
                      "format": "datetime"
                    },
                    "CanAccess": {
                      "type": "string",
                      "description": "Returns true if the user has access to the dashboard."
                    }
                },
                "description": "Linked dashboards details."
            },
            "ApiGetActivityLogs":{
                "type": "object",
                "properties":{
                    "Id": {
                        "type": "string",
                        "description": "ID of the activity."
                    },
                    "ActivityModule": {
                        "type": "string",
                        "description": "Name of the module in which the activity was performed."
                    },
                    "Activity": {
                        "type": "string",
                        "description": "Type of activity which is performed."
                    },
                    "OldValue": {
                        "type": "string",
                        "description": "Specifies the value before update."
                    },
                    "NewValue":{
                        "type": "string",
                        "description": "Specifies the value after update."
                    },
                    "ModifiedById":{
                        "type": "integer",
                        "description": "Specifies the ID of the user who modified this item.",
                        "format":"int32"
                    },
                    "ModifiedBy":{
                        "type": "string",
                        "description": "Specifies the name of the user who modified this item."
                    },
                    "GroupId":{
                        "type": "integer",
                        "description": "ID of the group.",
                        "format":"int32"
                    },
                    "GroupName":{
                        "type": "string",
                        "description": "Name of the group."
                    },
                    "SourceTypeId":{
                        "type": "integer",
                        "description": "Specifies the enum value of the source type.</br>The possible values are <code>1, 2, 3</code> \n\n Note: </br> <code>1</code> - Specify the Web source type </br> <code>2</code> - Specify the API source type </br> <code>3</code> - Specify the Job source type"
                    },
                    "SourceType":{
                        "type": "string",
                        "description": "Specifies the source type.</br>The possible values are <code>Web, API, Job</code>"
                    },
                    "ActivityStatusId":{
                        "type": "integer",
                        "description": "Specifies the enum value of the activity status.</br>The possible values are <code>2, 3</code> \n\n Note: </br> <code>2</code> - Specify the Success status </br> <code>3</code> - Specify the Fail status"
                    },
                    "ActivityStatus":{
                        "type": "string",
                        "description": "Status of the activity.</br>The possible values are <code>Success, Fail</code>"
                    },
                    "CreatedDate":{
                        "type":"string",
                        "description": "Date created of item in date format.",
                        "format": "date-time"
                    },
                    "IsActive":{
                        "type": "boolean",
                        "description": "Returns true if the item is active."
                    },
                    "UserId":{
                        "type":"integer",
                        "description": "ID of the user.",
                        "format": "int32"
                    },
                    "UserName": {
                        "type": "string",
                        "description":"Username of the user."
                    },
                    "GroupPermissionId":{
                        "type": "integer",
                        "description": "Specifies the ID of the group permission.",
                        "format": "int32"
                    },
                    "CommentId":{
                        "type": "integer",
                        "description": "ID of the comment.",
                        "format": "int32"
                    },
                    "URl":{
                        "type": "string",
                        "description":"Specifies the URL of the dashboard."
                    },
                    "ParentCommentId":{
                        "type":"integer",
                        "description": "ID of the replied comment."
                    },
                    "NotificationTo":{
                        "type": "integer",
                        "description": "ID of the user who recevies the notification.",
                        "format": "int32"
                    },
                    "ModifiedDate":{
                        "type": "string",
                        "description": "Date modified of item in date format.",
                        "format": "date-time"
                    },
                    "IsRead": {
                        "type":"boolean",
                        "description": "Returns true if comment was read."
                    },
                    "ItemId":{
                        "type": "string",
                        "description": "ID of the item.",
                        "format": "guid"
                    },
                    "ItemName":{
                        "type": "string",
                        "description": "Name of the item."
                    },
                    "ItemType":{
                        "type":"string",
                        "description": "Type of the item."
                    },
                    "ItemVersionId":{
                        "type": "string",
                        "description": "Specifies the version ID of the item."
                    },
                    "ParentId":{
                        "type": "string",
                        "description": "Specifies the category ID."
                    },
                    "CategoryName":{
                        "type": "string",
                        "description": "Specifies the category name."
                    },
                    "FromCategoryId":{
                        "type": "string",
                        "description": "Specifies the source category ID."
                    },
                    "FromCategoryName":{
                        "type": "string",
                        "description": "Specifies the source category name."
                    },
                    "ToCategoryId":{
                        "type": "string",
                        "description": "Specifies the destination category ID"
                    },
                    "ToCategoryName":{
                        "type": "string",
                        "description": "Specifies the destination category name."
                    },
                    "UserPermissionId":{
                        "type": "string",
                        "description": "Specifies the ID of the user permission."
                    },
                    "ExecutedDate": {
                        "type": "string",
                        "description": "Schedule executed date in date format.",
                        "format": "date-time"
                    },
                    "IsOnDemand":{
                        "type": "string",
                        "description": "Returns true if schedule was run on-demand."
                    },
                    "Description": {
                        "type": "string",
                        "description": "Specifies the description of the item."
                    },
                    "ScheduleId":{
                        "type": "string",
                        "description": "ID of the schedule.",
                        "format": "guid"
                    },
                    "ScheduleName":{
                        "type": "string",
                        "description": "Name of the schedule."
                    },
                    "ExportType":{
                        "type":"string",
                        "description":"Export type.<br/>The possible values are <code>Excel, Pdf, Image, CSV</code>"
                    },
                    "PermissionAccess":{
                        "type": "string",
                        "description":"Specify an access type for item.<br/>The possible values are <code>Create, Read, ReadWrite, ReadWriteDelete, Download, Manage</code>"
                    },
                    "PermissionEntity":{
                        "type": "string",
                        "description": "Specify an entity of item for permission.<br/>The possible values are </br> Create - <code>AllCategories, AllDashboards, DashboardsInCategory, AllDataSources, AllSchedules, AllGroups</code> </br> Read, ReadWrite, ReadWriteDelete - <code>AllCategories, SpecificCategory, AllDashboards, DashboardsInCategory, SpecificDashboard, AllDataSources, SpecificDataSource, AllSchedules, SpecificSchedule</code> </br> Download - <code>AllDashboards, DashboardsInCategory, SpecificDashboard</code> </br> Manage - <code>AllPermissions, SpecificPermissions, AllSettings, SpecificSettings, SpecificGroup, UserAllGroups</code>"
                    }     
                }
            },
            "ApiGetGroupActivityLogs":{
                "type": "object",
                "properties":{
                    "Id": {
                        "type": "string",
                        "description": "ID of the activity."
                    },
                    "Activity": {
                        "type": "string",
                        "description": "Type of activity which is performed."
                    },
                    "OldValue": {
                        "type": "string",
                        "description": "Specifies the value before update."
                    },
                    "NewValue":{
                        "type": "string",
                        "description": "Specifies the value after update."
                    },
                    "ModifiedById":{
                        "type": "integer",
                        "description": "Specifies the ID of the user who modified this item.",
                        "format":"int32"
                    },
                    "ModifiedBy":{
                        "type": "string",
                        "description": "Specifies the name of the user who modified this item."
                    },
                    "GroupId":{
                        "type": "integer",
                        "description": "ID of the group.",
                        "format":"int32"
                    },
                    "GroupName":{
                        "type": "string",
                        "description": "Name of the group."
                    },
                    "SourceTypeId":{
                        "type": "integer",
                        "description": "Specifies the enum value of the source type.</br>The possible values are <code>1, 2, 3</code> \n\n Note: </br> <code>1</code> - Specify the Web source type </br> <code>2</code> - Specify the API source type </br> <code>3</code> - Specify the Job source type"
                    },
                    "SourceType":{
                        "type": "string",
                        "description": "Specifies the source type.</br>The possible values are <code>Web, API, Job</code>"
                    },
                    "ActivityStatusId":{
                        "type": "integer",
                        "description": "Specifies the enum value of the activity status.</br>The possible values are <code>2, 3</code> \n\n Note: </br> <code>2</code> - Specify the Success status </br> <code>3</code> - Specify the Fail status"
                    },
                    "ActivityStatus":{
                        "type": "string",
                        "description": "Status of the activity.</br>The possible values are <code>Success, Fail</code>"
                    },
                    "CreatedDate":{
                        "type":"string",
                        "description": "Date created of item in date format.",
                        "format": "date-time"
                    },
                    "IsActive":{
                        "type": "boolean",
                        "description": "Returns true if the item is active."
                    }
                }
            },
            "ApiGetGrouppermissionActivityLogs":{
                "type":"object",
                "properties":{
                     "Id": {
                        "type": "string",
                        "description": "ID of the activity."
                    },
                    "Activity": {
                        "type": "string",
                        "description": "Type of activity which is performed."
                    },
                    "ModifiedById":{
                        "type": "integer",
                        "description": "Specifies the ID of the user who modified this item.",
                        "format":"int32"
                    },
                    "ModifiedBy":{
                        "type": "string",
                        "description": "Specifies the name of the user who modified this item."
                    },
                    "GroupId":{
                        "type": "integer",
                        "description": "ID of the group.",
                        "format":"int32"
                    },
                    "GroupName":{
                        "type": "string",
                        "description": "Name of the group."
                    },
                    "CreatedDate":{
                        "type":"string",
                        "description": "Date created of item in date format.",
                        "format": "date-time"
                    },
                    "IsActive":{
                        "type": "boolean",
                        "description": "Returns true if the item is active."
                    },
                    "PermissionAccess":{
                        "type": "string",
                        "description":"Specify an access type for item.<br/>The possible values are <code>Create, Read, ReadWrite, ReadWriteDelete, Download, Manage</code>"
                    },
                    "PermissionEntity":{
                        "type": "string",
                        "description": "Specify an entity of item for permission.<br/>The possible values are </br> Create - <code>AllCategories, AllDashboards, DashboardsInCategory, AllDataSources, AllSchedules, AllGroups</code> </br> Read, ReadWrite, ReadWriteDelete - <code>AllCategories, SpecificCategory, AllDashboards, DashboardsInCategory, SpecificDashboard, AllDataSources, SpecificDataSource, AllSchedules, SpecificSchedule</code> </br> Download - <code>AllDashboards, DashboardsInCategory, SpecificDashboard</code> </br> Manage - <code>AllPermissions, SpecificPermissions, AllSettings, SpecificSettings, SpecificGroup, UserAllGroups</code>"
                    },
                    "GroupPermissionId":{
                        "type": "integer",
                        "description": "Specifies the ID of the group permission.",
                        "format": "int32"
                    }     
                }
            },
            "ApiGetUserActivityLogs":{
                "type": "object",
                "properties":{
                    "Id": {
                        "type": "string",
                        "description": "ID of the activity."
                    },
                    "Activity": {
                        "type": "string",
                        "description": "Type of activity which is performed."
                    },
                    "OldValue": {
                        "type": "string",
                        "description": "Specifies the value before update."
                    },
                    "NewValue":{
                        "type": "string",
                        "description": "Specifies the value after update."
                    },
                    "SourceTypeId":{
                        "type": "integer",
                        "description": "Specifies the enum value of the source type.</br>The possible values are <code>1, 2, 3</code> \n\n Note: </br> <code>1</code> - Specify the Web source type </br> <code>2</code> - Specify the API source type </br> <code>3</code> - Specify the Job source type"
                    },
                    "SourceType":{
                        "type": "string",
                        "description": "Specifies the source type.</br>The possible values are <code>Web, API, Job</code>"
                    },
                    "ActivityStatusId":{
                        "type": "integer",
                        "description": "Specifies the enum value of the activity status.</br>The possible values are <code>2, 3</code> \n\n Note: </br> <code>2</code> - Specify the Success status </br> <code>3</code> - Specify the Fail status"
                    },
                    "ActivityStatus":{
                        "type": "string",
                        "description": "Status of the activity.</br>The possible values are <code>Success, Fail</code>"
                    },
                    "CreatedDate":{
                        "type":"string",
                        "description": "Date created of item in date format.",
                        "format": "date-time"
                    },
                    "IsActive":{
                        "type": "boolean",
                        "description": "Returns true if the item is active."
                    },
                    "UserId":{
                        "type":"integer",
                        "description": "ID of the user.",
                        "format": "int32"
                    },
                    "ModifiedById":{
                        "type": "integer",
                        "description": "Specifies the ID of the user who modified this item.",
                        "format":"int32"
                    },
                    "ModifiedBy":{
                        "type": "string",
                        "description": "Specifies the name of the user who modified this item."
                    }
                }
            },
            "ApiGetUserPermissionActivityLogs":{
                "type": "object",
                "properties":{
                    "Id": {
                        "type": "string",
                        "description": "ID of the activity."
                    },
                    "Activity": {
                        "type": "string",
                        "description": "Type of activity which is performed."
                    },
                    "ModifiedById":{
                        "type": "integer",
                        "description": "specifies the ID of the user who modified this item.",
                        "format":"int32"
                    },
                    "ModifiedBy":{
                        "type": "string",
                        "description": "specifies the name of the user who modified this item."
                    },
                    "UserPermissionId":{
                        "type": "string",
                        "description": "Specifies the ID of the user permission."
                    },
                    "ItemId":{
                        "type": "string",
                        "description": "ID of the item.",
                        "format": "guid"
                    },
                    "CreatedDate":{
                        "type":"string",
                        "description": "Date created of item in date format.",
                        "format": "date-time"
                    },
                    "IsActive":{
                        "type": "boolean",
                        "description": "Returns true if the item is active."
                    },
                    "UserId":{
                        "type":"integer",
                        "description": "ID of the user.",
                        "format": "int32"
                    },
                    "PermissionAccess":{
                        "type": "string",
                        "description":"Specify an access type for item.<br/>The possible values are <code>Create, Read, ReadWrite, ReadWriteDelete, Download, Manage</code>"
                    },
                    "PermissionEntity":{
                        "type": "string",
                        "description": "Specify an entity of item for permission.<br/>The possible values are </br> Create - <code>AllCategories, AllDashboards, DashboardsInCategory, AllDataSources, AllSchedules, AllGroups</code> </br> Read, ReadWrite, ReadWriteDelete - <code>AllCategories, SpecificCategory, AllDashboards, DashboardsInCategory, SpecificDashboard, AllDataSources, SpecificDataSource, AllSchedules, SpecificSchedule</code> </br> Download - <code>AllDashboards, DashboardsInCategory, SpecificDashboard</code> </br> Manage - <code>AllPermissions, SpecificPermissions, AllSettings, SpecificSettings, SpecificGroup, UserAllGroups</code>"
                    }    
                }
            },
            "ApiGetCommentActivityLogs":{
                "type":"object",
                "properties":{
                    "Id": {
                        "type": "string",
                        "description": "ID of the activity."
                    },
                    "Activity": {
                        "type": "string",
                        "description": "Type of activity which is performed."
                    },
                    "ModifiedById":{
                        "type": "integer",
                        "description": "Specifies the ID of the user who modified this item.",
                        "format":"int32"
                    },
                    "ModifiedBy":{
                        "type": "string",
                        "description": "Specifies the name of the user who modified this item."
                    },
                    "CommentId":{
                        "type": "integer",
                        "description": "ID of the comment.",
                        "format": "int32"
                    },
                    "ParentCommentId":{
                        "type":"integer",
                        "description": "ID of the replied comment."
                    },
                    "NotificationTo":{
                        "type": "integer",
                        "description": "ID of the user who recevies the notification.",
                        "format": "int32"
                    },
                    "IsRead": {
                        "type":"boolean",
                        "description": "Returns true if comment was read."
                    },
                    "ModifiedDate":{
                        "type": "string",
                        "description": "Date modified of item in date format.",
                        "format": "date-time"
                    },
                    "Description": {
                        "type": "string",
                        "description": "Specifies the description of the item."
                    },
                    "IsActive":{
                        "type": "boolean",
                        "description": "Returns true if the item is active."
                    }
                }
            },
            "ApiGetScheduleActivityLogs":{
                "type": "object",
                "properties":{
                "Id": {
                    "type": "string",
                    "description": "ID of the activity."
                },
                "Activity": {
                    "type": "string",
                    "description": "Type of activity which is performed."
                },
                "ScheduleId":{
                    "type": "string",
                    "description": "Id of the schedule.",
                    "format": "guid"
                },
                "ItemId":{
                    "type": "string",
                    "description": "ID of the item.",
                    "format": "guid"
                },
                "ItemType":{
                    "type":"string",
                    "description": "Type of the item."
                },
                "ExecutedDate": {
                    "type": "string",
                    "description": "Schedule executed date in date format.",
                    "format": "date-time"
                },
                "IsOnDemand":{
                    "type": "string",
                    "description": "Returns true if schedule was run on-demand."
                },
                "IsActive":{
                    "type": "boolean",
                    "description": "Returns true if the item is active."
                },
                "ScheduleName":{
                    "type": "string",
                    "description": "Name of the schedule."
                },
                "ExportType":{
                    "type":"string",
                     "description":"Export type.<br/>The possible values are <code>Excel, Pdf, Image, CSV</code>"
                }
            }
            },
            "ApiGetSystemActivityLogs":{
                "type": "object",
                "properties":{
                "Id": {
                    "type": "string",
                    "description": "ID of the activity."
                },
                "Activity": {
                    "type": "string",
                    "description": "Type of activity which is performed."
                },
                "OldValue": {
                    "type": "string",
                    "description": "Specifies the value before update."
                },
                "NewValue":{
                    "type": "string",
                    "description": "Specifies the value after update."
                },
                "ModifiedById":{
                    "type": "integer",
                    "description": "Specifies the user ID of the item modifier.",
                    "format":"int32"
                },
                "ActivityStatus":{
                    "type": "string",
                    "description": "Status of the activity.</br>The possible values are <code>Success, Fail</code>"
                },
                "CreatedDate":{
                    "type":"string",
                    "description": "Date created of item in date format.",
                    "format": "date-time"
                },
                "IsActive":{
                    "type": "boolean",
                    "description": "Returns true if the item is active."
                },
                "SettingName":
                {
                    "type": "string",
                    "description": "Specifies the description of the setting."
                }
            }
            },
            "ApiGetitemActivityLogs":{
                "type": "object",
                "properties":{
                    "Id": {
                        "type": "string",
                        "description": "ID of the activity."
                    },
                    "Activity": {
                        "type": "string",
                        "description": "Type of activity which is performed."
                    },
                    "ModifiedById":{
                        "type": "integer",
                        "description": "Specifies the ID of the user who modified this item.",
                        "format":"int32"
                    },
                    "ModifiedBy":{
                        "type": "string",
                        "description": "Specifies the name of the user who modified this item."
                    },
                    "SourceTypeId":{
                        "type": "integer",
                        "description": "Specifies the enum value of the source type.</br>The possible values are <code>1, 2, 3</code> \n\n Note: </br> <code>1</code> - Specify the Web source type </br> <code>2</code> - Specify the API source type </br> <code>3</code> - Specify the Job source type"
                    },
                    "SourceType":{
                        "type": "string",
                        "description": "Specifies the source type.</br>The possible values are <code>Web, API, Job</code>"
                    },
                    "ItemId":{
                        "type": "string",
                        "description": "ID of the item.",
                        "format": "guid"
                    },
                    "ItemName":{
                        "type": "string",
                        "description": "Name of the item."
                    },
                    "ItemType":{
                        "type":"string",
                        "description": "Type of the item."
                    },
                    "ItemVersionId":{
                        "type": "string",
                        "description": "Specifies the version ID of the item."
                    },
                    "ParentId":{
                        "type": "string",
                        "description": "Specifies the category ID."
                    },
                    "CategoryName":{
                        "type": "string",
                        "description": "Specifies the category name."
                    },
                    "FromCategoryId":{
                        "type": "string",
                        "description": "Specifies the source category ID."
                    },
                    "FromCategoryName":{
                        "type": "string",
                        "description": "Specifies the source category name."
                    },
                    "ToCategoryId":{
                        "type": "string",
                        "description": "Specifies the destination category ID"
                    },
                    "ToCategoryName":{
                        "type": "string",
                        "description": "Specifies the destination category name."
                    },
                    "IsActive":{
                        "type": "boolean",
                        "description": "Returns true if the item is active."
                    }
                }
            },
            "WehbooksSettings":{
                "type": "object",
                "properties":{
                    "Id":{
                        "type":"integer",
                        "description": "ID of the webhook."
                    },
                    "Name":{
                        "type": "string",
                        "description": "Name of the webhook."
                    },
                    "Event":{
                        "type":"string",
                        "description":"Type of the webhook event."
                    },
                    "ModifiedBy":{
                        "type": "string",
                        "description": "Name of the webhook modifier."
                    },
                    "ModifiedDate": {
                        "type": "string",
                        "description": "Date modified of item in string format."
                    },
                    "Status": {
                        "type": "boolean",
                        "description": "Returns true if the webhook is active."
                    }
                }
            }
        },
        "securitySchemes": {
          "bearer <token>": {
            "type": "http",
            "description": "JWT token Authentication",
            "scheme": "bearer",
            "bearerFormat": "JWT"
          }
        }
    }
}
